# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.advance_arg import AdvanceArg  # noqa: F401,E501
from demisto_client.demisto_api.models.feed_indicators import FeedIndicators  # noqa: F401,E501
from demisto_client.demisto_api.models.incidents import Incidents  # noqa: F401,E501
from demisto_client.demisto_api.models.mapper import Mapper  # noqa: F401,E501
from demisto_client.demisto_api.models.mapper_type import MapperType  # noqa: F401,E501
from demisto_client.demisto_api.models.unclassified_cases import UnclassifiedCases  # noqa: F401,E501
from demisto_client.demisto_api.models.version import Version  # noqa: F401,E501


class InstanceClassifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brands': 'list[str]',
        'commit_message': 'str',
        'default_incident_type': 'str',
        'description': 'str',
        'feed': 'bool',
        'from_server_version': 'Version',
        'highlight': 'dict(str, list[str])',
        'id': 'str',
        'incident_samples': 'Incidents',
        'indicator_samples': 'FeedIndicators',
        'instance_ids': 'list[str]',
        'item_version': 'Version',
        'key_type_map': 'dict(str, str)',
        'locked': 'bool',
        'logical_version': 'int',
        'mapping': 'dict(str, Mapper)',
        'modified': 'datetime',
        'name': 'str',
        'name_raw': 'str',
        'numeric_id': 'int',
        'pack_id': 'str',
        'pack_propagation_labels': 'list[str]',
        'prev_name': 'str',
        'primary_term': 'int',
        'propagation_labels': 'list[str]',
        'sequence_number': 'int',
        'should_commit': 'bool',
        'sort_values': 'list[str]',
        'source_classifier_id': 'str',
        'system': 'bool',
        'to_server_version': 'Version',
        'transformer': 'AdvanceArg',
        'type': 'MapperType',
        'unclassified_cases': 'dict(str, UnclassifiedCases)',
        'vc_should_ignore': 'bool',
        'vc_should_keep_item_legacy_prod_machine': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'brands': 'brands',
        'commit_message': 'commitMessage',
        'default_incident_type': 'defaultIncidentType',
        'description': 'description',
        'feed': 'feed',
        'from_server_version': 'fromServerVersion',
        'highlight': 'highlight',
        'id': 'id',
        'incident_samples': 'incidentSamples',
        'indicator_samples': 'indicatorSamples',
        'instance_ids': 'instanceIds',
        'item_version': 'itemVersion',
        'key_type_map': 'keyTypeMap',
        'locked': 'locked',
        'logical_version': 'logicalVersion',
        'mapping': 'mapping',
        'modified': 'modified',
        'name': 'name',
        'name_raw': 'nameRaw',
        'numeric_id': 'numericId',
        'pack_id': 'packID',
        'pack_propagation_labels': 'packPropagationLabels',
        'prev_name': 'prevName',
        'primary_term': 'primaryTerm',
        'propagation_labels': 'propagationLabels',
        'sequence_number': 'sequenceNumber',
        'should_commit': 'shouldCommit',
        'sort_values': 'sortValues',
        'source_classifier_id': 'sourceClassifierId',
        'system': 'system',
        'to_server_version': 'toServerVersion',
        'transformer': 'transformer',
        'type': 'type',
        'unclassified_cases': 'unclassifiedCases',
        'vc_should_ignore': 'vcShouldIgnore',
        'vc_should_keep_item_legacy_prod_machine': 'vcShouldKeepItemLegacyProdMachine',
        'version': 'version'
    }

    def __init__(self, brands=None, commit_message=None, default_incident_type=None, description=None, feed=None, from_server_version=None, highlight=None, id=None, incident_samples=None, indicator_samples=None, instance_ids=None, item_version=None, key_type_map=None, locked=None, logical_version=None, mapping=None, modified=None, name=None, name_raw=None, numeric_id=None, pack_id=None, pack_propagation_labels=None, prev_name=None, primary_term=None, propagation_labels=None, sequence_number=None, should_commit=None, sort_values=None, source_classifier_id=None, system=None, to_server_version=None, transformer=None, type=None, unclassified_cases=None, vc_should_ignore=None, vc_should_keep_item_legacy_prod_machine=None, version=None):  # noqa: E501
        """InstanceClassifier - a model defined in Swagger"""  # noqa: E501

        self._brands = None
        self._commit_message = None
        self._default_incident_type = None
        self._description = None
        self._feed = None
        self._from_server_version = None
        self._highlight = None
        self._id = None
        self._incident_samples = None
        self._indicator_samples = None
        self._instance_ids = None
        self._item_version = None
        self._key_type_map = None
        self._locked = None
        self._logical_version = None
        self._mapping = None
        self._modified = None
        self._name = None
        self._name_raw = None
        self._numeric_id = None
        self._pack_id = None
        self._pack_propagation_labels = None
        self._prev_name = None
        self._primary_term = None
        self._propagation_labels = None
        self._sequence_number = None
        self._should_commit = None
        self._sort_values = None
        self._source_classifier_id = None
        self._system = None
        self._to_server_version = None
        self._transformer = None
        self._type = None
        self._unclassified_cases = None
        self._vc_should_ignore = None
        self._vc_should_keep_item_legacy_prod_machine = None
        self._version = None
        self.discriminator = None

        if brands is not None:
            self.brands = brands
        if commit_message is not None:
            self.commit_message = commit_message
        if default_incident_type is not None:
            self.default_incident_type = default_incident_type
        if description is not None:
            self.description = description
        if feed is not None:
            self.feed = feed
        if from_server_version is not None:
            self.from_server_version = from_server_version
        if highlight is not None:
            self.highlight = highlight
        if id is not None:
            self.id = id
        if incident_samples is not None:
            self.incident_samples = incident_samples
        if indicator_samples is not None:
            self.indicator_samples = indicator_samples
        if instance_ids is not None:
            self.instance_ids = instance_ids
        if item_version is not None:
            self.item_version = item_version
        if key_type_map is not None:
            self.key_type_map = key_type_map
        if locked is not None:
            self.locked = locked
        if logical_version is not None:
            self.logical_version = logical_version
        if mapping is not None:
            self.mapping = mapping
        if modified is not None:
            self.modified = modified
        if name is not None:
            self.name = name
        if name_raw is not None:
            self.name_raw = name_raw
        if numeric_id is not None:
            self.numeric_id = numeric_id
        if pack_id is not None:
            self.pack_id = pack_id
        if pack_propagation_labels is not None:
            self.pack_propagation_labels = pack_propagation_labels
        if prev_name is not None:
            self.prev_name = prev_name
        if primary_term is not None:
            self.primary_term = primary_term
        if propagation_labels is not None:
            self.propagation_labels = propagation_labels
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if should_commit is not None:
            self.should_commit = should_commit
        if sort_values is not None:
            self.sort_values = sort_values
        if source_classifier_id is not None:
            self.source_classifier_id = source_classifier_id
        if system is not None:
            self.system = system
        if to_server_version is not None:
            self.to_server_version = to_server_version
        if transformer is not None:
            self.transformer = transformer
        if type is not None:
            self.type = type
        if unclassified_cases is not None:
            self.unclassified_cases = unclassified_cases
        if vc_should_ignore is not None:
            self.vc_should_ignore = vc_should_ignore
        if vc_should_keep_item_legacy_prod_machine is not None:
            self.vc_should_keep_item_legacy_prod_machine = vc_should_keep_item_legacy_prod_machine
        if version is not None:
            self.version = version

    @property
    def brands(self):
        """Gets the brands of this InstanceClassifier.  # noqa: E501


        :return: The brands of this InstanceClassifier.  # noqa: E501
        :rtype: list[str]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this InstanceClassifier.


        :param brands: The brands of this InstanceClassifier.  # noqa: E501
        :type: list[str]
        """

        self._brands = brands

    @property
    def commit_message(self):
        """Gets the commit_message of this InstanceClassifier.  # noqa: E501


        :return: The commit_message of this InstanceClassifier.  # noqa: E501
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this InstanceClassifier.


        :param commit_message: The commit_message of this InstanceClassifier.  # noqa: E501
        :type: str
        """

        self._commit_message = commit_message

    @property
    def default_incident_type(self):
        """Gets the default_incident_type of this InstanceClassifier.  # noqa: E501


        :return: The default_incident_type of this InstanceClassifier.  # noqa: E501
        :rtype: str
        """
        return self._default_incident_type

    @default_incident_type.setter
    def default_incident_type(self, default_incident_type):
        """Sets the default_incident_type of this InstanceClassifier.


        :param default_incident_type: The default_incident_type of this InstanceClassifier.  # noqa: E501
        :type: str
        """

        self._default_incident_type = default_incident_type

    @property
    def description(self):
        """Gets the description of this InstanceClassifier.  # noqa: E501


        :return: The description of this InstanceClassifier.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InstanceClassifier.


        :param description: The description of this InstanceClassifier.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def feed(self):
        """Gets the feed of this InstanceClassifier.  # noqa: E501


        :return: The feed of this InstanceClassifier.  # noqa: E501
        :rtype: bool
        """
        return self._feed

    @feed.setter
    def feed(self, feed):
        """Sets the feed of this InstanceClassifier.


        :param feed: The feed of this InstanceClassifier.  # noqa: E501
        :type: bool
        """

        self._feed = feed

    @property
    def from_server_version(self):
        """Gets the from_server_version of this InstanceClassifier.  # noqa: E501


        :return: The from_server_version of this InstanceClassifier.  # noqa: E501
        :rtype: Version
        """
        return self._from_server_version

    @from_server_version.setter
    def from_server_version(self, from_server_version):
        """Sets the from_server_version of this InstanceClassifier.


        :param from_server_version: The from_server_version of this InstanceClassifier.  # noqa: E501
        :type: Version
        """

        self._from_server_version = from_server_version

    @property
    def highlight(self):
        """Gets the highlight of this InstanceClassifier.  # noqa: E501


        :return: The highlight of this InstanceClassifier.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this InstanceClassifier.


        :param highlight: The highlight of this InstanceClassifier.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._highlight = highlight

    @property
    def id(self):
        """Gets the id of this InstanceClassifier.  # noqa: E501


        :return: The id of this InstanceClassifier.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstanceClassifier.


        :param id: The id of this InstanceClassifier.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def incident_samples(self):
        """Gets the incident_samples of this InstanceClassifier.  # noqa: E501


        :return: The incident_samples of this InstanceClassifier.  # noqa: E501
        :rtype: Incidents
        """
        return self._incident_samples

    @incident_samples.setter
    def incident_samples(self, incident_samples):
        """Sets the incident_samples of this InstanceClassifier.


        :param incident_samples: The incident_samples of this InstanceClassifier.  # noqa: E501
        :type: Incidents
        """

        self._incident_samples = incident_samples

    @property
    def indicator_samples(self):
        """Gets the indicator_samples of this InstanceClassifier.  # noqa: E501


        :return: The indicator_samples of this InstanceClassifier.  # noqa: E501
        :rtype: FeedIndicators
        """
        return self._indicator_samples

    @indicator_samples.setter
    def indicator_samples(self, indicator_samples):
        """Sets the indicator_samples of this InstanceClassifier.


        :param indicator_samples: The indicator_samples of this InstanceClassifier.  # noqa: E501
        :type: FeedIndicators
        """

        self._indicator_samples = indicator_samples

    @property
    def instance_ids(self):
        """Gets the instance_ids of this InstanceClassifier.  # noqa: E501


        :return: The instance_ids of this InstanceClassifier.  # noqa: E501
        :rtype: list[str]
        """
        return self._instance_ids

    @instance_ids.setter
    def instance_ids(self, instance_ids):
        """Sets the instance_ids of this InstanceClassifier.


        :param instance_ids: The instance_ids of this InstanceClassifier.  # noqa: E501
        :type: list[str]
        """

        self._instance_ids = instance_ids

    @property
    def item_version(self):
        """Gets the item_version of this InstanceClassifier.  # noqa: E501


        :return: The item_version of this InstanceClassifier.  # noqa: E501
        :rtype: Version
        """
        return self._item_version

    @item_version.setter
    def item_version(self, item_version):
        """Sets the item_version of this InstanceClassifier.


        :param item_version: The item_version of this InstanceClassifier.  # noqa: E501
        :type: Version
        """

        self._item_version = item_version

    @property
    def key_type_map(self):
        """Gets the key_type_map of this InstanceClassifier.  # noqa: E501


        :return: The key_type_map of this InstanceClassifier.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._key_type_map

    @key_type_map.setter
    def key_type_map(self, key_type_map):
        """Sets the key_type_map of this InstanceClassifier.


        :param key_type_map: The key_type_map of this InstanceClassifier.  # noqa: E501
        :type: dict(str, str)
        """

        self._key_type_map = key_type_map

    @property
    def locked(self):
        """Gets the locked of this InstanceClassifier.  # noqa: E501


        :return: The locked of this InstanceClassifier.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this InstanceClassifier.


        :param locked: The locked of this InstanceClassifier.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def logical_version(self):
        """Gets the logical_version of this InstanceClassifier.  # noqa: E501


        :return: The logical_version of this InstanceClassifier.  # noqa: E501
        :rtype: int
        """
        return self._logical_version

    @logical_version.setter
    def logical_version(self, logical_version):
        """Sets the logical_version of this InstanceClassifier.


        :param logical_version: The logical_version of this InstanceClassifier.  # noqa: E501
        :type: int
        """

        self._logical_version = logical_version

    @property
    def mapping(self):
        """Gets the mapping of this InstanceClassifier.  # noqa: E501


        :return: The mapping of this InstanceClassifier.  # noqa: E501
        :rtype: dict(str, Mapper)
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this InstanceClassifier.


        :param mapping: The mapping of this InstanceClassifier.  # noqa: E501
        :type: dict(str, Mapper)
        """

        self._mapping = mapping

    @property
    def modified(self):
        """Gets the modified of this InstanceClassifier.  # noqa: E501


        :return: The modified of this InstanceClassifier.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this InstanceClassifier.


        :param modified: The modified of this InstanceClassifier.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this InstanceClassifier.  # noqa: E501


        :return: The name of this InstanceClassifier.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstanceClassifier.


        :param name: The name of this InstanceClassifier.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_raw(self):
        """Gets the name_raw of this InstanceClassifier.  # noqa: E501


        :return: The name_raw of this InstanceClassifier.  # noqa: E501
        :rtype: str
        """
        return self._name_raw

    @name_raw.setter
    def name_raw(self, name_raw):
        """Sets the name_raw of this InstanceClassifier.


        :param name_raw: The name_raw of this InstanceClassifier.  # noqa: E501
        :type: str
        """

        self._name_raw = name_raw

    @property
    def numeric_id(self):
        """Gets the numeric_id of this InstanceClassifier.  # noqa: E501


        :return: The numeric_id of this InstanceClassifier.  # noqa: E501
        :rtype: int
        """
        return self._numeric_id

    @numeric_id.setter
    def numeric_id(self, numeric_id):
        """Sets the numeric_id of this InstanceClassifier.


        :param numeric_id: The numeric_id of this InstanceClassifier.  # noqa: E501
        :type: int
        """

        self._numeric_id = numeric_id

    @property
    def pack_id(self):
        """Gets the pack_id of this InstanceClassifier.  # noqa: E501


        :return: The pack_id of this InstanceClassifier.  # noqa: E501
        :rtype: str
        """
        return self._pack_id

    @pack_id.setter
    def pack_id(self, pack_id):
        """Sets the pack_id of this InstanceClassifier.


        :param pack_id: The pack_id of this InstanceClassifier.  # noqa: E501
        :type: str
        """

        self._pack_id = pack_id

    @property
    def pack_propagation_labels(self):
        """Gets the pack_propagation_labels of this InstanceClassifier.  # noqa: E501


        :return: The pack_propagation_labels of this InstanceClassifier.  # noqa: E501
        :rtype: list[str]
        """
        return self._pack_propagation_labels

    @pack_propagation_labels.setter
    def pack_propagation_labels(self, pack_propagation_labels):
        """Sets the pack_propagation_labels of this InstanceClassifier.


        :param pack_propagation_labels: The pack_propagation_labels of this InstanceClassifier.  # noqa: E501
        :type: list[str]
        """

        self._pack_propagation_labels = pack_propagation_labels

    @property
    def prev_name(self):
        """Gets the prev_name of this InstanceClassifier.  # noqa: E501


        :return: The prev_name of this InstanceClassifier.  # noqa: E501
        :rtype: str
        """
        return self._prev_name

    @prev_name.setter
    def prev_name(self, prev_name):
        """Sets the prev_name of this InstanceClassifier.


        :param prev_name: The prev_name of this InstanceClassifier.  # noqa: E501
        :type: str
        """

        self._prev_name = prev_name

    @property
    def primary_term(self):
        """Gets the primary_term of this InstanceClassifier.  # noqa: E501


        :return: The primary_term of this InstanceClassifier.  # noqa: E501
        :rtype: int
        """
        return self._primary_term

    @primary_term.setter
    def primary_term(self, primary_term):
        """Sets the primary_term of this InstanceClassifier.


        :param primary_term: The primary_term of this InstanceClassifier.  # noqa: E501
        :type: int
        """

        self._primary_term = primary_term

    @property
    def propagation_labels(self):
        """Gets the propagation_labels of this InstanceClassifier.  # noqa: E501


        :return: The propagation_labels of this InstanceClassifier.  # noqa: E501
        :rtype: list[str]
        """
        return self._propagation_labels

    @propagation_labels.setter
    def propagation_labels(self, propagation_labels):
        """Sets the propagation_labels of this InstanceClassifier.


        :param propagation_labels: The propagation_labels of this InstanceClassifier.  # noqa: E501
        :type: list[str]
        """

        self._propagation_labels = propagation_labels

    @property
    def sequence_number(self):
        """Gets the sequence_number of this InstanceClassifier.  # noqa: E501


        :return: The sequence_number of this InstanceClassifier.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this InstanceClassifier.


        :param sequence_number: The sequence_number of this InstanceClassifier.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def should_commit(self):
        """Gets the should_commit of this InstanceClassifier.  # noqa: E501


        :return: The should_commit of this InstanceClassifier.  # noqa: E501
        :rtype: bool
        """
        return self._should_commit

    @should_commit.setter
    def should_commit(self, should_commit):
        """Sets the should_commit of this InstanceClassifier.


        :param should_commit: The should_commit of this InstanceClassifier.  # noqa: E501
        :type: bool
        """

        self._should_commit = should_commit

    @property
    def sort_values(self):
        """Gets the sort_values of this InstanceClassifier.  # noqa: E501


        :return: The sort_values of this InstanceClassifier.  # noqa: E501
        :rtype: list[str]
        """
        return self._sort_values

    @sort_values.setter
    def sort_values(self, sort_values):
        """Sets the sort_values of this InstanceClassifier.


        :param sort_values: The sort_values of this InstanceClassifier.  # noqa: E501
        :type: list[str]
        """

        self._sort_values = sort_values

    @property
    def source_classifier_id(self):
        """Gets the source_classifier_id of this InstanceClassifier.  # noqa: E501


        :return: The source_classifier_id of this InstanceClassifier.  # noqa: E501
        :rtype: str
        """
        return self._source_classifier_id

    @source_classifier_id.setter
    def source_classifier_id(self, source_classifier_id):
        """Sets the source_classifier_id of this InstanceClassifier.


        :param source_classifier_id: The source_classifier_id of this InstanceClassifier.  # noqa: E501
        :type: str
        """

        self._source_classifier_id = source_classifier_id

    @property
    def system(self):
        """Gets the system of this InstanceClassifier.  # noqa: E501


        :return: The system of this InstanceClassifier.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this InstanceClassifier.


        :param system: The system of this InstanceClassifier.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def to_server_version(self):
        """Gets the to_server_version of this InstanceClassifier.  # noqa: E501


        :return: The to_server_version of this InstanceClassifier.  # noqa: E501
        :rtype: Version
        """
        return self._to_server_version

    @to_server_version.setter
    def to_server_version(self, to_server_version):
        """Sets the to_server_version of this InstanceClassifier.


        :param to_server_version: The to_server_version of this InstanceClassifier.  # noqa: E501
        :type: Version
        """

        self._to_server_version = to_server_version

    @property
    def transformer(self):
        """Gets the transformer of this InstanceClassifier.  # noqa: E501


        :return: The transformer of this InstanceClassifier.  # noqa: E501
        :rtype: AdvanceArg
        """
        return self._transformer

    @transformer.setter
    def transformer(self, transformer):
        """Sets the transformer of this InstanceClassifier.


        :param transformer: The transformer of this InstanceClassifier.  # noqa: E501
        :type: AdvanceArg
        """

        self._transformer = transformer

    @property
    def type(self):
        """Gets the type of this InstanceClassifier.  # noqa: E501


        :return: The type of this InstanceClassifier.  # noqa: E501
        :rtype: MapperType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InstanceClassifier.


        :param type: The type of this InstanceClassifier.  # noqa: E501
        :type: MapperType
        """

        self._type = type

    @property
    def unclassified_cases(self):
        """Gets the unclassified_cases of this InstanceClassifier.  # noqa: E501


        :return: The unclassified_cases of this InstanceClassifier.  # noqa: E501
        :rtype: dict(str, UnclassifiedCases)
        """
        return self._unclassified_cases

    @unclassified_cases.setter
    def unclassified_cases(self, unclassified_cases):
        """Sets the unclassified_cases of this InstanceClassifier.


        :param unclassified_cases: The unclassified_cases of this InstanceClassifier.  # noqa: E501
        :type: dict(str, UnclassifiedCases)
        """

        self._unclassified_cases = unclassified_cases

    @property
    def vc_should_ignore(self):
        """Gets the vc_should_ignore of this InstanceClassifier.  # noqa: E501


        :return: The vc_should_ignore of this InstanceClassifier.  # noqa: E501
        :rtype: bool
        """
        return self._vc_should_ignore

    @vc_should_ignore.setter
    def vc_should_ignore(self, vc_should_ignore):
        """Sets the vc_should_ignore of this InstanceClassifier.


        :param vc_should_ignore: The vc_should_ignore of this InstanceClassifier.  # noqa: E501
        :type: bool
        """

        self._vc_should_ignore = vc_should_ignore

    @property
    def vc_should_keep_item_legacy_prod_machine(self):
        """Gets the vc_should_keep_item_legacy_prod_machine of this InstanceClassifier.  # noqa: E501


        :return: The vc_should_keep_item_legacy_prod_machine of this InstanceClassifier.  # noqa: E501
        :rtype: bool
        """
        return self._vc_should_keep_item_legacy_prod_machine

    @vc_should_keep_item_legacy_prod_machine.setter
    def vc_should_keep_item_legacy_prod_machine(self, vc_should_keep_item_legacy_prod_machine):
        """Sets the vc_should_keep_item_legacy_prod_machine of this InstanceClassifier.


        :param vc_should_keep_item_legacy_prod_machine: The vc_should_keep_item_legacy_prod_machine of this InstanceClassifier.  # noqa: E501
        :type: bool
        """

        self._vc_should_keep_item_legacy_prod_machine = vc_should_keep_item_legacy_prod_machine

    @property
    def version(self):
        """Gets the version of this InstanceClassifier.  # noqa: E501


        :return: The version of this InstanceClassifier.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InstanceClassifier.


        :param version: The version of this InstanceClassifier.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceClassifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceClassifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
