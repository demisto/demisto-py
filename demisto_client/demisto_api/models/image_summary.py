# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ImageSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'containers': 'int',
        'created': 'int',
        'id': 'str',
        'labels': 'dict(str, str)',
        'parent_id': 'str',
        'repo_digests': 'list[str]',
        'repo_tags': 'list[str]',
        'shared_size': 'int',
        'size': 'int',
        'virtual_size': 'int'
    }

    attribute_map = {
        'containers': 'Containers',
        'created': 'Created',
        'id': 'Id',
        'labels': 'Labels',
        'parent_id': 'ParentId',
        'repo_digests': 'RepoDigests',
        'repo_tags': 'RepoTags',
        'shared_size': 'SharedSize',
        'size': 'Size',
        'virtual_size': 'VirtualSize'
    }

    def __init__(self, containers=None, created=None, id=None, labels=None, parent_id=None, repo_digests=None, repo_tags=None, shared_size=None, size=None, virtual_size=None):  # noqa: E501
        """ImageSummary - a model defined in Swagger"""  # noqa: E501

        self._containers = None
        self._created = None
        self._id = None
        self._labels = None
        self._parent_id = None
        self._repo_digests = None
        self._repo_tags = None
        self._shared_size = None
        self._size = None
        self._virtual_size = None
        self.discriminator = None

        self.containers = containers
        self.created = created
        self.id = id
        self.labels = labels
        self.parent_id = parent_id
        self.repo_digests = repo_digests
        self.repo_tags = repo_tags
        self.shared_size = shared_size
        self.size = size
        self.virtual_size = virtual_size

    @property
    def containers(self):
        """Gets the containers of this ImageSummary.  # noqa: E501

        containers  # noqa: E501

        :return: The containers of this ImageSummary.  # noqa: E501
        :rtype: int
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ImageSummary.

        containers  # noqa: E501

        :param containers: The containers of this ImageSummary.  # noqa: E501
        :type: int
        """
        if containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")  # noqa: E501

        self._containers = containers

    @property
    def created(self):
        """Gets the created of this ImageSummary.  # noqa: E501

        created  # noqa: E501

        :return: The created of this ImageSummary.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImageSummary.

        created  # noqa: E501

        :param created: The created of this ImageSummary.  # noqa: E501
        :type: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def id(self):
        """Gets the id of this ImageSummary.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this ImageSummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageSummary.

        Id  # noqa: E501

        :param id: The id of this ImageSummary.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this ImageSummary.  # noqa: E501

        labels  # noqa: E501

        :return: The labels of this ImageSummary.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ImageSummary.

        labels  # noqa: E501

        :param labels: The labels of this ImageSummary.  # noqa: E501
        :type: dict(str, str)
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def parent_id(self):
        """Gets the parent_id of this ImageSummary.  # noqa: E501

        parent Id  # noqa: E501

        :return: The parent_id of this ImageSummary.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ImageSummary.

        parent Id  # noqa: E501

        :param parent_id: The parent_id of this ImageSummary.  # noqa: E501
        :type: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def repo_digests(self):
        """Gets the repo_digests of this ImageSummary.  # noqa: E501

        repo digests  # noqa: E501

        :return: The repo_digests of this ImageSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_digests

    @repo_digests.setter
    def repo_digests(self, repo_digests):
        """Sets the repo_digests of this ImageSummary.

        repo digests  # noqa: E501

        :param repo_digests: The repo_digests of this ImageSummary.  # noqa: E501
        :type: list[str]
        """
        if repo_digests is None:
            raise ValueError("Invalid value for `repo_digests`, must not be `None`")  # noqa: E501

        self._repo_digests = repo_digests

    @property
    def repo_tags(self):
        """Gets the repo_tags of this ImageSummary.  # noqa: E501

        repo tags  # noqa: E501

        :return: The repo_tags of this ImageSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_tags

    @repo_tags.setter
    def repo_tags(self, repo_tags):
        """Sets the repo_tags of this ImageSummary.

        repo tags  # noqa: E501

        :param repo_tags: The repo_tags of this ImageSummary.  # noqa: E501
        :type: list[str]
        """
        if repo_tags is None:
            raise ValueError("Invalid value for `repo_tags`, must not be `None`")  # noqa: E501

        self._repo_tags = repo_tags

    @property
    def shared_size(self):
        """Gets the shared_size of this ImageSummary.  # noqa: E501

        shared size  # noqa: E501

        :return: The shared_size of this ImageSummary.  # noqa: E501
        :rtype: int
        """
        return self._shared_size

    @shared_size.setter
    def shared_size(self, shared_size):
        """Sets the shared_size of this ImageSummary.

        shared size  # noqa: E501

        :param shared_size: The shared_size of this ImageSummary.  # noqa: E501
        :type: int
        """
        if shared_size is None:
            raise ValueError("Invalid value for `shared_size`, must not be `None`")  # noqa: E501

        self._shared_size = shared_size

    @property
    def size(self):
        """Gets the size of this ImageSummary.  # noqa: E501

        size  # noqa: E501

        :return: The size of this ImageSummary.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImageSummary.

        size  # noqa: E501

        :param size: The size of this ImageSummary.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def virtual_size(self):
        """Gets the virtual_size of this ImageSummary.  # noqa: E501

        virtual size  # noqa: E501

        :return: The virtual_size of this ImageSummary.  # noqa: E501
        :rtype: int
        """
        return self._virtual_size

    @virtual_size.setter
    def virtual_size(self, virtual_size):
        """Sets the virtual_size of this ImageSummary.

        virtual size  # noqa: E501

        :param virtual_size: The virtual_size of this ImageSummary.  # noqa: E501
        :type: int
        """
        if virtual_size is None:
            raise ValueError("Invalid value for `virtual_size`, must not be `None`")  # noqa: E501

        self._virtual_size = virtual_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
