# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.custom_fields import CustomFields  # noqa: F401,E501
from demisto_client.demisto_api.models.reliability import Reliability  # noqa: F401,E501


class RelationshipAPI(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brand': 'str',
        'entity_a': 'str',
        'entity_a_family': 'str',
        'entity_b': 'str',
        'entity_b_family': 'str',
        'fields': 'CustomFields',
        'instance': 'str',
        'name': 'str',
        'object_type_a': 'str',
        'object_type_b': 'str',
        'reliability': 'Reliability',
        'reverse_name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'brand': 'brand',
        'entity_a': 'entityA',
        'entity_a_family': 'entityAFamily',
        'entity_b': 'entityB',
        'entity_b_family': 'entityBFamily',
        'fields': 'fields',
        'instance': 'instance',
        'name': 'name',
        'object_type_a': 'objectTypeA',
        'object_type_b': 'objectTypeB',
        'reliability': 'reliability',
        'reverse_name': 'reverseName',
        'type': 'type'
    }

    def __init__(self, brand=None, entity_a=None, entity_a_family=None, entity_b=None, entity_b_family=None, fields=None, instance=None, name=None, object_type_a=None, object_type_b=None, reliability=None, reverse_name=None, type=None):  # noqa: E501
        """RelationshipAPI - a model defined in Swagger"""  # noqa: E501

        self._brand = None
        self._entity_a = None
        self._entity_a_family = None
        self._entity_b = None
        self._entity_b_family = None
        self._fields = None
        self._instance = None
        self._name = None
        self._object_type_a = None
        self._object_type_b = None
        self._reliability = None
        self._reverse_name = None
        self._type = None
        self.discriminator = None

        if brand is not None:
            self.brand = brand
        if entity_a is not None:
            self.entity_a = entity_a
        if entity_a_family is not None:
            self.entity_a_family = entity_a_family
        if entity_b is not None:
            self.entity_b = entity_b
        if entity_b_family is not None:
            self.entity_b_family = entity_b_family
        if fields is not None:
            self.fields = fields
        if instance is not None:
            self.instance = instance
        if name is not None:
            self.name = name
        if object_type_a is not None:
            self.object_type_a = object_type_a
        if object_type_b is not None:
            self.object_type_b = object_type_b
        if reliability is not None:
            self.reliability = reliability
        if reverse_name is not None:
            self.reverse_name = reverse_name
        if type is not None:
            self.type = type

    @property
    def brand(self):
        """Gets the brand of this RelationshipAPI.  # noqa: E501


        :return: The brand of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this RelationshipAPI.


        :param brand: The brand of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def entity_a(self):
        """Gets the entity_a of this RelationshipAPI.  # noqa: E501


        :return: The entity_a of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._entity_a

    @entity_a.setter
    def entity_a(self, entity_a):
        """Sets the entity_a of this RelationshipAPI.


        :param entity_a: The entity_a of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._entity_a = entity_a

    @property
    def entity_a_family(self):
        """Gets the entity_a_family of this RelationshipAPI.  # noqa: E501


        :return: The entity_a_family of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._entity_a_family

    @entity_a_family.setter
    def entity_a_family(self, entity_a_family):
        """Sets the entity_a_family of this RelationshipAPI.


        :param entity_a_family: The entity_a_family of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._entity_a_family = entity_a_family

    @property
    def entity_b(self):
        """Gets the entity_b of this RelationshipAPI.  # noqa: E501


        :return: The entity_b of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._entity_b

    @entity_b.setter
    def entity_b(self, entity_b):
        """Sets the entity_b of this RelationshipAPI.


        :param entity_b: The entity_b of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._entity_b = entity_b

    @property
    def entity_b_family(self):
        """Gets the entity_b_family of this RelationshipAPI.  # noqa: E501


        :return: The entity_b_family of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._entity_b_family

    @entity_b_family.setter
    def entity_b_family(self, entity_b_family):
        """Sets the entity_b_family of this RelationshipAPI.


        :param entity_b_family: The entity_b_family of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._entity_b_family = entity_b_family

    @property
    def fields(self):
        """Gets the fields of this RelationshipAPI.  # noqa: E501


        :return: The fields of this RelationshipAPI.  # noqa: E501
        :rtype: CustomFields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this RelationshipAPI.


        :param fields: The fields of this RelationshipAPI.  # noqa: E501
        :type: CustomFields
        """

        self._fields = fields

    @property
    def instance(self):
        """Gets the instance of this RelationshipAPI.  # noqa: E501


        :return: The instance of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this RelationshipAPI.


        :param instance: The instance of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._instance = instance

    @property
    def name(self):
        """Gets the name of this RelationshipAPI.  # noqa: E501


        :return: The name of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RelationshipAPI.


        :param name: The name of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object_type_a(self):
        """Gets the object_type_a of this RelationshipAPI.  # noqa: E501


        :return: The object_type_a of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._object_type_a

    @object_type_a.setter
    def object_type_a(self, object_type_a):
        """Sets the object_type_a of this RelationshipAPI.


        :param object_type_a: The object_type_a of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._object_type_a = object_type_a

    @property
    def object_type_b(self):
        """Gets the object_type_b of this RelationshipAPI.  # noqa: E501


        :return: The object_type_b of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._object_type_b

    @object_type_b.setter
    def object_type_b(self, object_type_b):
        """Sets the object_type_b of this RelationshipAPI.


        :param object_type_b: The object_type_b of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._object_type_b = object_type_b

    @property
    def reliability(self):
        """Gets the reliability of this RelationshipAPI.  # noqa: E501


        :return: The reliability of this RelationshipAPI.  # noqa: E501
        :rtype: Reliability
        """
        return self._reliability

    @reliability.setter
    def reliability(self, reliability):
        """Sets the reliability of this RelationshipAPI.


        :param reliability: The reliability of this RelationshipAPI.  # noqa: E501
        :type: Reliability
        """

        self._reliability = reliability

    @property
    def reverse_name(self):
        """Gets the reverse_name of this RelationshipAPI.  # noqa: E501


        :return: The reverse_name of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._reverse_name

    @reverse_name.setter
    def reverse_name(self, reverse_name):
        """Sets the reverse_name of this RelationshipAPI.


        :param reverse_name: The reverse_name of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._reverse_name = reverse_name

    @property
    def type(self):
        """Gets the type of this RelationshipAPI.  # noqa: E501


        :return: The type of this RelationshipAPI.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelationshipAPI.


        :param type: The type of this RelationshipAPI.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelationshipAPI, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelationshipAPI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
