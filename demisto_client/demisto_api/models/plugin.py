# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.plugin_config import PluginConfig  # noqa: F401,E501
from demisto_client.demisto_api.models.plugin_settings import PluginSettings  # noqa: F401,E501


class Plugin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'PluginConfig',
        'enabled': 'bool',
        'id': 'str',
        'name': 'str',
        'plugin_reference': 'str',
        'settings': 'PluginSettings'
    }

    attribute_map = {
        'config': 'Config',
        'enabled': 'Enabled',
        'id': 'Id',
        'name': 'Name',
        'plugin_reference': 'PluginReference',
        'settings': 'Settings'
    }

    def __init__(self, config=None, enabled=None, id=None, name=None, plugin_reference=None, settings=None):  # noqa: E501
        """Plugin - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._enabled = None
        self._id = None
        self._name = None
        self._plugin_reference = None
        self._settings = None
        self.discriminator = None

        self.config = config
        self.enabled = enabled
        if id is not None:
            self.id = id
        self.name = name
        if plugin_reference is not None:
            self.plugin_reference = plugin_reference
        self.settings = settings

    @property
    def config(self):
        """Gets the config of this Plugin.  # noqa: E501


        :return: The config of this Plugin.  # noqa: E501
        :rtype: PluginConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Plugin.


        :param config: The config of this Plugin.  # noqa: E501
        :type: PluginConfig
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def enabled(self):
        """Gets the enabled of this Plugin.  # noqa: E501

        True if the plugin is running. False if the plugin is not running, only installed.  # noqa: E501

        :return: The enabled of this Plugin.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Plugin.

        True if the plugin is running. False if the plugin is not running, only installed.  # noqa: E501

        :param enabled: The enabled of this Plugin.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this Plugin.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plugin.

        Id  # noqa: E501

        :param id: The id of this Plugin.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Plugin.  # noqa: E501

        name  # noqa: E501

        :return: The name of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plugin.

        name  # noqa: E501

        :param name: The name of this Plugin.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def plugin_reference(self):
        """Gets the plugin_reference of this Plugin.  # noqa: E501

        plugin remote reference used to push/pull the plugin  # noqa: E501

        :return: The plugin_reference of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._plugin_reference

    @plugin_reference.setter
    def plugin_reference(self, plugin_reference):
        """Sets the plugin_reference of this Plugin.

        plugin remote reference used to push/pull the plugin  # noqa: E501

        :param plugin_reference: The plugin_reference of this Plugin.  # noqa: E501
        :type: str
        """

        self._plugin_reference = plugin_reference

    @property
    def settings(self):
        """Gets the settings of this Plugin.  # noqa: E501


        :return: The settings of this Plugin.  # noqa: E501
        :rtype: PluginSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Plugin.


        :param settings: The settings of this Plugin.  # noqa: E501
        :type: PluginSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Plugin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Plugin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
