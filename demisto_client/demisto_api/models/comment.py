# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.comment_type import CommentType  # noqa: F401,E501


class Comment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'content': 'str',
        'created': 'datetime',
        'entry_id': 'str',
        'highlight': 'dict(str, list[str])',
        'id': 'str',
        'modified': 'datetime',
        'numeric_id': 'int',
        'primary_term': 'int',
        'sequence_number': 'int',
        'sort_values': 'list[str]',
        'source': 'str',
        'type': 'CommentType',
        'user': 'str',
        'version': 'int'
    }

    attribute_map = {
        'category': 'category',
        'content': 'content',
        'created': 'created',
        'entry_id': 'entryId',
        'highlight': 'highlight',
        'id': 'id',
        'modified': 'modified',
        'numeric_id': 'numericId',
        'primary_term': 'primaryTerm',
        'sequence_number': 'sequenceNumber',
        'sort_values': 'sortValues',
        'source': 'source',
        'type': 'type',
        'user': 'user',
        'version': 'version'
    }

    def __init__(self, category=None, content=None, created=None, entry_id=None, highlight=None, id=None, modified=None, numeric_id=None, primary_term=None, sequence_number=None, sort_values=None, source=None, type=None, user=None, version=None):  # noqa: E501
        """Comment - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._content = None
        self._created = None
        self._entry_id = None
        self._highlight = None
        self._id = None
        self._modified = None
        self._numeric_id = None
        self._primary_term = None
        self._sequence_number = None
        self._sort_values = None
        self._source = None
        self._type = None
        self._user = None
        self._version = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if content is not None:
            self.content = content
        if created is not None:
            self.created = created
        if entry_id is not None:
            self.entry_id = entry_id
        if highlight is not None:
            self.highlight = highlight
        if id is not None:
            self.id = id
        if modified is not None:
            self.modified = modified
        if numeric_id is not None:
            self.numeric_id = numeric_id
        if primary_term is not None:
            self.primary_term = primary_term
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if sort_values is not None:
            self.sort_values = sort_values
        if source is not None:
            self.source = source
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user
        if version is not None:
            self.version = version

    @property
    def category(self):
        """Gets the category of this Comment.  # noqa: E501


        :return: The category of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Comment.


        :param category: The category of this Comment.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def content(self):
        """Gets the content of this Comment.  # noqa: E501


        :return: The content of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Comment.


        :param content: The content of this Comment.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def created(self):
        """Gets the created of this Comment.  # noqa: E501


        :return: The created of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Comment.


        :param created: The created of this Comment.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def entry_id(self):
        """Gets the entry_id of this Comment.  # noqa: E501


        :return: The entry_id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this Comment.


        :param entry_id: The entry_id of this Comment.  # noqa: E501
        :type: str
        """

        self._entry_id = entry_id

    @property
    def highlight(self):
        """Gets the highlight of this Comment.  # noqa: E501


        :return: The highlight of this Comment.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this Comment.


        :param highlight: The highlight of this Comment.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._highlight = highlight

    @property
    def id(self):
        """Gets the id of this Comment.  # noqa: E501


        :return: The id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this Comment.  # noqa: E501


        :return: The modified of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Comment.


        :param modified: The modified of this Comment.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def numeric_id(self):
        """Gets the numeric_id of this Comment.  # noqa: E501


        :return: The numeric_id of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._numeric_id

    @numeric_id.setter
    def numeric_id(self, numeric_id):
        """Sets the numeric_id of this Comment.


        :param numeric_id: The numeric_id of this Comment.  # noqa: E501
        :type: int
        """

        self._numeric_id = numeric_id

    @property
    def primary_term(self):
        """Gets the primary_term of this Comment.  # noqa: E501


        :return: The primary_term of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._primary_term

    @primary_term.setter
    def primary_term(self, primary_term):
        """Sets the primary_term of this Comment.


        :param primary_term: The primary_term of this Comment.  # noqa: E501
        :type: int
        """

        self._primary_term = primary_term

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Comment.  # noqa: E501


        :return: The sequence_number of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Comment.


        :param sequence_number: The sequence_number of this Comment.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def sort_values(self):
        """Gets the sort_values of this Comment.  # noqa: E501


        :return: The sort_values of this Comment.  # noqa: E501
        :rtype: list[str]
        """
        return self._sort_values

    @sort_values.setter
    def sort_values(self, sort_values):
        """Sets the sort_values of this Comment.


        :param sort_values: The sort_values of this Comment.  # noqa: E501
        :type: list[str]
        """

        self._sort_values = sort_values

    @property
    def source(self):
        """Gets the source of this Comment.  # noqa: E501


        :return: The source of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Comment.


        :param source: The source of this Comment.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this Comment.  # noqa: E501


        :return: The type of this Comment.  # noqa: E501
        :rtype: CommentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Comment.


        :param type: The type of this Comment.  # noqa: E501
        :type: CommentType
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this Comment.  # noqa: E501


        :return: The user of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Comment.


        :param user: The user of this Comment.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def version(self):
        """Gets the version of this Comment.  # noqa: E501


        :return: The version of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Comment.


        :param version: The version of this Comment.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Comment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
