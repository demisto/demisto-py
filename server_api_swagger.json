{
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the public REST API to integrate with the Cortex XSOAR server.\nHTTP request can be sent using any HTTP-client.\n\nFor an example dedicated client take a look at: https://github.com/demisto/demisto-py.\n\nRequests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -\u003e 'Integrations' -\u003e 'API keys'\n\n\nOptimistic Locking and Versioning\\:\n\nWhen using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item).\nIn addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).\n\nAssume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s?\nTo solve this, each data item in Cortex XSOAR has a numeric incremental version.\nIf Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error.\nBob will need to get the latest item and work on it so Alice work will not get lost.\n\nExample request using 'curl'\\:\n\n```\ncurl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: \u003cAPI Key goes here\u003e' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed\n```",
    "title": "Cortex XSOAR API",
    "version": "2.0.0"
  },
  "host": "hostname:443",
  "paths": {
    "/apikeys/revoke/user/{username}": {
      "post": {
        "description": "Revoke API Key for user",
        "produces": [
          "application/octet-stream"
        ],
        "operationId": "revokeUserAPIKey",
        "parameters": [
          {
            "type": "string",
            "description": "The username which the API keys assigned to",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 for success"
          }
        }
      }
    },
    "/automation": {
      "post": {
        "description": "Create or update a given automation.",
        "summary": "Create or update automation",
        "operationId": "saveOrUpdateScript",
        "parameters": [
          {
            "name": "automationScriptFilterWrapper",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/automationScriptFilterWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The saved automation.",
            "schema": {
              "$ref": "#/definitions/automationScriptResult"
            }
          }
        }
      }
    },
    "/automation/copy": {
      "post": {
        "description": "Copy given automation",
        "summary": "Copy automation",
        "operationId": "copyScript",
        "parameters": [
          {
            "name": "automationScriptFilterWrapper",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/automationScriptFilterWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The saved automation.",
            "schema": {
              "$ref": "#/definitions/automationScriptResult"
            }
          }
        }
      }
    },
    "/automation/delete": {
      "post": {
        "description": "Delete a given automation from the system.",
        "summary": "Delete existing automation",
        "operationId": "deleteAutomationScript",
        "parameters": [
          {
            "name": "automationScriptFilterWrapper",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/automationScriptFilterWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "automation deleted"
          }
        }
      }
    },
    "/automation/import": {
      "post": {
        "description": "Import an automation to Cortex XSOAR",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import an automation",
        "operationId": "importScript",
        "parameters": [
          {
            "type": "file",
            "description": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The saved automation",
            "schema": {
              "$ref": "#/definitions/AutomationScript"
            }
          }
        }
      }
    },
    "/automation/search": {
      "post": {
        "description": "Search Automation by filter",
        "summary": "Search Automation (aka scripts)",
        "operationId": "getAutomationScripts",
        "parameters": [
          {
            "name": "automationScriptFilter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/automationScriptFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "automationScriptResult",
            "schema": {
              "$ref": "#/definitions/automationScriptResult"
            }
          }
        }
      }
    },
    "/classifier/import": {
      "post": {
        "description": "Import a classifier to Cortex XSOAR",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a classifier",
        "operationId": "importClassifier",
        "parameters": [
          {
            "type": "file",
            "description": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The saved classifier",
            "schema": {
              "$ref": "#/definitions/InstanceClassifier"
            }
          }
        }
      }
    },
    "/dashboards/import": {
      "post": {
        "description": "Import a dashboard to Cortex XSOAR",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a dashboard",
        "operationId": "importDashboard",
        "parameters": [
          {
            "type": "file",
            "description": "The JSON file of the dashboard to import.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The saved dashboard",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          }
        }
      }
    },
    "/entry": {
      "post": {
        "description": "API to create an entry (markdown format) in existing investigation\nBody example: {\"investigationId\":\"1234\",\"data\":\"entry content…\"}",
        "summary": "Create new entry in existing investigation",
        "operationId": "investigationAddEntryHandler",
        "parameters": [
          {
            "name": "updateEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updateEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entry",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "412": {
            "description": "In case of closed investigation"
          }
        }
      }
    },
    "/entry/artifact/{id}": {
      "get": {
        "description": "Get the entry artifact file",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Get entry artifact",
        "operationId": "getEntryArtifact",
        "parameters": [
          {
            "type": "string",
            "description": "file to fetch (returned from entry export artifact call)",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return the file",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/entry/download/{entryid}": {
      "get": {
        "description": "Download file from Cortex XSOAR by entry ID",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Download file",
        "operationId": "downloadFile",
        "parameters": [
          {
            "type": "string",
            "description": "Entry ID",
            "name": "entryid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return the entry",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/entry/execute/sync": {
      "post": {
        "description": "API to create an entry (markdown format) in existing investigation\nBody example: {\"investigationId\":\"1234\",\"data\":\"entry content…\"}",
        "summary": "Create new entry in existing investigation",
        "operationId": "investigationAddEntriesSync",
        "parameters": [
          {
            "name": "updateEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updateEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of the children entries of the executed entry.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entry"
              }
            }
          },
          "412": {
            "description": "In case of closed investigation"
          }
        }
      }
    },
    "/entry/exportArtifact": {
      "post": {
        "description": "Export an entry artifact",
        "summary": "Export Artifact",
        "operationId": "entryExportArtifact",
        "parameters": [
          {
            "name": "DownloadEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DownloadEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "created file name"
          }
        }
      }
    },
    "/entry/formatted": {
      "post": {
        "description": "API to create a formatted entry (table/json/text/markdown/html) in existing investigation\nBody example: {\"investigationId\":\"1234\",\"format\":\"table/json/text/markdown/html\",\"contents\":\"entry content…\"}",
        "summary": "Create new formatted entry in existing investigation",
        "operationId": "investigationAddFormattedEntryHandler",
        "parameters": [
          {
            "name": "uploadedEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/uploadedEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entry",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        }
      }
    },
    "/entry/note": {
      "post": {
        "description": "API to mark entry as note, can be used also to remove the note\nBody example: {\"id\":1\\@1234\",\"version\":\"-1\",\"investigationId\":\"1234\",\"data\":\"true/false\"}",
        "summary": "Mark entry as note",
        "operationId": "updateEntryNote",
        "parameters": [
          {
            "name": "updateEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updateEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entry",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        }
      }
    },
    "/entry/tags": {
      "post": {
        "description": "API to set entry tags\nBody example: {\"id\":\"1\\@1234\",\"version\":\"-1\",\"investigationId\":\"1234\",\"tags\":[\"tag1\",\"tag2\"]\"}",
        "summary": "Set entry tags",
        "operationId": "updateEntryTagsOp",
        "parameters": [
          {
            "name": "updateEntryTags",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updateEntryTags"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entry",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        }
      }
    },
    "/evidence": {
      "post": {
        "description": "Save an evidence entity\nTo update evidence custom fields you should lowercase them and remove all spaces. For example: Scan IP -\u003e scanip",
        "summary": "Save evidence",
        "operationId": "saveEvidence",
        "parameters": [
          {
            "name": "Evidence",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Evidence"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new / updated Evidence",
            "schema": {
              "$ref": "#/definitions/Evidence"
            }
          }
        }
      }
    },
    "/evidence/delete": {
      "post": {
        "description": "Delete an evidence entity",
        "summary": "delete evidence",
        "operationId": "deleteEvidenceOp",
        "parameters": [
          {
            "name": "deleteEvidence id",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/deleteEvidence"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted evidence ID"
          }
        }
      }
    },
    "/evidence/search": {
      "post": {
        "description": "Search for an evidence entutiy by filter",
        "summary": "Search evidence",
        "operationId": "searchEvidence",
        "parameters": [
          {
            "name": "evidencesFilterWrapper",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/evidencesFilterWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EvidencesSearchResponse",
            "schema": {
              "$ref": "#/definitions/EvidencesSearchResponse"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Check if Cortex XSOAR server is available",
        "summary": "Check if Cortex XSOAR server is available",
        "operationId": "healthHandler",
        "responses": {
          "200": {
            "description": "OK status",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/health/containers": {
      "get": {
        "description": "Gets info on the containers - amount of running, inactive and total containers",
        "summary": "Get health containers",
        "operationId": "getContainers",
        "responses": {
          "200": {
            "description": "Gets info on the containers - amount of running, inactive and total containers",
            "schema": {
              "$ref": "#/definitions/containersInfo"
            }
          }
        }
      }
    },
    "/incident": {
      "post": {
        "description": "Create or update incident according to JSON structure.\nTo update incident custom fields you should lowercase them and remove all spaces. For example: Scan IP -\u003e scanip\nTo get the actual key name you can also go to Cortex XSOAR CLI and run /incident_add and look for the key that you would like to update\n\nUse the 'createInvestigation\\: true' to start the investigation process automatically. (by running a playbook based on incident type.)",
        "summary": "Create single incident",
        "operationId": "createIncident",
        "parameters": [
          {
            "name": "CreateIncidentRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateIncidentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IncidentWrapper",
            "schema": {
              "$ref": "#/definitions/IncidentWrapper"
            }
          }
        }
      }
    },
    "/incident/batch": {
      "post": {
        "description": "Create or update an incidents batch\nTo update incident custom fields you should lowercase them and remove all spaces. For example: Scan IP -\u003e scanip\nTo get the actual key name you can also go to Cortex XSOAR CLI and run /incident_add and look for the key that you would like to update",
        "summary": "Batch create incidents",
        "operationId": "createIncidentsBatch",
        "parameters": [
          {
            "name": "UpdateDataBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateDataBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IncidentSearchResponseWrapper",
            "schema": {
              "$ref": "#/definitions/IncidentSearchResponseWrapper"
            }
          }
        }
      }
    },
    "/incident/batch/exportToCsv": {
      "post": {
        "description": "Exports an incidents batch to CSV file (returns file ID)",
        "summary": "Batch export incidents to csv",
        "operationId": "exportIncidentsToCsvBatch",
        "parameters": [
          {
            "name": "UpdateDataBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateDataBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "csv file name",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/incident/batchClose": {
      "post": {
        "description": "Closes an incidents batch\nTo update incident custom fields you should lowercase them and remove all spaces. For example: Scan IP -\u003e scanip\nTo get the actual key name you can also go to Cortex XSOAR CLI and run /incident_add and look for the key that you would like to update",
        "summary": "Batch close incidents",
        "operationId": "closeIncidentsBatch",
        "parameters": [
          {
            "name": "UpdateDataBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateDataBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IncidentSearchResponseWrapper",
            "schema": {
              "$ref": "#/definitions/IncidentSearchResponseWrapper"
            }
          }
        }
      }
    },
    "/incident/batchDelete": {
      "post": {
        "description": "Deletes an incidents batch",
        "summary": "Batch delete incidents",
        "operationId": "deleteIncidentsBatch",
        "parameters": [
          {
            "name": "UpdateDataBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateDataBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IncidentSearchResponseWrapper",
            "schema": {
              "$ref": "#/definitions/IncidentSearchResponseWrapper"
            }
          }
        }
      }
    },
    "/incident/csv/{id}": {
      "get": {
        "description": "Get an incident CSV file that was exported, by ID",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Get incident as CSV",
        "operationId": "getIncidentAsCsv",
        "parameters": [
          {
            "type": "string",
            "description": "CSV file to fetch (returned from batch export to csv call)",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return Csv file",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/incident/json": {
      "post": {
        "description": "Create single incident from raw JSON, builds incident according to default mapping",
        "summary": "Create incident from JSON",
        "operationId": "createIncidentJson",
        "responses": {
          "200": {
            "description": "IncidentWrapper",
            "schema": {
              "$ref": "#/definitions/IncidentWrapper"
            }
          }
        }
      }
    },
    "/incident/upload/{id}": {
      "post": {
        "description": "Add file attachement to an incidents",
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "incidentFileUpload",
        "parameters": [
          {
            "type": "string",
            "description": "Incident id to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "file name",
            "name": "fileName",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "file comment",
            "name": "fileComment",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "field name to hold the attachment details. If not specified, `attachment` will be used.",
            "name": "field",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "show media file",
            "name": "showMediaFile",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "If set to true will create an investigation. Used for uploading after creating incident.",
            "name": "last",
            "in": "formData"
          },
          {
            "type": "file",
            "description": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "IncidentWrapper",
            "schema": {
              "$ref": "#/definitions/IncidentWrapper"
            }
          }
        }
      }
    },
    "/incidentfield/tags/reset/{id}": {
      "post": {
        "description": "Sets the select values of a specific tags field. The values passed to the route override the existing select\nvalues of the field. To reset the select values pass an empty array.",
        "summary": "Set tags field",
        "operationId": "setTagsField",
        "parameters": [
          {
            "type": "string",
            "description": "The machine name of the field prefixed with the type. For example indicator_tags or incident_dbotmirrortags",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The new select values of the field",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tagsFieldValues"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "empty"
          }
        }
      }
    },
    "/incidentfields/associatedTypes/{type}": {
      "get": {
        "description": "Get all incident fields associated with incident type",
        "summary": "Get all incident fields associated with incident type",
        "operationId": "getIncidentsFieldsByIncidentType",
        "parameters": [
          {
            "type": "string",
            "description": "the name (case sensitive) of the incident type",
            "name": "type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of incident fields associated with the incident type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IncidentField"
              }
            }
          }
        }
      }
    },
    "/incidentfields/import": {
      "post": {
        "description": "Import an incident field to Cortex XSOAR",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import an incident field",
        "operationId": "importIncidentFields",
        "parameters": [
          {
            "type": "file",
            "description": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The saved incident field",
            "schema": {
              "$ref": "#/definitions/incidentFieldsWithErrors"
            }
          }
        }
      }
    },
    "/incidents/search": {
      "post": {
        "description": "This will search incidents across all indices\nYou can filter by multiple options",
        "summary": "Search incidents by filter",
        "operationId": "searchIncidents",
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIncidentsData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "incidentSearchResponse",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Incident"
                  }
                },
                "total": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/incidenttype": {
      "post": {
        "description": "API to create new Incident Type",
        "summary": "Create new Incident Type",
        "operationId": "createOrUpdateIncidentType",
        "parameters": [
          {
            "name": "IncidentType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IncidentType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IncidentType",
            "schema": {
              "$ref": "#/definitions/IncidentType"
            }
          }
        }
      }
    },
    "/incidenttypes/import": {
      "post": {
        "description": "Import an incident type to Cortex XSOAR",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import an incident type",
        "operationId": "importIncidentTypesHandler",
        "parameters": [
          {
            "type": "file",
            "description": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The saved incident type",
            "schema": {
              "$ref": "#/definitions/incidentTypesWithErrors"
            }
          }
        }
      }
    },
    "/indicator/create": {
      "post": {
        "description": "Create an indicator entity\nTo update indicator custom fields you should lowercase them and remove all spaces. For example: Scan IP -\u003e scanip",
        "summary": "Create Indicator",
        "operationId": "indicatorsCreate",
        "parameters": [
          {
            "name": "IocObject",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/indicatorContext"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IocObject",
            "schema": {
              "$ref": "#/definitions/IocObject"
            }
          }
        }
      }
    },
    "/indicator/edit": {
      "post": {
        "description": "Edit an indicator entity\nTo update indicator custom fields you should lowercase them and remove all spaces. For example: Scan IP -\u003e scanip",
        "summary": "Edit Indicator",
        "operationId": "indicatorsEdit",
        "parameters": [
          {
            "name": "IocObject",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IocObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IocObject",
            "schema": {
              "$ref": "#/definitions/IocObject"
            }
          }
        }
      }
    },
    "/indicator/whitelist": {
      "post": {
        "description": "Whitelists or deletes an indicator entity\nIn order to delete an indicator and not whitelist, set doNotWhitelist boolean field to true",
        "summary": "Whitelists or deletes Indicator",
        "operationId": "indicatorWhitelist",
        "parameters": [
          {
            "name": "updateIndicatorReputationData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updateIndicatorReputationData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UpdateResponse",
            "schema": {
              "$ref": "#/definitions/UpdateResponse"
            }
          }
        }
      }
    },
    "/indicators/batch/export/stix": {
      "post": {
        "description": "Exports an indicators batch to STIX file (returns file ID)",
        "summary": "Batch export indicators to STIX",
        "operationId": "exportIndicatorsToStixBatch",
        "parameters": [
          {
            "name": "genericIndicatorUpdateBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/genericIndicatorUpdateBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "STIX file name",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/indicators/batch/exportToCsv": {
      "post": {
        "description": "Exports an indicators batch to CSV file (returns file ID)",
        "summary": "Batch export indicators to csv",
        "operationId": "exportIndicatorsToCsvBatch",
        "parameters": [
          {
            "description": "Required parameters from `genericIndicatorUpdateBatch`: `columns`,\n`filter`. You should also include either `all` or `ids`\n",
            "name": "genericIndicatorUpdateBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/genericIndicatorUpdateBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "csv file name",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/indicators/batchDelete": {
      "post": {
        "description": "Batch whitelist or delete indicators entities\nIn order to delete indicators and not whitelist, set doNotWhitelist boolean field to true",
        "summary": "Batch whitelist or delete indicators",
        "operationId": "deleteIndicatorsBatch",
        "parameters": [
          {
            "name": "genericIndicatorUpdateBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/genericIndicatorUpdateBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UpdateResponse",
            "schema": {
              "$ref": "#/definitions/UpdateResponse"
            }
          }
        }
      }
    },
    "/indicators/csv/{id}": {
      "get": {
        "description": "Get an indicators CSV file that was exported, by ID",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Get indicators as CSV",
        "operationId": "getIndicatorsAsCsv",
        "parameters": [
          {
            "type": "string",
            "description": "CSV file to fetch (returned from batch export to csv call)",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return Csv file",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/indicators/feed/json": {
      "post": {
        "description": "Create indicators from raw JSON (similar to ingesting from a feed). Builds indicators according to the specified feed classifier,\nor uses the default one if not specified.\nIndicator properties (all optional except for value): **value** (string, required) | **type** (string) | **score** (number, 0-3,\ndefault `0`, where `0` means None, `1` Good, `2` Suspicious, and `3` Bad) | **sourceBrand** (string, default `\"External\"`) | **sourceInstance**\n(string, default `\"External\"`) | **reliability** (string, one of `\"A - Completely reliable\"`, `\"B - Usually reliable\"`, `\"C - Fairly\nreliable\"`, `\"D - Not usually reliable\"`, `\"E - Unreliable\"`, `\"F - Reliability cannot be judged\"`) | **expirationPolicy** (string,\none of `\"never\"`, `\"interval\"`, `\"indicatorType\"`) | **expirationInterval** (number, in minutes)",
        "summary": "Create feed indicators from JSON",
        "operationId": "createFeedIndicatorsJson",
        "parameters": [
          {
            "name": "FeedIndicatorsRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeedIndicatorsRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Indicators created"
          }
        }
      }
    },
    "/indicators/search": {
      "post": {
        "description": "Search indicators by filter",
        "summary": "Search indicators",
        "operationId": "indicatorsSearch",
        "parameters": [
          {
            "name": "IndicatorFilter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IndicatorFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "indicatorResult",
            "schema": {
              "$ref": "#/definitions/IndicatorResult"
            }
          }
        }
      }
    },
    "/indicators/stix/v2/{id}": {
      "get": {
        "description": "Get an indicators STIX V2 file that was exported, by ID",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Get indicators as STIX V2",
        "operationId": "getIndicatorsAsSTIX",
        "parameters": [
          {
            "type": "string",
            "description": "STIX V2 file to fetch (returned from batch export to STIX call)",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return STIX V2 file",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/indicators/timeline/delete": {
      "post": {
        "description": "Delete indicators timeline by filter",
        "summary": "Delete indicators timeline",
        "operationId": "indicatorsTimelineDelete",
        "parameters": [
          {
            "name": "IndicatorFilter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IndicatorFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IndicatorEditBulkResponse",
            "schema": {
              "$ref": "#/definitions/IndicatorEditBulkResponse"
            }
          }
        }
      }
    },
    "/indicators/upload": {
      "post": {
        "description": "Create indicators from a file",
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Create indicators",
        "operationId": "indicatorsCreateBatch",
        "parameters": [
          {
            "type": "string",
            "description": "file name",
            "name": "fileName",
            "in": "formData"
          },
          {
            "type": "file",
            "description": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "IocObjects",
            "schema": {
              "$ref": "#/definitions/IocObjects"
            }
          }
        }
      }
    },
    "/indicators/whitelist/update": {
      "post": {
        "description": "Create or update excluded indicators list",
        "summary": "Create whitelisted",
        "operationId": "createOrUpdateWhitelisted",
        "parameters": [
          {
            "name": "WhitelistedIndicator",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WhitelistedIndicator"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WhitelistedIndicator",
            "schema": {
              "$ref": "#/definitions/WhitelistedIndicator"
            }
          }
        }
      }
    },
    "/inv-playbook/task/add/{investigationId}": {
      "post": {
        "description": "Add an ad-hoc task to a running playbook",
        "summary": "Add ad-hoc task",
        "operationId": "addAdHocTask",
        "parameters": [
          {
            "name": "InvPlaybookTaskData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InvPlaybookTaskData"
            }
          },
          {
            "type": "string",
            "description": "investigation ID",
            "name": "investigationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/inv-playbook/task/assign": {
      "post": {
        "description": "Assign a task to an owner",
        "summary": "Assign task",
        "operationId": "taskAssign",
        "parameters": [
          {
            "name": "invPlaybookAssignee",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/invPlaybookAssignee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/inv-playbook/task/complete": {
      "post": {
        "description": "Complete a task with a file attachment\nDeprecated - use \"/v2/inv-playbook/task/complete\"",
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "[Deprecated] Complete a task",
        "operationId": "completeTask",
        "parameters": [
          {
            "type": "string",
            "description": "investigation ID",
            "name": "investigationId",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "file name",
            "name": "fileName",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "file comment",
            "name": "fileComment",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Task Id",
            "name": "taskId",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "task input",
            "name": "taskInput",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Version",
            "name": "version",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/inv-playbook/task/complete/simple": {
      "post": {
        "description": "Complete a task without a file attachment",
        "summary": "Complete task simple (no file)",
        "operationId": "simpleCompleteTask",
        "parameters": [
          {
            "name": "invTaskInfo",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/invTaskInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/inv-playbook/task/delete/{investigationId}/{invPBTaskId}": {
      "post": {
        "description": "Delete an ad-hoc task from a running playbook",
        "summary": "Delete ad-hoc task",
        "operationId": "deleteAdHocTask",
        "parameters": [
          {
            "type": "string",
            "description": "investigation ID",
            "name": "investigationId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ad-hoc task ID",
            "name": "invPBTaskId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/inv-playbook/task/due": {
      "post": {
        "description": "Set the task due date",
        "summary": "Set task due date",
        "operationId": "taskSetDue",
        "parameters": [
          {
            "name": "invPlaybookDue",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/invPlaybookDue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/inv-playbook/task/edit/{investigationId}": {
      "post": {
        "description": "Edit an ad-hoc task in a running playbook",
        "summary": "Edit ad-hoc task",
        "operationId": "editAdHocTask",
        "parameters": [
          {
            "name": "InvPlaybookTaskData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InvPlaybookTaskData"
            }
          },
          {
            "type": "string",
            "description": "investigation ID",
            "name": "investigationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/inv-playbook/task/note/add": {
      "post": {
        "description": "Add comment to a task",
        "summary": "Task add comment",
        "operationId": "taskAddComment",
        "parameters": [
          {
            "name": "invTaskInfo",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/invTaskInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/inv-playbook/task/uncomplete": {
      "post": {
        "description": "Reopen a closed task and change the status to uncomplete",
        "summary": "Un complete a task",
        "operationId": "taskUnComplete",
        "parameters": [
          {
            "name": "invTaskInfo",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/invTaskInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/investigations/search": {
      "post": {
        "description": "This will search investigations across all indices\nYou can filter by multiple options",
        "summary": "Search investigations by filter",
        "operationId": "searchInvestigations",
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SearchInvestigationsData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "investigationSearchResponse",
            "schema": {
              "$ref": "#/definitions/InvestigationSearchResponse"
            }
          }
        }
      }
    },
    "/logout/everyone": {
      "post": {
        "description": "Sign out all open users sessions",
        "summary": "Sign out all open users sessions",
        "operationId": "logoutEveryoneHandler",
        "responses": {
          "204": {
            "description": "no content",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/logout/myself": {
      "post": {
        "description": "Sign out all my open sessions",
        "summary": "Sign out all my open sessions",
        "operationId": "logoutMyselfHandler",
        "responses": {
          "204": {
            "description": "no content",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/logout/myself/other": {
      "post": {
        "description": "Sign out all my other open sessions",
        "summary": "Sign out all my other open sessions",
        "operationId": "logoutMyselfOtherSessionsHandler",
        "responses": {
          "204": {
            "description": "no content",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/logout/user/{username}": {
      "post": {
        "description": "Sign out all sessions of the provided username",
        "summary": "Sign out all sessions of the provided username",
        "operationId": "logoutUserSessionsHandler",
        "parameters": [
          {
            "type": "string",
            "description": "Username to logout",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "no content",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/playbook/save/yaml": {
      "post": {
        "description": "Import and override playbook in Cortex XSOAR",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import and override playbook",
        "operationId": "overridePlaybookYaml",
        "parameters": [
          {
            "type": "file",
            "description": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The saved playbook",
            "schema": {
              "$ref": "#/definitions/playbookWithWarnings"
            }
          }
        }
      }
    },
    "/report/{id}/latest": {
      "get": {
        "description": "Get the latest report by its ID",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Get latest report by ID",
        "operationId": "downloadLatestReport",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the report to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return a report file",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/report/{id}/{requestId}/execute": {
      "post": {
        "description": "Execute a new report",
        "summary": "Execute report",
        "operationId": "executeReport",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the report to get",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID to register the request under",
            "name": "requestId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request registered"
          }
        }
      }
    },
    "/reports": {
      "get": {
        "description": "Get all of the reports",
        "summary": "Get all reports",
        "operationId": "getAllReports",
        "responses": {
          "200": {
            "description": "Return array of reports",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Report"
              }
            }
          }
        }
      }
    },
    "/reports/{id}": {
      "get": {
        "description": "Get a report by its ID",
        "summary": "Get report by ID",
        "operationId": "getReportByID",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the report to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return a report",
            "schema": {
              "$ref": "#/definitions/Report"
            }
          }
        }
      }
    },
    "/settings/audits": {
      "post": {
        "description": "Get audits by filter",
        "summary": "Get Audits",
        "operationId": "getAudits",
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GenericStringDateFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "auditResult",
            "schema": {
              "$ref": "#/definitions/auditResult"
            }
          }
        }
      }
    },
    "/settings/docker-images": {
      "get": {
        "description": "Get list of all available docker image names",
        "summary": "Get Docker Images",
        "operationId": "getDockerImages",
        "responses": {
          "200": {
            "description": "DockerImagesResult",
            "schema": {
              "$ref": "#/definitions/DockerImagesResult"
            }
          }
        }
      },
      "post": {
        "description": "Create an image with a given list of dependencies",
        "summary": "Create Image",
        "operationId": "createDockerImage",
        "parameters": [
          {
            "name": "NewDockerImage",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewDockerImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NewDockerImageResult",
            "schema": {
              "$ref": "#/definitions/NewDockerImageResult"
            }
          }
        }
      }
    },
    "/settings/integration-conf/upload": {
      "post": {
        "description": "Upload an integration to Cortex XSOAR",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Upload an integration",
        "operationId": "integrationUpload",
        "parameters": [
          {
            "type": "file",
            "description": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The saved configuration",
            "schema": {
              "$ref": "#/definitions/ModuleConfiguration"
            }
          }
        }
      }
    },
    "/statistics/application/roi": {
      "delete": {
        "description": "Reset ROI widget",
        "summary": "Reset ROI widget",
        "operationId": "resetROIWidget",
        "responses": {
          "200": {
            "description": "ROI widget has been reset"
          }
        }
      }
    },
    "/statistics/dashboards/query": {
      "post": {
        "description": "Get a given dashboard statistics result.\nDeprecated - use \"/v2/statistics/dashboards/query",
        "produces": [
          "application/json"
        ],
        "summary": "[Deprecated] Get Dashboard Statistics",
        "operationId": "GetStatsForDashboardOldFormat",
        "responses": {
          "200": {
            "description": "Return an array of stats results for each widget cell in dashboard.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StatsQueryResponse"
              }
            }
          }
        }
      }
    },
    "/statistics/widgets/query": {
      "post": {
        "description": "Get a given widget object statistics result.\nNote: This route has many return types based on the widget type and data. Each 200X represent a 200 OK request of specific widget type and data\n\nDeprecated - use \"/v2/statistics/widgets/query",
        "produces": [
          "application/json"
        ],
        "summary": "[Deprecated] Get Widget Statistics",
        "operationId": "GetStatsForWidgetOldFormat",
        "responses": {
          "200": {
            "description": "Response differ according to the widget type\n  -  Incident data type of a \"table\" or \"list\" widget returns incidentSearchResponse\n     total:\n       type: integer\n       data:\n         type: array\n      items:\n        \"$ref\": \"#/definitions/Incident\"\n    - Indicators data type of a \"table\" or \"list\" widget returns IoCsResponse\n      total:\n        type: integer\n      data:\n        type: array\n        items:\n          \"$ref\": \"#/definitions/IocObject\"\n    - Number widget returns a simple number\n      type: integer\n    - Trend widget returns a trend object\n      \"$ref\": \"#/definitions/StatsTrendsResponse\"\n    - Text widget returns a text object, describing the final text and the placeholders values.\n      \"$ref\": \"#/definitions/StatsTextResponse\"\n    - A chart data array by groups. When requesting a date, the key is the date string, according to the specified time frame. Empty groups (dates) are also returned.\n      type: array\n      items:\n        \"$ref\": \"#/definitions/Group\"",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/v2/inv-playbook/task/complete": {
      "post": {
        "description": "Complete a task with command and multiple file attachments",
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Complete a task",
        "operationId": "completeTaskV2",
        "parameters": [
          {
            "type": "string",
            "description": "investigation ID",
            "name": "investigationId",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Task Id",
            "name": "taskId",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Task comment or command to run",
            "name": "taskComment",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Task input",
            "name": "taskInput",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Version",
            "name": "version",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "Files to attach to the task",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "file names separated by %###% (only if files provided)",
            "name": "fileNames",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "file comment separated by %###% (only if files provided)",
            "name": "fileComments",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/v2/inv-playbook/task/form/submit": {
      "post": {
        "description": "Submit a data collection task with given answers and multiple file attachments",
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Complete a task",
        "operationId": "submitTaskForm",
        "parameters": [
          {
            "type": "string",
            "description": "investigation ID",
            "name": "investigationId",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Task Id",
            "name": "taskId",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "the answers to the task form. Answers are keyed by numerical question id",
            "name": "answers",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "Files to attach to the task",
            "name": "file",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "InvestigationPlaybook",
            "schema": {
              "$ref": "#/definitions/InvestigationPlaybook"
            }
          }
        }
      }
    },
    "/v2/statistics/dashboards/query": {
      "post": {
        "description": "Get a given dashboard statistics result.",
        "produces": [
          "application/json"
        ],
        "summary": "Get Dashboard Statistics",
        "operationId": "GetStatsForDashboard",
        "responses": {
          "200": {
            "description": "Return an array of stats results for each widget cell in dashboard.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StatsQueryResponse"
              }
            }
          }
        }
      }
    },
    "/v2/statistics/widgets/query": {
      "post": {
        "description": "Get a given widget object statistics result.\nNote: This route has many return types based on the widget type and data. Each 200X represent a 200 OK request of specific widget type and data",
        "produces": [
          "application/json"
        ],
        "summary": "Get Widget Statistics",
        "operationId": "GetStatsForWidget",
        "responses": {
          "200": {
            "description": "Response differ according to the widget type\n  -  Incident data type of a \"table\" or \"list\" widget returns incidentSearchResponse\n     total:\n       type: integer\n       data:\n         type: array\n      items:\n        \"$ref\": \"#/definitions/Incident\"\n    - Indicators data type of a \"table\" or \"list\" widget returns IoCsResponse\n      total:\n        type: integer\n      data:\n        type: array\n        items:\n          \"$ref\": \"#/definitions/IocObject\"\n    - Number widget returns a simple number\n      type: integer\n    - Trend widget returns a trend object\n      \"$ref\": \"#/definitions/StatsTrendsResponse\"\n    - Text widget returns a text object, describing the final text and the placeholders values.\n      \"$ref\": \"#/definitions/StatsTextResponse\"\n    - Line chart widget or Column chart widget returns StatsResponseWithReferenceLine\n      \"$ref\": \"#/definitions/StatsResponseWithReferenceLine\"\n    - A chart data array by groups. When requesting a date, the key is the date string, according to the specified time frame. Empty groups (dates) are also returned.\n      type: array\n      items:\n        \"$ref\": \"#/definitions/Group\"",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/widgets": {
      "get": {
        "description": "Get all widgets",
        "produces": [
          "application/json"
        ],
        "operationId": "getAllWidgets",
        "responses": {
          "200": {
            "description": "Return all the widgets in the system.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Widget"
              }
            }
          }
        }
      },
      "post": {
        "description": "Add or update a given widget based on Id.",
        "summary": "Add or update a widget",
        "operationId": "saveWidget",
        "parameters": [
          {
            "name": "widget",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The saved widget newest version.",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          }
        }
      }
    },
    "/widgets/import": {
      "post": {
        "description": "Import a widget to the system, ignoring ID or version, used to import new widgets.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a widget",
        "operationId": "importWidget",
        "parameters": [
          {
            "type": "file",
            "description": "The JSON file of the widget to import.",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The saved widget",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          }
        }
      }
    },
    "/widgets/{id}": {
      "get": {
        "description": "Get a widget object by a given ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Get widget by ID",
        "operationId": "getWidget",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of widget to get.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return the widget if found.",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          }
        }
      },
      "delete": {
        "description": "Remove a given widget Id from the system.",
        "summary": "Remove existing widget",
        "operationId": "deleteWidget",
        "parameters": [
          {
            "type": "string",
            "description": "Widget id to remove (returned from widget save or widgets get)",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "widget deleted"
          }
        }
      }
    },
    "/workers/status": {
      "get": {
        "description": "Get workers status",
        "summary": "Get workers status",
        "operationId": "workersStatusHandler",
        "responses": {
          "200": {
            "description": "Workers status",
            "schema": {
              "$ref": "#/definitions/Info"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdvanceArg": {
      "description": "Simple: plain text such as \"hello\" (constant) or ${File.ID} (DT expression)\nComplex: struct with all info that is necessary to compute argument value from context (Root, Filters, Accessor \u0026 Transformers)",
      "type": "object",
      "title": "AdvanceArg - advance argument can be one of the following:",
      "properties": {
        "complex": {
          "$ref": "#/definitions/ComplexArg"
        },
        "simple": {
          "type": "string",
          "x-go-name": "Simple"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ArgAtomicFilter": {
      "description": "ArgAtomicFilter - operator with two sides that return true/false",
      "type": "object",
      "properties": {
        "ignoreCase": {
          "type": "boolean",
          "x-go-name": "IgnoreCase"
        },
        "left": {
          "$ref": "#/definitions/OperatorArgument"
        },
        "operator": {
          "$ref": "#/definitions/FilterOperatorID"
        },
        "right": {
          "$ref": "#/definitions/OperatorArgument"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ArgFilter": {
      "description": "ArgFilter - represent a slice of atomic filters with OR condition between them (e.i. - atomic1 OR atomic2 OR ...)",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ArgAtomicFilter"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ArgTransformer": {
      "type": "object",
      "title": "ArgTransformer ...",
      "properties": {
        "args": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/OperatorArgument"
          },
          "x-go-name": "Args"
        },
        "operator": {
          "$ref": "#/definitions/TransformerOperatorID"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Argument": {
      "description": "Argument to a module command",
      "type": "object",
      "properties": {
        "auto": {
          "type": "string",
          "x-go-name": "Auto"
        },
        "default": {
          "type": "boolean",
          "x-go-name": "Default"
        },
        "defaultValue": {
          "type": "string",
          "x-go-name": "DefaultValue"
        },
        "deprecated": {
          "type": "boolean",
          "x-go-name": "Deprecated"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "isArray": {
          "type": "boolean",
          "x-go-name": "IsArray"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "predefined": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Predefined"
        },
        "required": {
          "type": "boolean",
          "x-go-name": "Required"
        },
        "secret": {
          "type": "boolean",
          "x-go-name": "Secret"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ArrayPositions": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint64"
      },
      "x-go-package": "github.com/blevesearch/bleve/v2/search"
    },
    "Attachment": {
      "type": "object",
      "title": "Attachment ...",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "showMediaFile": {
          "type": "boolean",
          "x-go-name": "ShowMediaFile"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Audit": {
      "description": "Audit holds the auditing details. This includes all common fields, the action in a string blob and the user who\nperformed the action in a user struct.",
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Action"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "identifier": {
          "type": "string",
          "x-go-name": "Identifier"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "object": {
          "type": "string",
          "x-go-name": "Object"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "AuthenticateOKBody": {
      "description": "AuthenticateOKBody authenticate o k body",
      "type": "object",
      "required": [
        "IdentityToken",
        "Status"
      ],
      "properties": {
        "IdentityToken": {
          "description": "An opaque token used to authenticate a user after a successful login",
          "type": "string"
        },
        "Status": {
          "description": "The status of the authentication",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/registry"
    },
    "AutomationScript": {
      "description": "AutomationScript represents a script that will run on  the system",
      "type": "object",
      "properties": {
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Argument"
          },
          "x-go-name": "Args"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Comment"
        },
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "contextKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ContextKeys"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "dependsOn": {
          "description": "This fields indicates which commands this script depends on",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "DependsOn"
        },
        "deprecated": {
          "type": "boolean",
          "x-go-name": "Deprecated"
        },
        "detached": {
          "type": "boolean",
          "x-go-name": "Detached"
        },
        "dockerImage": {
          "type": "string",
          "x-go-name": "DockerImage"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "hidden": {
          "type": "boolean",
          "x-go-name": "Hidden"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "important": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Important"
          },
          "x-go-name": "Important"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Output"
          },
          "x-go-name": "Outputs"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "polling": {
          "type": "boolean",
          "x-go-name": "Polling"
        },
        "prevName": {
          "type": "string",
          "x-go-name": "PrevName"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "private": {
          "type": "boolean",
          "x-go-name": "Private"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "pswd": {
          "type": "string",
          "x-go-name": "Password"
        },
        "rawTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RawTags"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "runAs": {
          "type": "string",
          "x-go-name": "RunAs"
        },
        "runOnce": {
          "type": "boolean",
          "x-go-name": "RunOnce"
        },
        "script": {
          "type": "string",
          "x-go-name": "Script"
        },
        "scriptTarget": {
          "$ref": "#/definitions/ScriptTarget"
        },
        "searchableName": {
          "type": "string",
          "x-go-name": "DoNotUseName"
        },
        "sensitive": {
          "type": "boolean",
          "x-go-name": "Sensitive"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "sourceScripID": {
          "type": "string",
          "x-go-name": "SourceScripID"
        },
        "subtype": {
          "$ref": "#/definitions/ScriptSubType"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "timeout": {
          "$ref": "#/definitions/Duration"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "type": {
          "$ref": "#/definitions/ScriptType"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "visualScript": {
          "type": "string",
          "x-go-name": "VisualScript"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "BaseFilter": {
      "description": "BaseFilter provides common fields used by most filters such as paging, sizing and sorting"
    },
    "Bucket": {
      "type": "object",
      "title": "Bucket - represents a specific condition term for merging groups into a custom group.",
      "properties": {
        "field": {
          "type": "string",
          "x-go-name": "Field"
        },
        "operator": {
          "type": "string",
          "x-go-name": "Operator"
        },
        "right": {
          "type": "string",
          "x-go-name": "RHS"
        },
        "type": {
          "$ref": "#/definitions/OperatorType"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Buckets": {
      "type": "array",
      "title": "Buckets - Array of conditional buckets, related by 'OR'",
      "items": {
        "$ref": "#/definitions/Bucket"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Command": {
      "description": "Command supported by a module",
      "type": "object",
      "properties": {
        "arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Argument"
          },
          "x-go-name": "Arguments"
        },
        "cartesian": {
          "type": "boolean",
          "x-go-name": "Cartesian"
        },
        "deprecated": {
          "type": "boolean",
          "x-go-name": "Deprecated"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "docsHidden": {
          "type": "boolean",
          "x-go-name": "DocsHidden"
        },
        "execution": {
          "type": "boolean",
          "x-go-name": "Execution"
        },
        "hidden": {
          "type": "boolean",
          "x-go-name": "Hidden"
        },
        "important": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Important"
          },
          "x-go-name": "Important"
        },
        "indicatorAction": {
          "type": "boolean",
          "x-go-name": "IndicatorAction"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Output"
          },
          "x-go-name": "Outputs"
        },
        "permitted": {
          "type": "boolean",
          "x-go-name": "Permitted"
        },
        "polling": {
          "type": "boolean",
          "x-go-name": "Polling"
        },
        "sensitive": {
          "type": "boolean",
          "x-go-name": "Sensitive"
        },
        "timeout": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timeout"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Comment": {
      "type": "object",
      "title": "Comment ...",
      "properties": {
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "entryId": {
          "type": "string",
          "x-go-name": "EntryID"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "type": {
          "$ref": "#/definitions/CommentType"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "CommentType": {
      "type": "string",
      "title": "CommentType - comment type: regular comment, time-line, etc...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "CommentUpdate": {
      "type": "object",
      "title": "CommentUpdate ...",
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "indicatorId": {
          "type": "string",
          "x-go-name": "IndicatorID"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "Comments": {
      "type": "array",
      "title": "Comments ...",
      "items": {
        "$ref": "#/definitions/Comment"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "CommentsFields": {
      "type": "object",
      "title": "CommentsFields ...",
      "properties": {
        "comments": {
          "$ref": "#/definitions/Comments"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "CommonFields": {
      "description": "CommonFields holds the common fields to all entities",
      "type": "object",
      "properties": {
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "CommonUpdateBatch": {
      "type": "object",
      "title": "CommonUpdateBatch ...",
      "properties": {
        "all": {
          "type": "boolean",
          "x-go-name": "All"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Data"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IDs"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "ComplexArg": {
      "description": "ComplexArg - all info that is necessary to compute argument value from context\nRoot - the root slice (or object) from to work against\nFilters - a slice of filters to apply to the root object, one after another (e.i. with AND condition between each one)\nAccessor - the key to access to each result after filter\nTransformers - a slice to transformers to apply on the result of the accessed key from each result\ne.g. if user want to take from context all File.DisplayName where File.Extension is 'EXE', and the result in uppercase than:\nRoot: is \"File\"\nFilters: will hold the \"File.DisplayName where File.Extension is 'EXE'\" query\nAccessor: is \"DisplayName\"\nTransformers: will hold the uppercase transformation",
      "type": "object",
      "properties": {
        "accessor": {
          "type": "string",
          "x-go-name": "Accessor"
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgFilter"
          },
          "x-go-name": "Filters"
        },
        "root": {
          "type": "string",
          "x-go-name": "Root"
        },
        "transformers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgTransformer"
          },
          "x-go-name": "Transformers"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ConfigDataType": {
      "description": "ConfigDataType holds the type of a configuration field or command argument",
      "type": "number",
      "format": "double",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ConfigField": {
      "description": "ConfigField holds a configuration field",
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string",
          "x-go-name": "DefaultValue"
        },
        "display": {
          "type": "string",
          "x-go-name": "Display"
        },
        "displayPassword": {
          "type": "string",
          "x-go-name": "DisplayPassword"
        },
        "hidden": {
          "type": "boolean",
          "x-go-name": "Hidden"
        },
        "hiddenPassword": {
          "type": "boolean",
          "x-go-name": "HiddenPassword"
        },
        "hiddenUsername": {
          "type": "boolean",
          "x-go-name": "HiddenUsername"
        },
        "info": {
          "type": "string",
          "x-go-name": "AdditionalInfo"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Options"
        },
        "required": {
          "type": "boolean",
          "x-go-name": "Required"
        },
        "type": {
          "$ref": "#/definitions/ConfigDataType"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ContainerChangeResponseItem": {
      "description": "ContainerChangeResponseItem change item in response to ContainerChanges operation",
      "type": "object",
      "required": [
        "Kind",
        "Path"
      ],
      "properties": {
        "Kind": {
          "description": "Kind of change",
          "type": "integer",
          "format": "uint8"
        },
        "Path": {
          "description": "Path to file that has changed",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerCreateCreatedBody": {
      "description": "ContainerCreateCreatedBody OK response to ContainerCreate operation",
      "type": "object",
      "required": [
        "Id",
        "Warnings"
      ],
      "properties": {
        "Id": {
          "description": "The ID of the created container",
          "type": "string",
          "x-go-name": "ID"
        },
        "Warnings": {
          "description": "Warnings encountered when creating the container",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerTopOKBody": {
      "description": "ContainerTopOKBody OK response to ContainerTop operation",
      "type": "object",
      "required": [
        "Processes",
        "Titles"
      ],
      "properties": {
        "Processes": {
          "description": "Each process running in the container, where each is process\nis an array of values corresponding to the titles.",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "Titles": {
          "description": "The ps column titles",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerUpdateOKBody": {
      "description": "ContainerUpdateOKBody OK response to ContainerUpdate operation",
      "type": "object",
      "required": [
        "Warnings"
      ],
      "properties": {
        "Warnings": {
          "description": "warnings",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerWaitOKBody": {
      "description": "ContainerWaitOKBody OK response to ContainerWait operation",
      "type": "object",
      "required": [
        "Error",
        "StatusCode"
      ],
      "properties": {
        "Error": {
          "$ref": "#/definitions/ContainerWaitOKBodyError"
        },
        "StatusCode": {
          "description": "Exit code of the container",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerWaitOKBodyError": {
      "description": "ContainerWaitOKBodyError container waiting error, if any",
      "type": "object",
      "properties": {
        "Message": {
          "description": "Details of an error",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContentItemExportableFields": {
      "type": "object",
      "title": "ContentItemExportableFields holds ContentItemExportableFields fields.",
      "properties": {
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ContentItemFields": {
      "description": "ContentItemFields holds ContentItem fields",
      "type": "object",
      "properties": {
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ContentItemVersionedFields": {
      "type": "object",
      "title": "ContentItemVersionedFields holds ContentItemVersioned fields.",
      "properties": {
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "CreateIncidentRequest": {
      "description": "CreateIncidentRequest is an extension for Incident entity, with additional field of changed-status for the web client",
      "type": "object",
      "properties": {
        "ShardID": {
          "type": "integer",
          "format": "int64"
        },
        "account": {
          "description": "Account holds the tenant name so that slicing and dicing on the master can leverage bleve",
          "type": "string",
          "x-go-name": "Account"
        },
        "activated": {
          "description": "When was this activated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Activated"
        },
        "activatingingUserId": {
          "description": "The user that activated this investigation",
          "type": "string",
          "x-go-name": "ActivatingUserID"
        },
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "autime": {
          "description": "AlmostUniqueTime is an attempt to have a unique sortable ID for an incident",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AlmostUniqueTime"
        },
        "canvases": {
          "description": "Canvases of the incident",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Canvases"
        },
        "category": {
          "description": "Category",
          "type": "string",
          "x-go-name": "Category"
        },
        "closeNotes": {
          "description": "Notes for closing the incident",
          "type": "string",
          "x-go-name": "CloseNotes"
        },
        "closeReason": {
          "description": "The reason for closing the incident (select from existing predefined values)",
          "type": "string",
          "x-go-name": "ArchiveReason"
        },
        "closed": {
          "description": "When was this closed",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Closed"
        },
        "closingUserId": {
          "description": "The user ID that closed this investigation",
          "type": "string",
          "x-go-name": "ClosingUserID"
        },
        "createInvestigation": {
          "type": "boolean",
          "x-go-name": "CreateInvestigation"
        },
        "created": {
          "description": "When was this created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "dbotCurrentDirtyFields": {
          "description": "For mirroring, manage a list of current dirty fields so that we can send delta to outgoing integration",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DBotCurrentDirtyFields"
        },
        "dbotDirtyFields": {
          "description": "For mirroring, manage a list of dirty fields to not override them from the source of the incident",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DBotDirtyFields"
        },
        "dbotMirrorDirection": {
          "description": "DBotMirrorDirection of how to mirror the incident (in/out/both)",
          "type": "string",
          "x-go-name": "DBotMirrorDirection"
        },
        "dbotMirrorId": {
          "description": "DBotMirrorID of a remote system we are syncing with",
          "type": "string",
          "x-go-name": "DBotMirrorID"
        },
        "dbotMirrorInstance": {
          "description": "DBotMirrorInstance name of a mirror integration instance",
          "type": "string",
          "x-go-name": "DBotMirrorInstance"
        },
        "dbotMirrorLastSync": {
          "description": "The last time we synced this incident even if we did not update anything",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DBotMirrorLastSync"
        },
        "dbotMirrorTags": {
          "description": "The entry tags I want to sync to remote system",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DBotMirrorEntryTags"
        },
        "details": {
          "description": "The details of the incident - reason, etc.",
          "type": "string",
          "x-go-name": "Details"
        },
        "droppedCount": {
          "description": "DroppedCount ...",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DroppedCount"
        },
        "dueDate": {
          "description": "SLA",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DueDate"
        },
        "feedBased": {
          "description": "If this incident was triggered by a feed job",
          "type": "boolean",
          "x-go-name": "FeedBased"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "investigationId": {
          "description": "Investigation that was opened as a result of the incoming event",
          "type": "string",
          "x-go-name": "Investigation"
        },
        "isDebug": {
          "description": "IsDebug ...",
          "type": "boolean",
          "x-go-name": "IsDebug"
        },
        "isPlayground": {
          "description": "IsPlayGround",
          "type": "boolean",
          "x-go-name": "IsPlayGround"
        },
        "labels": {
          "description": "Labels related to incident - each label is composed of a type and value",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "x-go-name": "Labels"
        },
        "lastJobRunTime": {
          "description": "If this incident was triggered by a job, this would be the time the **previous** job started",
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastJobRunTime"
        },
        "lastOpen": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastOpen"
        },
        "linkedCount": {
          "description": "LinkedCount ...",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LinkedCount"
        },
        "linkedIncidents": {
          "description": "LinkedIncidents incidents that were marked as linked by user",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "LinkedIncidents"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "description": "Incident Name - given by user",
          "type": "string",
          "x-go-name": "Name"
        },
        "notifyTime": {
          "description": "Incdicates when last this field was changed with a value that supposed to send a notification",
          "type": "string",
          "format": "date-time",
          "x-go-name": "NotifyTime"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "occurred": {
          "description": "When this incident has really occurred",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Occurred"
        },
        "openDuration": {
          "description": "Duration incident was open",
          "type": "integer",
          "format": "int64",
          "x-go-name": "OpenDuration"
        },
        "owner": {
          "description": "The user who owns this incident",
          "type": "string",
          "x-go-name": "OwnerID"
        },
        "parent": {
          "description": "Parent",
          "type": "string",
          "x-go-name": "Parent"
        },
        "phase": {
          "description": "Phase",
          "type": "string",
          "x-go-name": "Phase"
        },
        "playbookId": {
          "description": "The associated playbook for this incident",
          "type": "string",
          "x-go-name": "PlaybookID"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "rawCategory": {
          "type": "string",
          "x-go-name": "RawCategory"
        },
        "rawCloseReason": {
          "description": "The reason for closing the incident (select from existing predefined values)",
          "type": "string",
          "x-go-name": "RawArchiveReason"
        },
        "rawJSON": {
          "type": "string",
          "x-go-name": "RawJSONData"
        },
        "rawName": {
          "description": "Incident RawName",
          "type": "string",
          "x-go-name": "RawName"
        },
        "rawPhase": {
          "description": "RawPhase",
          "type": "string",
          "x-go-name": "RawPhase"
        },
        "rawType": {
          "description": "Incident raw type",
          "type": "string",
          "x-go-name": "RawType"
        },
        "reason": {
          "description": "The reason for the resolve",
          "type": "string",
          "x-go-name": "Reason"
        },
        "reminder": {
          "description": "When if at all to send a reminder",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Reminder"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "runStatus": {
          "$ref": "#/definitions/RunStatus"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "severity": {
          "$ref": "#/definitions/Severity"
        },
        "sla": {
          "$ref": "#/definitions/SLAState"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "sourceBrand": {
          "description": "SourceBrand ...",
          "type": "string",
          "x-go-name": "SourceBrand"
        },
        "sourceInstance": {
          "description": "SourceInstance ...",
          "type": "string",
          "x-go-name": "SourceInstance"
        },
        "status": {
          "$ref": "#/definitions/IncidentStatus"
        },
        "todoTaskIds": {
          "description": "ToDoTaskIDs list of to do task ids",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ToDoTaskIDs"
        },
        "type": {
          "description": "Incident type",
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "CustomFields": {
      "description": "The keys should be the field's display name all lower and without spaces. For example: Scan IP -\u003e scanip\nTo get the actual key name you can also go to Cortex XSOAR CLI and run /incident_add and look for the key that you would like to update",
      "type": "object",
      "title": "CustomFields ...",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "CustomGroup": {
      "description": "CustomGroup - A new custom group that will be created by merging groups based on the Conditions",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Buckets"
          },
          "x-go-name": "Conditions"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "CustomGroups": {
      "description": "CustomGroups - a custom group for each group-by element",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/CustomGroup"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "DBotScore": {
      "description": "DBotScore - Contain the score of a specific brand for a specific insight",
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "contentFormat": {
          "type": "string",
          "x-go-name": "ContentFormat"
        },
        "context": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Context"
        },
        "isTypedIndicator": {
          "type": "boolean",
          "x-go-name": "IsTypedIndicator"
        },
        "reliability": {
          "type": "string",
          "x-go-name": "SourceReliability"
        },
        "score": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Score"
        },
        "scoreChangeTimestamp": {
          "description": "We need to track when the score changes to know if we need to re-calculate the overall score",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ScoreChangeTimeStamp"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "TimeStamp"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Dashboard": {
      "type": "object",
      "title": "Dashboard ...",
      "properties": {
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "fromDateLicense": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDateLicenseVal"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isCommon": {
          "type": "boolean",
          "x-go-name": "IsCommon"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "layout": {
          "$ref": "#/definitions/WidgetCells"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "prevName": {
          "type": "string",
          "x-go-name": "PrevName"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "DataCollectionForm": {
      "type": "object",
      "title": "DataCollectionForm - a data collection form with questions.",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "expired": {
          "type": "boolean",
          "x-go-name": "Expired"
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Question"
          },
          "x-go-name": "Questions"
        },
        "sender": {
          "type": "string",
          "x-go-name": "Sender"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "totalAnswers": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalAnswers"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "DateRange": {
      "description": "DateRange provides common fields for date filtering",
      "type": "object",
      "properties": {
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "fromDateLicense": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDateLicenseVal"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "DateRangeFilter": {
      "description": "DateRangeFilter provides common fields for date filtering",
      "type": "object",
      "properties": {
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "fromDateLicense": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDateLicenseVal"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "timeFrame": {
          "$ref": "#/definitions/Duration"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "DockerImage": {
      "description": "DockerImage details",
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "createdSince": {
          "type": "string",
          "x-go-name": "CreatedSince"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "repository": {
          "type": "string",
          "x-go-name": "Repository"
        },
        "size": {
          "type": "string",
          "x-go-name": "Size"
        },
        "tag": {
          "type": "string",
          "x-go-name": "Tag"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "DockerImagesResult": {
      "description": "DockerImagesResult for the get images request",
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DockerImage"
          },
          "x-go-name": "Images"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "DownloadEntry": {
      "type": "object",
      "title": "DownloadEntry ...",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "investigationId": {
          "type": "string",
          "x-go-name": "InvestigationID"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "Duration": {
      "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
      "type": "integer",
      "format": "int64",
      "x-go-package": "time"
    },
    "ElasticCommonFields": {
      "description": "ElasticCommonFields - common fields used by elastic-search",
      "type": "object",
      "properties": {
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ElasticVersionFields": {
      "description": "ElasticVersionFields - elastic-search version fields",
      "type": "object",
      "properties": {
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "EndingType": {
      "description": "EndingType holds the type of schedule Ending",
      "type": "string",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Entry": {
      "description": "Entry holds a single entry in an investigation. Entries entered within a short amount of time by the same user are combined",
      "type": "object",
      "properties": {
        "IndicatorTimeline": {
          "$ref": "#/definitions/IndicatorTimeline"
        },
        "InstanceID": {
          "type": "string"
        },
        "Relationships": {
          "$ref": "#/definitions/RelationshipsAPI"
        },
        "ShardID": {
          "type": "integer",
          "format": "int64"
        },
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "brand": {
          "type": "string",
          "x-go-name": "Brand"
        },
        "category": {
          "$ref": "#/definitions/EntryCategory"
        },
        "contents": {
          "description": "The contents of the entry that is actually indexed - should not be used",
          "type": "object",
          "x-go-name": "DoNotUseContents"
        },
        "contentsSize": {
          "description": "ContentsSize the total size of the contents",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ContentsSize"
        },
        "created": {
          "description": "When it was taken",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "cron": {
          "type": "string",
          "x-go-name": "Cron"
        },
        "cronView": {
          "type": "boolean",
          "x-go-name": "CronView"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "deleted": {
          "type": "boolean",
          "x-go-name": "Deleted"
        },
        "deletedBy": {
          "type": "string",
          "x-go-name": "DeletedBy"
        },
        "deletedFromFS": {
          "type": "boolean",
          "x-go-name": "DeletedFromFS"
        },
        "endingDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndingDate"
        },
        "endingType": {
          "$ref": "#/definitions/EndingType"
        },
        "entryTask": {
          "$ref": "#/definitions/EntryTask"
        },
        "errorSource": {
          "description": "Source of the error",
          "type": "string",
          "x-go-name": "ErrorSource"
        },
        "file": {
          "description": "Filename of associated content",
          "type": "string",
          "x-go-name": "File"
        },
        "fileID": {
          "description": "FileID is the file name when saved in the server",
          "type": "string",
          "x-go-name": "FileID"
        },
        "fileMetadata": {
          "$ref": "#/definitions/FileMetadata"
        },
        "format": {
          "description": "Holds information on how content is formatted",
          "type": "string",
          "x-go-name": "ContentsFormat"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "history": {
          "description": "Edit history",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryHistory"
          },
          "x-go-name": "History"
        },
        "humanCron": {
          "$ref": "#/definitions/HumanCron"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "incidentCreationTime": {
          "description": "store the entry based on IncidentCreationTime",
          "type": "string",
          "format": "date-time",
          "x-go-name": "IncidentCreationTime"
        },
        "instance": {
          "type": "string",
          "x-go-name": "Instance"
        },
        "investigationId": {
          "description": "The id of the investigation it belongs to",
          "type": "string",
          "x-go-name": "InvestigationID"
        },
        "isTodo": {
          "description": "IsTodo",
          "type": "boolean",
          "x-go-name": "IsTodo"
        },
        "mirrored": {
          "description": "Only used for outbound mirroring to mark that it is already mirrored to remote system",
          "type": "boolean",
          "x-go-name": "Mirrored"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "note": {
          "description": "Note",
          "type": "boolean",
          "x-go-name": "Note"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "parentContent": {
          "description": "ParentEntry content - for reference",
          "type": "object",
          "x-go-name": "ParentEntryContent"
        },
        "parentEntryTruncated": {
          "description": "ParentEntryTruncated - indicates weather entry content was truncated",
          "type": "boolean",
          "x-go-name": "ParentEntryTruncated"
        },
        "parentId": {
          "description": "ParentId is the ID of the parent entry",
          "type": "string",
          "x-go-name": "ParentID"
        },
        "pinned": {
          "description": "Mark entry as pinned = evidence",
          "type": "boolean",
          "x-go-name": "Pinned"
        },
        "playbookId": {
          "description": "PlaybookID - if the entry is assigned as note to a playbook task, it will hold the playbook",
          "type": "string",
          "x-go-name": "PlaybookID"
        },
        "polling": {
          "description": "Only used for polling entries",
          "type": "boolean",
          "x-go-name": "Polling"
        },
        "pollingArgs": {
          "$ref": "#/definitions/ModuleArgs"
        },
        "pollingCommand": {
          "type": "string",
          "x-go-name": "PollingCommand"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "recurrent": {
          "type": "boolean",
          "x-go-name": "Recurrent"
        },
        "reputationSize": {
          "description": "ReputationSize the total size of the reputation",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReputationSize"
        },
        "reputations": {
          "description": "EntryReputations the reputations calculated by regex match",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryReputation"
          },
          "x-go-name": "EntryReputations"
        },
        "retryTime": {
          "description": "When retry took place",
          "type": "string",
          "format": "date-time",
          "x-go-name": "RetryTime"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "scheduled": {
          "description": "is it scheduled",
          "type": "boolean",
          "x-go-name": "Scheduled"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        },
        "system": {
          "description": "The name of the system associated with this entry",
          "type": "string",
          "x-go-name": "SystemName"
        },
        "tags": {
          "description": "Tags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "tagsRaw": {
          "description": "TagsRaw",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "TagsRaw"
        },
        "taskId": {
          "description": "TaskID - used if the entry is assigned as note to a playbook task",
          "type": "string",
          "x-go-name": "TaskID"
        },
        "times": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Times"
        },
        "timesRan": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimesRan"
        },
        "timezone": {
          "type": "string",
          "x-go-name": "Timezone"
        },
        "timezoneOffset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimezoneOffset"
        },
        "type": {
          "$ref": "#/definitions/EntryType"
        },
        "user": {
          "description": "The user who created  the entry",
          "type": "string",
          "x-go-name": "User"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "EntryCategory": {
      "type": "string",
      "title": "EntryCategory ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "EntryHistory": {
      "type": "object",
      "title": "EntryHistory ...",
      "properties": {
        "contentDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ContentDate"
        },
        "contents": {
          "type": "string",
          "x-go-name": "Contents"
        },
        "contentsFormat": {
          "type": "string",
          "x-go-name": "ContentsFormat"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "EntryReputation": {
      "description": "EntryReputation holds the entry reputations and the highlights",
      "type": "object",
      "properties": {
        "highlights": {
          "$ref": "#/definitions/FieldTermLocationMap"
        },
        "reputationsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReputationData"
          },
          "x-go-name": "ReputationsData"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "EntryTask": {
      "description": "EntryTask holds information regarding the related task",
      "type": "object",
      "properties": {
        "playbookName": {
          "type": "string",
          "x-go-name": "PlaybookName"
        },
        "quiet": {
          "type": "boolean",
          "x-go-name": "Quiet"
        },
        "taskId": {
          "type": "string",
          "x-go-name": "TaskID"
        },
        "taskName": {
          "type": "string",
          "x-go-name": "TaskName"
        },
        "taskStatus": {
          "type": "string",
          "x-go-name": "TaskStatus"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "EntryType": {
      "description": "EntryType specifies the type of the entry",
      "type": "number",
      "format": "double",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ErrorResponse": {
      "type": "object",
      "title": "ErrorResponse Represents an error.",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "Evidence": {
      "type": "object",
      "title": "Evidence details.",
      "properties": {
        "ShardID": {
          "type": "integer",
          "format": "int64"
        },
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "description": {
          "description": "The description for the resolve",
          "type": "string",
          "x-go-name": "Description"
        },
        "entryId": {
          "description": "The entry ID",
          "type": "string",
          "x-go-name": "EntryID"
        },
        "fetched": {
          "description": "when the evidence entry was fetched",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Fetched"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "incidentId": {
          "description": "The incident ID",
          "type": "string",
          "x-go-name": "IncidentID"
        },
        "markedBy": {
          "description": "the user that marked this evidence",
          "type": "string",
          "x-go-name": "MarkedBy"
        },
        "markedDate": {
          "description": "when this evidence was marked",
          "type": "string",
          "format": "date-time",
          "x-go-name": "MarkedDate"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "occurred": {
          "description": "When this evidence has occurred",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Occurred"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "tags": {
          "description": "Tags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "tagsRaw": {
          "description": "TagsRaw",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "TagsRaw"
        },
        "taskId": {
          "description": "when the evidence entry was fetched",
          "type": "string",
          "x-go-name": "TaskID"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "EvidenceData": {
      "description": "EvidenceData - all evidence properties to evaluate in task process",
      "type": "object",
      "properties": {
        "customFields": {
          "description": "This field must have empty json key",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "CustomFields"
        },
        "description": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "occurred": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "tags": {
          "$ref": "#/definitions/AdvanceArg"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Evidences": {
      "description": "Evidences is a list of evidence entities",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Evidence"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "EvidencesSearchResponse": {
      "description": "EvidencesSearchResponse returns the response from the evidences search",
      "type": "object",
      "properties": {
        "evidences": {
          "$ref": "#/definitions/Evidences"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "ExpirationIndicator": {
      "type": "object",
      "title": "ExpirationIndicator ...",
      "properties": {
        "deletedFeedFetchTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedFeedFetchTime"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpirationTime"
        },
        "expirationSource": {
          "$ref": "#/definitions/ExpirationSource"
        },
        "expirationStatus": {
          "$ref": "#/definitions/ExpirationStatus"
        },
        "manualExpirationTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ManualExpirationTime"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ExpirationPolicy": {
      "type": "string",
      "title": "ExpirationPolicy ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ExpirationSettingsSource": {
      "type": "string",
      "title": "ExpirationSettingsSource ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ExpirationSource": {
      "type": "object",
      "title": "ExpirationSource ..\t.",
      "properties": {
        "brand": {
          "type": "string",
          "x-go-name": "Brand"
        },
        "expirationInterval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpirationInterval"
        },
        "expirationPolicy": {
          "$ref": "#/definitions/ExpirationPolicy"
        },
        "instance": {
          "type": "string",
          "x-go-name": "Instance"
        },
        "moduleId": {
          "type": "string",
          "x-go-name": "ModuleID"
        },
        "setTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "SetTime"
        },
        "source": {
          "$ref": "#/definitions/ExpirationSettingsSource"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ExpirationStatus": {
      "type": "string",
      "title": "ExpirationStatus ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ExtractSettingsMode": {
      "type": "string",
      "title": "ExtractSettingsMode ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FeedIndicator": {
      "type": "object",
      "title": "FeedIndicator ...",
      "properties": {
        "ExpirationSource": {
          "$ref": "#/definitions/ExpirationSource"
        },
        "bypassExclusionList": {
          "type": "boolean",
          "x-go-name": "ShouldBypassExclusionList"
        },
        "classifierId": {
          "type": "string",
          "x-go-name": "ClassifierID"
        },
        "classifierVersion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassifierVersion"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeedIndicatorComment"
          },
          "x-go-name": "Comments"
        },
        "expirationInterval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpirationInterval"
        },
        "expirationPolicy": {
          "$ref": "#/definitions/ExpirationPolicy"
        },
        "fetchTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FetchTime"
        },
        "fields": {
          "$ref": "#/definitions/CustomFields"
        },
        "isEnrichment": {
          "type": "boolean",
          "x-go-name": "IsEnrichment"
        },
        "mapperId": {
          "type": "string",
          "x-go-name": "MapperID"
        },
        "mapperVersion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MapperVersion"
        },
        "modifiedTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ModifiedTime"
        },
        "moduleId": {
          "type": "string",
          "x-go-name": "ModuleID"
        },
        "rawJSON": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "RawJSON"
        },
        "relationships": {
          "$ref": "#/definitions/RelationshipsAPI"
        },
        "reliability": {
          "$ref": "#/definitions/Reliability"
        },
        "score": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Score"
        },
        "sourceBrand": {
          "type": "string",
          "x-go-name": "Brand"
        },
        "sourceInstance": {
          "type": "string",
          "x-go-name": "Instance"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "TimeStamp"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FeedIndicatorComment": {
      "type": "object",
      "title": "FeedIndicatorComment ...",
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FeedIndicatorCommentsFields": {
      "type": "object",
      "title": "FeedIndicatorCommentsFields ...",
      "properties": {
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeedIndicatorComment"
          },
          "x-go-name": "Comments"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FeedIndicators": {
      "type": "array",
      "title": "FeedIndicators ...",
      "items": {
        "$ref": "#/definitions/FeedIndicator"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FeedIndicatorsRequest": {
      "description": "FeedIndicatorsRequest is the input for JSON feed indicator ingestion",
      "type": "object",
      "properties": {
        "bypassExclusionList": {
          "type": "boolean",
          "x-go-name": "ShouldBypassExclusionList"
        },
        "classifierId": {
          "type": "string",
          "x-go-name": "ClassifierID"
        },
        "indicators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RawFeedIndicator"
          },
          "x-go-name": "Indicators"
        },
        "mapperId": {
          "type": "string",
          "x-go-name": "MapperID"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "FeedMetadata": {
      "type": "object",
      "title": "FeedMetadata ...",
      "properties": {
        "bypassExclusionList": {
          "type": "boolean",
          "x-go-name": "ShouldBypassExclusionList"
        },
        "classifierId": {
          "type": "string",
          "x-go-name": "ClassifierID"
        },
        "classifierVersion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ClassifierVersion"
        },
        "expirationInterval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpirationInterval"
        },
        "expirationPolicy": {
          "$ref": "#/definitions/ExpirationPolicy"
        },
        "fetchTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FetchTime"
        },
        "mapperId": {
          "type": "string",
          "x-go-name": "MapperID"
        },
        "mapperVersion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MapperVersion"
        },
        "moduleId": {
          "type": "string",
          "x-go-name": "ModuleID"
        },
        "reliability": {
          "$ref": "#/definitions/Reliability"
        },
        "score": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Score"
        },
        "sourceBrand": {
          "type": "string",
          "x-go-name": "Brand"
        },
        "sourceInstance": {
          "type": "string",
          "x-go-name": "Instance"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FieldExtractSetting": {
      "type": "object",
      "title": "FieldExtractSetting ...",
      "properties": {
        "extractAsIsIndicatorTypeId": {
          "type": "string",
          "x-go-name": "ExtractAsIsIndicatorTypeID"
        },
        "extractIndicatorTypesIDs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ExtractIndicatorTypesIDs"
        },
        "isExtractingAllIndicatorTypes": {
          "type": "boolean",
          "x-go-name": "IsExtractingAllIndicatorTypes"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FieldGroup": {
      "description": "FieldGroup is the field group",
      "type": "number",
      "format": "double",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FieldMapping": {
      "description": "FieldMapping - Map a task output (complex or simple value) to an incident field",
      "type": "object",
      "properties": {
        "fieldId": {
          "type": "string",
          "x-go-name": "IncidentField"
        },
        "output": {
          "$ref": "#/definitions/AdvanceArg"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FieldMergeStrategy": {
      "description": "FieldMergeStrategy strategy for merging of indicator fields",
      "type": "string",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FieldTermLocationMap": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/TermLocationMap"
      },
      "x-go-package": "github.com/blevesearch/bleve/v2/search"
    },
    "FileMetadata": {
      "type": "object",
      "title": "FileMetadata ...",
      "properties": {
        "info": {
          "type": "string",
          "x-go-name": "Info"
        },
        "isMediaFile": {
          "type": "boolean",
          "x-go-name": "IsMediaFile"
        },
        "md5": {
          "type": "string",
          "x-go-name": "MD5"
        },
        "sha1": {
          "type": "string",
          "x-go-name": "SHA1"
        },
        "sha256": {
          "type": "string",
          "x-go-name": "SHA256"
        },
        "sha512": {
          "type": "string",
          "x-go-name": "SHA512"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "ssdeep": {
          "type": "string",
          "x-go-name": "SSDeep"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FilterOperatorID": {
      "type": "string",
      "title": "FilterOperatorID ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FormDisplay": {
      "type": "object",
      "title": "FormDisplay - display options for communication/ask task (for both email and web forms).",
      "properties": {
        "bodyBackgroundColor": {
          "type": "string",
          "x-go-name": "BodyBackgroundColor"
        },
        "bodyFontColor": {
          "type": "string",
          "x-go-name": "BodyFontColor"
        },
        "headerBackgroundColor": {
          "type": "string",
          "x-go-name": "HeaderBackgroundColor"
        },
        "headerFontColor": {
          "type": "string",
          "x-go-name": "HeaderFontColor"
        },
        "isExternalRtl": {
          "type": "boolean",
          "x-go-name": "IsExternalRtl"
        },
        "sender": {
          "type": "string",
          "x-go-name": "Sender"
        },
        "submitButtonBackgroundColor": {
          "type": "string",
          "x-go-name": "SubmitButtonBackgroundColor"
        },
        "submitButtonFontColor": {
          "type": "string",
          "x-go-name": "SubmitButtonFontColor"
        },
        "submitText": {
          "type": "string",
          "x-go-name": "SubmitText"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "FullVersion": {
      "description": "FullVersion - both Elasticsearch version and bolt version",
      "type": "object",
      "properties": {
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "GenericStringDateFilter": {
      "description": "GenericStringDateFilter is a general filter that will fetch entities using the Query value and a date filter",
      "type": "object",
      "properties": {
        "Cache": {
          "description": "Cache of join functions",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "fromDateLicense": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDateLicenseVal"
        },
        "ignoreWorkers": {
          "description": "Do not use workers mechanism while searching bleve",
          "type": "boolean",
          "x-go-name": "IgnoreWorkers"
        },
        "page": {
          "description": "0-based page",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "searchAfter": {
          "description": "Efficient next page, pass max sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfter"
        },
        "searchAfterElastic": {
          "description": "Efficient next page, pass max ES sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfterElastic"
        },
        "searchBefore": {
          "description": "Efficient prev page, pass min sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBefore"
        },
        "searchBeforeElastic": {
          "description": "Efficient prev page, pass min ES sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBeforeElastic"
        },
        "size": {
          "description": "Size is limited to 1000, if not passed it defaults to 0, and no results will return",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sort": {
          "description": "The sort order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "x-go-name": "Sort"
        },
        "timeFrame": {
          "$ref": "#/definitions/Duration"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "GenericStringFilter": {
      "description": "GenericStringFilter is a general filter that will fetch entities using the Query value",
      "type": "object",
      "properties": {
        "Cache": {
          "description": "Cache of join functions",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "ignoreWorkers": {
          "description": "Do not use workers mechanism while searching bleve",
          "type": "boolean",
          "x-go-name": "IgnoreWorkers"
        },
        "page": {
          "description": "0-based page",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "searchAfter": {
          "description": "Efficient next page, pass max sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfter"
        },
        "searchAfterElastic": {
          "description": "Efficient next page, pass max ES sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfterElastic"
        },
        "searchBefore": {
          "description": "Efficient prev page, pass min sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBefore"
        },
        "searchBeforeElastic": {
          "description": "Efficient prev page, pass min ES sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBeforeElastic"
        },
        "size": {
          "description": "Size is limited to 1000, if not passed it defaults to 0, and no results will return",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sort": {
          "description": "The sort order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "x-go-name": "Sort"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "GraphDriverData": {
      "type": "object",
      "title": "GraphDriverData Information about a container's graph driver.",
      "required": [
        "Data",
        "Name"
      ],
      "properties": {
        "Data": {
          "description": "data",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "description": "name",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "GridColumn": {
      "type": "object",
      "title": "GridColumn ...",
      "properties": {
        "displayName": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "fieldCalcScript": {
          "type": "string",
          "x-go-name": "FieldCalcScript"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "isReadOnly": {
          "type": "boolean",
          "x-go-name": "IsReadOnly"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "required": {
          "type": "boolean",
          "x-go-name": "Required"
        },
        "script": {
          "type": "string",
          "x-go-name": "Script"
        },
        "selectValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SelectValues"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "width": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Width"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Group": {
      "type": "object",
      "title": "Group is the response that returns from a statistics query, describing a grouped value.",
      "properties": {
        "color": {
          "description": "color used to identify the group",
          "type": "string",
          "x-go-name": "Color"
        },
        "count": {
          "description": "The number of participants in the group",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "data": {
          "description": "The data value provided in array of integer values.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Data"
        },
        "dataType": {
          "type": "string",
          "x-go-name": "GoToDataType"
        },
        "floatData": {
          "description": "The data value provided in array of float values.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          },
          "x-go-name": "FloatData"
        },
        "groups": {
          "$ref": "#/definitions/Groups"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "pivot": {
          "type": "string",
          "x-go-name": "Pivot"
        },
        "query": {
          "type": "string",
          "x-go-name": "GoToQuery"
        },
        "x": {
          "type": "number",
          "format": "double",
          "x-go-name": "X"
        },
        "y": {
          "type": "number",
          "format": "double",
          "x-go-name": "Y"
        },
        "z": {
          "type": "number",
          "format": "double",
          "x-go-name": "Z"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "Groups": {
      "description": "Groups is a list of group entities",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Group"
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "HumanCron": {
      "type": "object",
      "title": "HumanCron ...",
      "properties": {
        "atTimeHour": {
          "type": "string",
          "x-go-name": "AtTimeHour"
        },
        "atTimeMinute": {
          "type": "string",
          "x-go-name": "AtTimeMinute"
        },
        "days": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Days"
        },
        "schedulingType": {
          "description": "the following fields are deprecated. do not use them.",
          "type": "string",
          "x-go-name": "SchedulingType"
        },
        "timePeriod": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimePeriod"
        },
        "timePeriodType": {
          "type": "string",
          "x-go-name": "TimePeriodType"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IdResponse": {
      "description": "IDResponse Response to an API call that returns just an Id",
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Id": {
          "description": "The id of the newly created object.",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-name": "IDResponse",
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "ImageDeleteResponseItem": {
      "description": "ImageDeleteResponseItem image delete response item",
      "type": "object",
      "properties": {
        "Deleted": {
          "description": "The image ID of an image that was deleted",
          "type": "string"
        },
        "Untagged": {
          "description": "The image ID of an image that was untagged",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "ImageSummary": {
      "description": "ImageSummary image summary",
      "type": "object",
      "required": [
        "Containers",
        "Created",
        "Id",
        "Labels",
        "ParentId",
        "RepoDigests",
        "RepoTags",
        "SharedSize",
        "Size",
        "VirtualSize"
      ],
      "properties": {
        "Containers": {
          "description": "containers",
          "type": "integer",
          "format": "int64"
        },
        "Created": {
          "description": "created",
          "type": "integer",
          "format": "int64"
        },
        "Id": {
          "description": "Id",
          "type": "string",
          "x-go-name": "ID"
        },
        "Labels": {
          "description": "labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ParentId": {
          "description": "parent Id",
          "type": "string",
          "x-go-name": "ParentID"
        },
        "RepoDigests": {
          "description": "repo digests",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RepoTags": {
          "description": "repo tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SharedSize": {
          "description": "shared size",
          "type": "integer",
          "format": "int64"
        },
        "Size": {
          "description": "size",
          "type": "integer",
          "format": "int64"
        },
        "VirtualSize": {
          "description": "virtual size",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "Important": {
      "description": "Important The important outputs of a given command",
      "type": "object",
      "properties": {
        "contextPath": {
          "type": "string",
          "x-go-name": "ContextPath"
        },
        "description": {
          "description": "Description is either a string or a map from string to interface",
          "type": "string",
          "x-go-name": "Description"
        },
        "related": {
          "description": "To what other context path this output is related",
          "type": "string",
          "x-go-name": "Related"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Incident": {
      "description": "An incident can be manually opened algorithmically or arrive from an external source like SIEM.\nNote: CustomFields (an optional generic object type) is missing from swagger properties definition.",
      "type": "object",
      "title": "Incident details.",
      "properties": {
        "ShardID": {
          "type": "integer",
          "format": "int64"
        },
        "account": {
          "description": "Account holds the tenant name so that slicing and dicing on the master can leverage bleve",
          "type": "string",
          "x-go-name": "Account"
        },
        "activated": {
          "description": "When was this activated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Activated"
        },
        "activatingingUserId": {
          "description": "The user that activated this investigation",
          "type": "string",
          "x-go-name": "ActivatingUserID"
        },
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "attachment": {
          "description": "Attachments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "x-go-name": "Attachments"
        },
        "autime": {
          "description": "AlmostUniqueTime is an attempt to have a unique sortable ID for an incident",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AlmostUniqueTime"
        },
        "canvases": {
          "description": "Canvases of the incident",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Canvases"
        },
        "category": {
          "description": "Category",
          "type": "string",
          "x-go-name": "Category"
        },
        "closeNotes": {
          "description": "Notes for closing the incident",
          "type": "string",
          "x-go-name": "CloseNotes"
        },
        "closeReason": {
          "description": "The reason for closing the incident (select from existing predefined values)",
          "type": "string",
          "x-go-name": "ArchiveReason"
        },
        "closed": {
          "description": "When was this closed",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Closed"
        },
        "closingUserId": {
          "description": "The user ID that closed this investigation",
          "type": "string",
          "x-go-name": "ClosingUserID"
        },
        "created": {
          "description": "When was this created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "dbotCurrentDirtyFields": {
          "description": "For mirroring, manage a list of current dirty fields so that we can send delta to outgoing integration",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DBotCurrentDirtyFields"
        },
        "dbotDirtyFields": {
          "description": "For mirroring, manage a list of dirty fields to not override them from the source of the incident",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DBotDirtyFields"
        },
        "dbotMirrorDirection": {
          "description": "DBotMirrorDirection of how to mirror the incident (in/out/both)",
          "type": "string",
          "x-go-name": "DBotMirrorDirection"
        },
        "dbotMirrorId": {
          "description": "DBotMirrorID of a remote system we are syncing with",
          "type": "string",
          "x-go-name": "DBotMirrorID"
        },
        "dbotMirrorInstance": {
          "description": "DBotMirrorInstance name of a mirror integration instance",
          "type": "string",
          "x-go-name": "DBotMirrorInstance"
        },
        "dbotMirrorLastSync": {
          "description": "The last time we synced this incident even if we did not update anything",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DBotMirrorLastSync"
        },
        "dbotMirrorTags": {
          "description": "The entry tags I want to sync to remote system",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DBotMirrorEntryTags"
        },
        "details": {
          "description": "The details of the incident - reason, etc.",
          "type": "string",
          "x-go-name": "Details"
        },
        "droppedCount": {
          "description": "DroppedCount ...",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DroppedCount"
        },
        "dueDate": {
          "description": "SLA",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DueDate"
        },
        "feedBased": {
          "description": "If this incident was triggered by a feed job",
          "type": "boolean",
          "x-go-name": "FeedBased"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "investigationId": {
          "description": "Investigation that was opened as a result of the incoming event",
          "type": "string",
          "x-go-name": "Investigation"
        },
        "isDebug": {
          "description": "IsDebug ...",
          "type": "boolean",
          "x-go-name": "IsDebug"
        },
        "isPlayground": {
          "description": "IsPlayGround",
          "type": "boolean",
          "x-go-name": "IsPlayGround"
        },
        "labels": {
          "description": "Labels related to incident - each label is composed of a type and value",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "x-go-name": "Labels"
        },
        "lastJobRunTime": {
          "description": "If this incident was triggered by a job, this would be the time the **previous** job started",
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastJobRunTime"
        },
        "lastOpen": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastOpen"
        },
        "linkedCount": {
          "description": "LinkedCount ...",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LinkedCount"
        },
        "linkedIncidents": {
          "description": "LinkedIncidents incidents that were marked as linked by user",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "LinkedIncidents"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "description": "Incident Name - given by user",
          "type": "string",
          "x-go-name": "Name"
        },
        "notifyTime": {
          "description": "Incdicates when last this field was changed with a value that supposed to send a notification",
          "type": "string",
          "format": "date-time",
          "x-go-name": "NotifyTime"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "occurred": {
          "description": "When this incident has really occurred",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Occurred"
        },
        "openDuration": {
          "description": "Duration incident was open",
          "type": "integer",
          "format": "int64",
          "x-go-name": "OpenDuration"
        },
        "owner": {
          "description": "The user who owns this incident",
          "type": "string",
          "x-go-name": "OwnerID"
        },
        "parent": {
          "description": "Parent",
          "type": "string",
          "x-go-name": "Parent"
        },
        "phase": {
          "description": "Phase",
          "type": "string",
          "x-go-name": "Phase"
        },
        "playbookId": {
          "description": "The associated playbook for this incident",
          "type": "string",
          "x-go-name": "PlaybookID"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "rawCategory": {
          "type": "string",
          "x-go-name": "RawCategory"
        },
        "rawCloseReason": {
          "description": "The reason for closing the incident (select from existing predefined values)",
          "type": "string",
          "x-go-name": "RawArchiveReason"
        },
        "rawJSON": {
          "type": "string",
          "x-go-name": "RawJSONData"
        },
        "rawName": {
          "description": "Incident RawName",
          "type": "string",
          "x-go-name": "RawName"
        },
        "rawPhase": {
          "description": "RawPhase",
          "type": "string",
          "x-go-name": "RawPhase"
        },
        "rawType": {
          "description": "Incident raw type",
          "type": "string",
          "x-go-name": "RawType"
        },
        "reason": {
          "description": "The reason for the resolve",
          "type": "string",
          "x-go-name": "Reason"
        },
        "reminder": {
          "description": "When if at all to send a reminder",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Reminder"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "runStatus": {
          "$ref": "#/definitions/RunStatus"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "severity": {
          "$ref": "#/definitions/Severity"
        },
        "sla": {
          "$ref": "#/definitions/SLAState"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "sourceBrand": {
          "description": "SourceBrand ...",
          "type": "string",
          "x-go-name": "SourceBrand"
        },
        "sourceInstance": {
          "description": "SourceInstance ...",
          "type": "string",
          "x-go-name": "SourceInstance"
        },
        "status": {
          "$ref": "#/definitions/IncidentStatus"
        },
        "todoTaskIds": {
          "description": "ToDoTaskIDs list of to do task ids",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ToDoTaskIDs"
        },
        "type": {
          "description": "Incident type",
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IncidentField": {
      "type": "object",
      "title": "IncidentField ...",
      "properties": {
        "associatedToAll": {
          "type": "boolean",
          "x-go-name": "AssociatedToAll"
        },
        "associatedTypes": {
          "description": "AssociatedTypes - list of incident (case) types IDs related to specific incident field",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AssociatedTypes"
        },
        "breachScript": {
          "type": "string",
          "x-go-name": "BreachScript"
        },
        "caseInsensitive": {
          "type": "boolean",
          "x-go-name": "CaseInsensitive"
        },
        "cliName": {
          "type": "string",
          "x-go-name": "CliName"
        },
        "closeForm": {
          "type": "boolean",
          "x-go-name": "CloseForm"
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GridColumn"
          },
          "x-go-name": "GridColumns"
        },
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "content": {
          "type": "boolean",
          "x-go-name": "Content"
        },
        "defaultRows": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "x-go-name": "DefaultRows"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "editForm": {
          "type": "boolean",
          "x-go-name": "EditForm"
        },
        "fieldCalcScript": {
          "type": "string",
          "x-go-name": "FieldCalcScript"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "group": {
          "$ref": "#/definitions/FieldGroup"
        },
        "hidden": {
          "type": "boolean",
          "x-go-name": "Hidden"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isReadOnly": {
          "type": "boolean",
          "x-go-name": "IsReadOnly"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "mergeStrategy": {
          "$ref": "#/definitions/FieldMergeStrategy"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "neverSetAsRequired": {
          "type": "boolean",
          "x-go-name": "NeverSetAsRequired"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "ownerOnly": {
          "type": "boolean",
          "x-go-name": "OwnerOnly"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "placeholder": {
          "type": "string",
          "x-go-name": "Placeholder"
        },
        "prevName": {
          "type": "string",
          "x-go-name": "PrevName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "required": {
          "type": "boolean",
          "x-go-name": "Required"
        },
        "runScriptAfterUpdate": {
          "type": "boolean",
          "x-go-name": "RunScriptAfterIncUpdate"
        },
        "script": {
          "type": "string",
          "x-go-name": "Script"
        },
        "selectValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SelectValues"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sla": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SLA"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "systemAssociatedTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SystemAssociatedTypes"
        },
        "threshold": {
          "type": "number",
          "format": "double",
          "x-go-name": "Threshold"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "unmapped": {
          "type": "boolean",
          "x-go-name": "Unmapped"
        },
        "unsearchable": {
          "type": "boolean",
          "x-go-name": "UnSearchable"
        },
        "useAsKpi": {
          "type": "boolean",
          "x-go-name": "UseAsKpi"
        },
        "validatedError": {
          "type": "string",
          "x-go-name": "ValidatedError"
        },
        "validationRegex": {
          "type": "string",
          "x-go-name": "ValidationRegex"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IncidentFilter": {
      "type": "object",
      "title": "IncidentFilter allows for very simple filtering.",
      "properties": {
        "Cache": {
          "description": "Cache of join functions",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "andOp": {
          "type": "boolean",
          "x-go-name": "AndOp"
        },
        "category": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Category"
        },
        "details": {
          "type": "string",
          "x-go-name": "Details"
        },
        "files": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Files"
        },
        "fromActivatedDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromActivatedDate"
        },
        "fromClosedDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromClosedDate"
        },
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "fromDateLicense": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDateLicenseVal"
        },
        "fromDueDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDueDate"
        },
        "fromReminder": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromReminder"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ID"
        },
        "ignoreWorkers": {
          "description": "Do not use workers mechanism while searching bleve",
          "type": "boolean",
          "x-go-name": "IgnoreWorkers"
        },
        "includeTmp": {
          "type": "boolean",
          "x-go-name": "IncludeTmp"
        },
        "investigation": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Investigation"
        },
        "level": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Severity"
          },
          "x-go-name": "Level"
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Name"
        },
        "notCategory": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NotCategory"
        },
        "notInvestigation": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NotInvestigation"
        },
        "notStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncidentStatus"
          },
          "x-go-name": "NotStatus"
        },
        "page": {
          "description": "0-based page",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "parent": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Parent"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Reason"
        },
        "searchAfter": {
          "description": "Efficient next page, pass max sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfter"
        },
        "searchAfterElastic": {
          "description": "Efficient next page, pass max ES sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfterElastic"
        },
        "searchBefore": {
          "description": "Efficient prev page, pass min sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBefore"
        },
        "searchBeforeElastic": {
          "description": "Efficient prev page, pass min ES sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBeforeElastic"
        },
        "size": {
          "description": "Size is limited to 1000, if not passed it defaults to 0, and no results will return",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sort": {
          "description": "The sort order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "x-go-name": "Sort"
        },
        "status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncidentStatus"
          },
          "x-go-name": "Status"
        },
        "systems": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Systems"
        },
        "timeFrame": {
          "$ref": "#/definitions/Duration"
        },
        "toActivatedDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToActivatedDate"
        },
        "toClosedDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToClosedDate"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        },
        "toDueDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDueDate"
        },
        "toReminder": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToReminder"
        },
        "totalOnly": {
          "type": "boolean",
          "x-go-name": "TotalOnly"
        },
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Type"
        },
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Urls"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Users"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "IncidentSearchResponseWrapper": {
      "description": "IncidentSearchResponseWrapper is an extension for the IncidentSearchResponse type, which holds list of IncidentWrapper(s)",
      "type": "object",
      "properties": {
        "data": {
          "description": "in: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncidentWrapper"
          },
          "x-go-name": "Data"
        },
        "notUpdated": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "NotUpdated"
        },
        "searchAfter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfter"
        },
        "searchAfterElastic": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfterElastic"
        },
        "searchBefore": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBefore"
        },
        "searchBeforeElastic": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBeforeElastic"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IncidentStatus": {
      "description": "IncidentStatus is the status of the incident",
      "type": "number",
      "format": "double",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IncidentType": {
      "type": "object",
      "title": "IncidentType ...",
      "properties": {
        "autorun": {
          "type": "boolean",
          "x-go-name": "IsAutoRun"
        },
        "closureScript": {
          "type": "string",
          "x-go-name": "ClosureScript"
        },
        "color": {
          "type": "string",
          "x-go-name": "Color"
        },
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "days": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Days"
        },
        "daysR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DaysReminder"
        },
        "default": {
          "type": "boolean",
          "x-go-name": "IsDefaultType"
        },
        "detached": {
          "type": "boolean",
          "x-go-name": "Detached"
        },
        "disabled": {
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "extractSettings": {
          "$ref": "#/definitions/IncidentTypeExtractSettings"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "hours": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hours"
        },
        "hoursR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "HoursReminder"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "layout": {
          "type": "string",
          "x-go-name": "Layout"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "onChangeRepAlg": {
          "$ref": "#/definitions/ReputationCalcAlg"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "playbookId": {
          "type": "string",
          "x-go-name": "PlaybookID"
        },
        "preProcessingScript": {
          "type": "string",
          "x-go-name": "PreProcessingScript"
        },
        "prevName": {
          "type": "string",
          "x-go-name": "PrevName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "readonly": {
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "reputationCalc": {
          "$ref": "#/definitions/ReputationCalcAlg"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sla": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SLA"
        },
        "slaReminder": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SLAReminder"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "weeks": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Weeks"
        },
        "weeksR": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WeeksReminder"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IncidentTypeExtractSettings": {
      "type": "object",
      "title": "IncidentTypeExtractSettings ...",
      "properties": {
        "fieldCliNameToExtractSettings": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FieldExtractSetting"
          },
          "x-go-name": "FieldCliNameToExtractSettings"
        },
        "mode": {
          "$ref": "#/definitions/ExtractSettingsMode"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IncidentWrapper": {
      "description": "IncidentWrapper is an extension of the Incident entity, which includes an additional field of changed-status for the web client",
      "type": "object",
      "properties": {
        "ShardID": {
          "type": "integer",
          "format": "int64"
        },
        "account": {
          "description": "Account holds the tenant name so that slicing and dicing on the master can leverage bleve",
          "type": "string",
          "x-go-name": "Account"
        },
        "activated": {
          "description": "When was this activated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Activated"
        },
        "activatingingUserId": {
          "description": "The user that activated this investigation",
          "type": "string",
          "x-go-name": "ActivatingUserID"
        },
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "attachment": {
          "description": "Attachments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "x-go-name": "Attachments"
        },
        "autime": {
          "description": "AlmostUniqueTime is an attempt to have a unique sortable ID for an incident",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AlmostUniqueTime"
        },
        "canvases": {
          "description": "Canvases of the incident",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Canvases"
        },
        "category": {
          "description": "Category",
          "type": "string",
          "x-go-name": "Category"
        },
        "changeStatus": {
          "type": "string",
          "x-go-name": "ChangeStatus"
        },
        "closeNotes": {
          "description": "Notes for closing the incident",
          "type": "string",
          "x-go-name": "CloseNotes"
        },
        "closeReason": {
          "description": "The reason for closing the incident (select from existing predefined values)",
          "type": "string",
          "x-go-name": "ArchiveReason"
        },
        "closed": {
          "description": "When was this closed",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Closed"
        },
        "closingUserId": {
          "description": "The user ID that closed this investigation",
          "type": "string",
          "x-go-name": "ClosingUserID"
        },
        "created": {
          "description": "When was this created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "dbotCurrentDirtyFields": {
          "description": "For mirroring, manage a list of current dirty fields so that we can send delta to outgoing integration",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DBotCurrentDirtyFields"
        },
        "dbotDirtyFields": {
          "description": "For mirroring, manage a list of dirty fields to not override them from the source of the incident",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DBotDirtyFields"
        },
        "dbotMirrorDirection": {
          "description": "DBotMirrorDirection of how to mirror the incident (in/out/both)",
          "type": "string",
          "x-go-name": "DBotMirrorDirection"
        },
        "dbotMirrorId": {
          "description": "DBotMirrorID of a remote system we are syncing with",
          "type": "string",
          "x-go-name": "DBotMirrorID"
        },
        "dbotMirrorInstance": {
          "description": "DBotMirrorInstance name of a mirror integration instance",
          "type": "string",
          "x-go-name": "DBotMirrorInstance"
        },
        "dbotMirrorLastSync": {
          "description": "The last time we synced this incident even if we did not update anything",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DBotMirrorLastSync"
        },
        "dbotMirrorTags": {
          "description": "The entry tags I want to sync to remote system",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DBotMirrorEntryTags"
        },
        "details": {
          "description": "The details of the incident - reason, etc.",
          "type": "string",
          "x-go-name": "Details"
        },
        "droppedCount": {
          "description": "DroppedCount ...",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DroppedCount"
        },
        "dueDate": {
          "description": "SLA",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DueDate"
        },
        "feedBased": {
          "description": "If this incident was triggered by a feed job",
          "type": "boolean",
          "x-go-name": "FeedBased"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "insights": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Insights"
        },
        "investigationId": {
          "description": "Investigation that was opened as a result of the incoming event",
          "type": "string",
          "x-go-name": "Investigation"
        },
        "isDebug": {
          "description": "IsDebug ...",
          "type": "boolean",
          "x-go-name": "IsDebug"
        },
        "isPlayground": {
          "description": "IsPlayGround",
          "type": "boolean",
          "x-go-name": "IsPlayGround"
        },
        "labels": {
          "description": "Labels related to incident - each label is composed of a type and value",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "x-go-name": "Labels"
        },
        "lastJobRunTime": {
          "description": "If this incident was triggered by a job, this would be the time the **previous** job started",
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastJobRunTime"
        },
        "lastOpen": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastOpen"
        },
        "linkedCount": {
          "description": "LinkedCount ...",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LinkedCount"
        },
        "linkedIncidents": {
          "description": "LinkedIncidents incidents that were marked as linked by user",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "LinkedIncidents"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "description": "Incident Name - given by user",
          "type": "string",
          "x-go-name": "Name"
        },
        "notifyTime": {
          "description": "Incdicates when last this field was changed with a value that supposed to send a notification",
          "type": "string",
          "format": "date-time",
          "x-go-name": "NotifyTime"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "occurred": {
          "description": "When this incident has really occurred",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Occurred"
        },
        "openDuration": {
          "description": "Duration incident was open",
          "type": "integer",
          "format": "int64",
          "x-go-name": "OpenDuration"
        },
        "owner": {
          "description": "The user who owns this incident",
          "type": "string",
          "x-go-name": "OwnerID"
        },
        "parent": {
          "description": "Parent",
          "type": "string",
          "x-go-name": "Parent"
        },
        "phase": {
          "description": "Phase",
          "type": "string",
          "x-go-name": "Phase"
        },
        "playbookId": {
          "description": "The associated playbook for this incident",
          "type": "string",
          "x-go-name": "PlaybookID"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "rawCategory": {
          "type": "string",
          "x-go-name": "RawCategory"
        },
        "rawCloseReason": {
          "description": "The reason for closing the incident (select from existing predefined values)",
          "type": "string",
          "x-go-name": "RawArchiveReason"
        },
        "rawJSON": {
          "type": "string",
          "x-go-name": "RawJSONData"
        },
        "rawName": {
          "description": "Incident RawName",
          "type": "string",
          "x-go-name": "RawName"
        },
        "rawPhase": {
          "description": "RawPhase",
          "type": "string",
          "x-go-name": "RawPhase"
        },
        "rawType": {
          "description": "Incident raw type",
          "type": "string",
          "x-go-name": "RawType"
        },
        "reason": {
          "description": "The reason for the resolve",
          "type": "string",
          "x-go-name": "Reason"
        },
        "reminder": {
          "description": "When if at all to send a reminder",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Reminder"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "runStatus": {
          "$ref": "#/definitions/RunStatus"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "severity": {
          "$ref": "#/definitions/Severity"
        },
        "sla": {
          "$ref": "#/definitions/SLAState"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "sourceBrand": {
          "description": "SourceBrand ...",
          "type": "string",
          "x-go-name": "SourceBrand"
        },
        "sourceInstance": {
          "description": "SourceInstance ...",
          "type": "string",
          "x-go-name": "SourceInstance"
        },
        "status": {
          "$ref": "#/definitions/IncidentStatus"
        },
        "todoTaskIds": {
          "description": "ToDoTaskIDs list of to do task ids",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ToDoTaskIDs"
        },
        "type": {
          "description": "Incident type",
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Incidents": {
      "description": "Incidents is a list of incident entities"
    },
    "IndicatorEditBulkResponse": {
      "type": "object",
      "title": "IndicatorEditBulkResponse ...",
      "properties": {
        "total": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        },
        "updated": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "IndicatorFilter": {
      "description": "IndicatorFilter is a general filter that fetches entities using a query string query using the Query value",
      "type": "object",
      "properties": {
        "Cache": {
          "description": "Cache of join functions",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "earlyTimeInPage": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EarlyTimeInPage"
        },
        "firstSeen": {
          "$ref": "#/definitions/DateRangeFilter"
        },
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "fromDateLicense": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDateLicenseVal"
        },
        "ignoreWorkers": {
          "description": "Do not use workers mechanism while searching bleve",
          "type": "boolean",
          "x-go-name": "IgnoreWorkers"
        },
        "lastSeen": {
          "$ref": "#/definitions/DateRangeFilter"
        },
        "laterTimeInPage": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LaterTimeInPage"
        },
        "page": {
          "description": "0-based page",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "prevPage": {
          "description": "MT support - these fields are for indicator search according to calculatedTime",
          "type": "boolean",
          "x-go-name": "PrevPage"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "searchAfter": {
          "description": "Efficient next page, pass max sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfter"
        },
        "searchAfterElastic": {
          "description": "Efficient next page, pass max ES sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfterElastic"
        },
        "searchBefore": {
          "description": "Efficient prev page, pass min sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBefore"
        },
        "searchBeforeElastic": {
          "description": "Efficient prev page, pass min ES sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBeforeElastic"
        },
        "size": {
          "description": "Size is limited to 1000, if not passed it defaults to 0, and no results will return",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sort": {
          "description": "The sort order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "x-go-name": "Sort"
        },
        "timeFrame": {
          "$ref": "#/definitions/Duration"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "IndicatorResult": {
      "type": "object",
      "title": "IndicatorResult ...",
      "properties": {
        "iocObjects": {
          "$ref": "#/definitions/IocObjects"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "IndicatorTimeline": {
      "type": "array",
      "title": "IndicatorTimeline ...",
      "items": {
        "$ref": "#/definitions/IndicatorTimelineFromEntry"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IndicatorTimelineFromEntry": {
      "type": "object",
      "title": "IndicatorTimelineFromEntry ...",
      "properties": {
        "Category": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "Source": {
          "type": "string"
        },
        "Time": {
          "type": "string",
          "format": "date-time"
        },
        "User": {
          "type": "string"
        },
        "Value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Info": {
      "description": "Info - holds all workers status",
      "type": "object",
      "properties": {
        "Available": {
          "type": "number",
          "format": "double"
        },
        "BufferSpace": {
          "type": "integer",
          "format": "int64"
        },
        "Busy": {
          "type": "integer",
          "format": "int64"
        },
        "HighPriorityAvailable": {
          "type": "number",
          "format": "double"
        },
        "HighPriorityBufferSpace": {
          "type": "integer",
          "format": "int64"
        },
        "Name": {
          "type": "string"
        },
        "ProcessInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessInfo"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/demisto/server/util/workers/workersInfo"
    },
    "InsightCache": {
      "description": "InsightCache - map insight name to all its metadata, name will be case insensitive",
      "type": "object",
      "properties": {
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "scores": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DBotScore"
          },
          "x-go-name": "Scores"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InstanceClassifier": {
      "description": "InstanceClassifier - classifies an incident from a specific brand",
      "type": "object",
      "properties": {
        "brands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Brands"
        },
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "defaultIncidentType": {
          "type": "string",
          "x-go-name": "DefaultIncidentType"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "feed": {
          "type": "boolean",
          "x-go-name": "Feed"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "incidentSamples": {
          "$ref": "#/definitions/Incidents"
        },
        "indicatorSamples": {
          "$ref": "#/definitions/FeedIndicators"
        },
        "instanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InstanceIDs"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "keyTypeMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "KeyTypeMap"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "logicalVersion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LogicalVersion"
        },
        "mapping": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Mapper"
          },
          "x-go-name": "Mapping"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nameRaw": {
          "type": "string",
          "x-go-name": "NameRaw"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "prevName": {
          "type": "string",
          "x-go-name": "PrevName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "sourceClassifierId": {
          "type": "string",
          "x-go-name": "SourceClassifierID"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "transformer": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "type": {
          "$ref": "#/definitions/MapperType"
        },
        "unclassifiedCases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UnclassifiedCases"
          },
          "x-go-name": "UnclassifiedCases"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IntegrationScript": {
      "type": "object",
      "title": "IntegrationScript ...",
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Command"
          },
          "x-go-name": "Commands"
        },
        "dockerImage": {
          "type": "string",
          "x-go-name": "DockerImage"
        },
        "feed": {
          "type": "boolean",
          "x-go-name": "Feed"
        },
        "isFetch": {
          "type": "boolean",
          "x-go-name": "IsFetch"
        },
        "isFetchCredentials": {
          "type": "boolean",
          "x-go-name": "IsFetchCredentials"
        },
        "isFetchSamples": {
          "type": "boolean",
          "x-go-name": "IsFetchSamples"
        },
        "isMappable": {
          "type": "boolean",
          "x-go-name": "IsMappable"
        },
        "isRemoteSyncIn": {
          "type": "boolean",
          "x-go-name": "IsRemoteSyncIn"
        },
        "isRemoteSyncOut": {
          "type": "boolean",
          "x-go-name": "IsRemoteSyncOut"
        },
        "longRunning": {
          "type": "boolean",
          "x-go-name": "LongRunning"
        },
        "longRunningPortMapping": {
          "type": "boolean",
          "x-go-name": "LongRunningPort"
        },
        "resetContext": {
          "type": "boolean",
          "x-go-name": "ResetContext"
        },
        "runOnce": {
          "type": "boolean",
          "x-go-name": "RunOnce"
        },
        "script": {
          "type": "string",
          "x-go-name": "Script"
        },
        "subtype": {
          "$ref": "#/definitions/ScriptSubType"
        },
        "type": {
          "$ref": "#/definitions/ScriptType"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InvPlaybookDebugInfo": {
      "type": "object",
      "title": "InvPlaybookDebugInfo ...",
      "properties": {
        "originalInvPBId": {
          "type": "string",
          "x-go-name": "OriginalInvPBID"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InvPlaybookTaskCompleteData": {
      "type": "object",
      "title": "InvPlaybookTaskCompleteData ...",
      "properties": {
        "arguments": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Arguments"
        },
        "calculatedDescription": {
          "type": "string",
          "x-go-name": "CalculatedDescription"
        },
        "calculatedTaskName": {
          "type": "string",
          "x-go-name": "CalculatedTaskName"
        },
        "completedBy": {
          "type": "string",
          "x-go-name": "CompletedBy"
        },
        "completedCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CompletedCount"
        },
        "completedDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CompletedDate"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Entries"
        },
        "input": {
          "type": "string",
          "x-go-name": "Input"
        },
        "outputs": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Outputs"
        },
        "playbookInputs": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "PlaybookInputs"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        },
        "state": {
          "$ref": "#/definitions/TaskState"
        },
        "willNotExecuteCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WillNotExecuteCount"
        },
        "willNotExecuteReason": {
          "type": "string",
          "x-go-name": "WillNotExecuteReason"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InvPlaybookTaskData": {
      "type": "object",
      "title": "InvPlaybookTaskData ...",
      "properties": {
        "addAfter": {
          "type": "boolean",
          "x-go-name": "AddAfter"
        },
        "automationScript": {
          "type": "string",
          "x-go-name": "AutomationScript"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "loop": {
          "$ref": "#/definitions/TaskLoop"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "neighborInvPBTaskId": {
          "type": "string",
          "x-go-name": "NeighborInvPBTaskID"
        },
        "playbookId": {
          "type": "string",
          "x-go-name": "PlaybookID"
        },
        "scriptArguments": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "ScriptArguments"
        },
        "separateContext": {
          "type": "boolean",
          "x-go-name": "SeparateContext"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "type": {
          "$ref": "#/definitions/TaskType"
        }
      },
      "x-go-package": "github.com/demisto/server/services"
    },
    "InvTaskDebug": {
      "type": "object",
      "title": "InvTaskDebug ...",
      "properties": {
        "breakpointCondition": {
          "$ref": "#/definitions/ArgFilter"
        },
        "isMarkedWithBreakpoint": {
          "type": "boolean",
          "x-go-name": "IsMarkedWithBreakpoint"
        },
        "isMarkedWithSkip": {
          "type": "boolean",
          "x-go-name": "IsMarkedWithSkip"
        },
        "shouldOverrideDebugInfo": {
          "type": "boolean",
          "x-go-name": "ShouldOverrideDebugInfo"
        },
        "skipConditionOverrideTo": {
          "type": "string",
          "x-go-name": "SkipConditionOverrideTo"
        },
        "taskOriginalId": {
          "type": "string",
          "x-go-name": "OriginalID"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Investigation": {
      "description": "A special investigation called playground is created for each user-project combination and is a private space for the researcher to play in.",
      "type": "object",
      "title": "Investigation contains the investigation of a particular incident.",
      "properties": {
        "ShardID": {
          "type": "integer",
          "format": "int64"
        },
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "category": {
          "description": "Category of the investigation",
          "type": "string",
          "x-go-name": "Category"
        },
        "childInvestigations": {
          "description": "ChildInvestigations id's",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ChildInvestigations"
        },
        "closed": {
          "description": "When was this closed",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Closed"
        },
        "closingUserId": {
          "description": "The user ID that closed this investigation",
          "type": "string",
          "x-go-name": "ClosingUserID"
        },
        "created": {
          "description": "When was this created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "creatingUserId": {
          "description": "The user ID that created this investigation",
          "type": "string",
          "x-go-name": "CreatingUserID"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "details": {
          "description": "User defined free text details",
          "type": "string",
          "x-go-name": "Details"
        },
        "entitlements": {
          "description": "One time entitlements",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Entitlements"
        },
        "entryUsers": {
          "description": "EntryUsers",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EntryUsers"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "highPriority": {
          "description": "HighPriority - tasks of this investigation should run in high priority",
          "type": "boolean",
          "x-go-name": "HighPriority"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isChildInvestigation": {
          "description": "IsChildInvestigation",
          "type": "boolean",
          "x-go-name": "IsChildInvestigation"
        },
        "isDebug": {
          "description": "IsDebug ...",
          "type": "boolean",
          "x-go-name": "IsDebug"
        },
        "lastOpen": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastOpen"
        },
        "mirrorAutoClose": {
          "description": "MirrorAutoClose will tell us to close the Chat Module channel if we close investigation",
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "x-go-name": "MirrorAutoClose"
        },
        "mirrorTypes": {
          "description": "MirrorTypes holds info about mirror direction and message type to be mirrored\nmessage type can be either 'all' or 'chat'\ndirection can be either 'FromDemisto', 'ToDemisto' or 'Both' if this investigation is mirrored",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "MirrorTypes"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "description": "The name of the investigation, which is unique to the project",
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "openDuration": {
          "description": "Duration from open to close time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "OpenDuration"
        },
        "parentInvestigation": {
          "description": "ParentInvestigation - parent id, in case this is a child investigation of another investigation",
          "type": "string",
          "x-go-name": "ParentInvestigation"
        },
        "persistentEntitlements": {
          "description": "Persistent entitlement per tag. Empty tag will also return an entitlement",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "PersistentEntitlements"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "rawCategory": {
          "type": "string",
          "x-go-name": "RawCategory"
        },
        "reason": {
          "description": "The reason for the status (resolve)",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Reason"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "runStatus": {
          "$ref": "#/definitions/RunStatus"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "slackMirrorAutoClose": {
          "description": "DEPRECATED - DeprecatedSlackMirrorAutoClose will tell us to close the Slack channel if we close investigation",
          "type": "boolean",
          "x-go-name": "DeprecatedSlackMirrorAutoClose"
        },
        "slackMirrorType": {
          "description": "DEPRECATED - DeprecatedSlackMirrorType holds info about mirror direction and message type to be mirror\nmessage type can be either 'all' or 'chat'\ndirection can be either 'demisto2Slack', 'slack2Demisto' or 'both' if this investigation is mirrored to Slack",
          "type": "string",
          "x-go-name": "DeprecatedSlackMirrorType"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "status": {
          "$ref": "#/definitions/InvestigationStatus"
        },
        "systems": {
          "description": "The systems involved",
          "type": "array",
          "items": {
            "$ref": "#/definitions/System"
          },
          "x-go-name": "Systems"
        },
        "tags": {
          "description": "Tags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "type": {
          "$ref": "#/definitions/InvestigationType"
        },
        "users": {
          "description": "The users who share this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Users"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InvestigationFilter": {
      "type": "object",
      "title": "InvestigationFilter allows for very simple filtering.",
      "properties": {
        "Cache": {
          "description": "Cache of join functions",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "andOp": {
          "type": "boolean",
          "x-go-name": "AndOp"
        },
        "category": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Category"
        },
        "fromCloseDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromCloseDate"
        },
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "fromDateLicense": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDateLicenseVal"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ID"
        },
        "idsOnly": {
          "type": "boolean",
          "x-go-name": "IdsOnly"
        },
        "ignoreWorkers": {
          "description": "Do not use workers mechanism while searching bleve",
          "type": "boolean",
          "x-go-name": "IgnoreWorkers"
        },
        "includeChildInv": {
          "type": "boolean",
          "x-go-name": "IncludeChildInv"
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Name"
        },
        "notCategory": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NotCategory"
        },
        "notIDs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NotIDs"
        },
        "page": {
          "description": "0-based page",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Reason"
        },
        "searchAfter": {
          "description": "Efficient next page, pass max sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfter"
        },
        "searchAfterElastic": {
          "description": "Efficient next page, pass max ES sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfterElastic"
        },
        "searchBefore": {
          "description": "Efficient prev page, pass min sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBefore"
        },
        "searchBeforeElastic": {
          "description": "Efficient prev page, pass min ES sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBeforeElastic"
        },
        "size": {
          "description": "Size is limited to 1000, if not passed it defaults to 0, and no results will return",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sort": {
          "description": "The sort order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "x-go-name": "Sort"
        },
        "status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvestigationStatus"
          },
          "x-go-name": "Status"
        },
        "timeFrame": {
          "$ref": "#/definitions/Duration"
        },
        "toCloseDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToCloseDate"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        },
        "type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvestigationType"
          },
          "x-go-name": "Type"
        },
        "user": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "User"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "InvestigationPlaybook": {
      "description": "InvestigationPlaybook is a wrapper for a linked list of Playbook tasks",
      "type": "object",
      "properties": {
        "Dirty": {
          "type": "boolean"
        },
        "ReadyPlaybookInputs": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "ReplacedPlaybook": {
          "description": "Indicate whether this playbook has new history during this session",
          "type": "boolean"
        },
        "ShardID": {
          "type": "integer",
          "format": "int64"
        },
        "UpdatedOperatorIDs": {
          "type": "boolean"
        },
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "autoExtracting": {
          "type": "boolean",
          "x-go-name": "AutoExtracting"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Description"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "incidentCreateDate": {
          "description": "Incident create date",
          "type": "string",
          "format": "date-time",
          "x-go-name": "IncidentCreateDate"
        },
        "inputs": {
          "$ref": "#/definitions/PlaybookInputs"
        },
        "invPBDebugInfo": {
          "$ref": "#/definitions/InvPlaybookDebugInfo"
        },
        "investigationId": {
          "type": "string",
          "x-go-name": "InvestigationID"
        },
        "isTIM": {
          "type": "boolean",
          "x-go-name": "IsTIM"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "outputs": {
          "$ref": "#/definitions/PlaybookOutputs"
        },
        "pbHistory": {
          "description": "in: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvestigationPlaybookData"
          },
          "x-go-name": "PbHistory"
        },
        "pendingTasks": {
          "description": "Tasks that are marked for running, but cannot yet run due to incomplete parents",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "PendingTasks"
        },
        "playbookId": {
          "type": "string",
          "x-go-name": "PlaybookID"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "quiet": {
          "type": "boolean",
          "x-go-name": "Quiet"
        },
        "recoveryAttempts": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RecoveryAttempts"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "serverId": {
          "description": "Holds the ID of the responsible cluster app server",
          "type": "string",
          "x-go-name": "ServerID"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        },
        "startTaskId": {
          "description": "FirstTask is the root task of the playbook",
          "type": "string",
          "x-go-name": "StartTaskID"
        },
        "state": {
          "$ref": "#/definitions/InvestigationPlaybookState"
        },
        "subPlaybookInputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PlaybookInputs"
          },
          "x-go-name": "SubPlaybookInputs"
        },
        "subPlaybookOutputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PlaybookOutputs"
          },
          "x-go-name": "SubPlaybookOutputs"
        },
        "tasks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InvestigationPlaybookTask"
          },
          "x-go-name": "Tasks"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "view": {
          "$ref": "#/definitions/PlaybookView"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InvestigationPlaybookData": {
      "description": "InvestigationPlaybookData returns all data of an investigation playbook, not including history",
      "type": "object",
      "properties": {
        "ReadyPlaybookInputs": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "autoExtracting": {
          "type": "boolean",
          "x-go-name": "AutoExtracting"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Description"
        },
        "inputs": {
          "$ref": "#/definitions/PlaybookInputs"
        },
        "investigationId": {
          "type": "string",
          "x-go-name": "InvestigationID"
        },
        "isTIM": {
          "type": "boolean",
          "x-go-name": "IsTIM"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "outputs": {
          "$ref": "#/definitions/PlaybookOutputs"
        },
        "pendingTasks": {
          "description": "Tasks that are marked for running, but cannot yet run due to incomplete parents",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "PendingTasks"
        },
        "playbookId": {
          "type": "string",
          "x-go-name": "PlaybookID"
        },
        "quiet": {
          "type": "boolean",
          "x-go-name": "Quiet"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        },
        "startTaskId": {
          "description": "FirstTask is the root task of the playbook",
          "type": "string",
          "x-go-name": "StartTaskID"
        },
        "state": {
          "$ref": "#/definitions/InvestigationPlaybookState"
        },
        "subPlaybookInputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PlaybookInputs"
          },
          "x-go-name": "SubPlaybookInputs"
        },
        "subPlaybookOutputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PlaybookOutputs"
          },
          "x-go-name": "SubPlaybookOutputs"
        },
        "tasks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InvestigationPlaybookTask"
          },
          "x-go-name": "Tasks"
        },
        "view": {
          "$ref": "#/definitions/PlaybookView"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InvestigationPlaybookState": {
      "description": "InvestigationPlaybookState indicates the state of the running playbook",
      "type": "string",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InvestigationPlaybookTask": {
      "description": "InvestigationPlaybookTask is the Task in the playbook context as a node",
      "type": "object",
      "properties": {
        "arguments": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Arguments"
        },
        "assignee": {
          "type": "string",
          "x-go-name": "Assignee"
        },
        "assigneeSet": {
          "type": "boolean",
          "x-go-name": "AssigneeSet"
        },
        "blockingTasks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "BlockingTasks"
        },
        "calculatedDescription": {
          "type": "string",
          "x-go-name": "CalculatedDescription"
        },
        "calculatedTaskName": {
          "type": "string",
          "x-go-name": "CalculatedTaskName"
        },
        "comments": {
          "description": "Whether this task had any comments or not",
          "type": "boolean",
          "x-go-name": "Comments"
        },
        "completedBy": {
          "type": "string",
          "x-go-name": "CompletedBy"
        },
        "completedCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CompletedCount"
        },
        "completedDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CompletedDate"
        },
        "conditions": {
          "description": "Conditions - optional list of conditions to run when task is conditional. we check conditions by their order (e.i. - considering the first one that satisfied)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskCondition"
          },
          "x-go-name": "Conditions"
        },
        "continueOnError": {
          "type": "boolean",
          "x-go-name": "ContinueOnError"
        },
        "defaultAssignee": {
          "type": "string",
          "x-go-name": "DefaultAssignee"
        },
        "defaultAssigneeComplex": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "defaultReminder": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DefaultReminder"
        },
        "doNotSaveTaskHistory": {
          "type": "boolean",
          "x-go-name": "DoNotSaveTaskHistory"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DueDate"
        },
        "dueDateDuration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DueDateDuration"
        },
        "dueDateSet": {
          "type": "boolean",
          "x-go-name": "DueDateSet"
        },
        "entries": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Entries"
        },
        "evidenceData": {
          "$ref": "#/definitions/EvidenceData"
        },
        "executionCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExecutionCount"
        },
        "fieldMapping": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldMapping"
          },
          "x-go-name": "FieldMappingArray"
        },
        "forEachIndex": {
          "description": "Parameters needed for loops",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ForEachIndex"
        },
        "forEachInputs": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "x-go-name": "ForEachInputs"
        },
        "form": {
          "$ref": "#/definitions/DataCollectionForm"
        },
        "formDisplay": {
          "$ref": "#/definitions/FormDisplay"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "ignoreWorker": {
          "description": "Do not run this task in a worker",
          "type": "boolean",
          "x-go-name": "IgnoreWorker"
        },
        "indent": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Indent"
        },
        "input": {
          "type": "string",
          "x-go-name": "Input"
        },
        "isAutoSwitchedToQuietMode": {
          "type": "boolean",
          "x-go-name": "IsAutoSwitchedToQuietMode"
        },
        "isOverSize": {
          "type": "boolean",
          "x-go-name": "IsOverSize"
        },
        "loop": {
          "$ref": "#/definitions/TaskLoop"
        },
        "message": {
          "$ref": "#/definitions/NotifiableItem"
        },
        "missingContentItem": {
          "description": "content item which caused task to skip",
          "type": "string",
          "x-go-name": "MissingContentItem"
        },
        "nextPollingTime": {
          "description": "NextPollTime Time of the next scheduled command execution",
          "type": "string",
          "format": "date-time",
          "x-go-name": "NextPollTime"
        },
        "nextTasks": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "NextTasks"
        },
        "note": {
          "type": "boolean",
          "x-go-name": "Note"
        },
        "outputs": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Outputs"
        },
        "parentBlockCount": {
          "description": "the number of tasks that are waiting on blocked in subplaybooks of this task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ParentBlockCount"
        },
        "parentPlaybookID": {
          "type": "string",
          "x-go-name": "ParentPlaybookTaskID"
        },
        "patched": {
          "description": "Indicates whether this task was patched to InvPB and did not originally belong to the playbook",
          "type": "boolean",
          "x-go-name": "Patched"
        },
        "playbookInputs": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "PlaybookInputs"
        },
        "pollingEntries": {
          "description": "PollingEntryIDs IDs of entries that are still polling",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PollingEntryIDs"
        },
        "pollingTimeoutTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "PollingTimeoutTime"
        },
        "previousTasks": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "PreviousTasks"
        },
        "quietMode": {
          "$ref": "#/definitions/QuietMode"
        },
        "reminder": {
          "description": "Duration in minutes, this field is not persisted here",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Reminder"
        },
        "reputationCalc": {
          "$ref": "#/definitions/ReputationCalcAlg"
        },
        "restrictedCompletion": {
          "type": "boolean",
          "x-go-name": "RestrictedCompletion"
        },
        "scriptArguments": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "ScriptArguments"
        },
        "separateContext": {
          "type": "boolean",
          "x-go-name": "SeparateContext"
        },
        "skip": {
          "description": "Skip - if true then this task will be skipped and all the tasks which comes after this task and depend on it\nwill skip (WillNotExecute)",
          "type": "boolean",
          "x-go-name": "Skip"
        },
        "skipUnavailable": {
          "description": "SkipUnavailable if true then will check if automation exists, integration of that command is installed and\nactive or sub playbook exists in Demisto",
          "type": "boolean",
          "x-go-name": "SkipUnavailable"
        },
        "sla": {
          "$ref": "#/definitions/SLA"
        },
        "slaReminder": {
          "$ref": "#/definitions/SLA"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        },
        "startedExecutingHarmfulScript": {
          "type": "boolean",
          "x-go-name": "StartedExecutingHarmfulScript"
        },
        "state": {
          "$ref": "#/definitions/TaskState"
        },
        "subPlaybook": {
          "$ref": "#/definitions/InvestigationPlaybook"
        },
        "task": {
          "$ref": "#/definitions/Task"
        },
        "taskCompleteData": {
          "description": "History complete data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvPlaybookTaskCompleteData"
          },
          "x-go-name": "TaskCompleteData"
        },
        "taskDebug": {
          "$ref": "#/definitions/InvTaskDebug"
        },
        "taskId": {
          "type": "string",
          "x-go-name": "TaskID"
        },
        "taskSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TaskSize"
        },
        "timerTriggers": {
          "description": "SLA fields",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimerTrigger"
          },
          "x-go-name": "TimerTriggers"
        },
        "timesPolled": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimesPolled"
        },
        "type": {
          "$ref": "#/definitions/TaskType"
        },
        "view": {
          "$ref": "#/definitions/TaskView"
        },
        "willNotExecuteCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WillNotExecuteCount"
        },
        "willNotExecuteReason": {
          "type": "string",
          "x-go-name": "WillNotExecuteReason"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InvestigationSearchResponse": {
      "description": "InvestigationSearchResponse returns the response from the investigation search",
      "type": "object",
      "properties": {
        "data": {
          "description": "in: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Investigation"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "InvestigationStatus": {
      "description": "InvestigationStatus is the status type",
      "type": "number",
      "format": "double",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "InvestigationType": {
      "type": "number",
      "format": "double",
      "title": "InvestigationType ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Investigations": {
      "description": "Investigations is a slice of investigation",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Investigation"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IocObject": {
      "description": "IocObject - represents an Ioc (or simply an indicator) object",
      "type": "object",
      "properties": {
        "CustomFields": {
          "$ref": "#/definitions/CustomFields"
        },
        "account": {
          "type": "string",
          "x-go-name": "Account"
        },
        "aggregatedReliability": {
          "type": "string",
          "x-go-name": "AggregatedReliability"
        },
        "calculatedTime": {
          "description": "Do not set the fields bellow this line",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CalculatedTime"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Comment"
        },
        "comments": {
          "$ref": "#/definitions/Comments"
        },
        "deletedFeedFetchTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedFeedFetchTime"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpirationTime"
        },
        "expirationSource": {
          "$ref": "#/definitions/ExpirationSource"
        },
        "expirationStatus": {
          "$ref": "#/definitions/ExpirationStatus"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FirstSeen"
        },
        "firstSeenEntryID": {
          "type": "string",
          "x-go-name": "FirstSeenEntryID"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "indicator_type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "insightCache": {
          "$ref": "#/definitions/InsightCache"
        },
        "investigationIDs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InvestigationIDs"
        },
        "isShared": {
          "type": "boolean",
          "x-go-name": "IsShared"
        },
        "lastReputationRun": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastReputationRun"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastSeen"
        },
        "lastSeenEntryID": {
          "type": "string",
          "x-go-name": "LastSeenEntryID"
        },
        "manualExpirationTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ManualExpirationTime"
        },
        "manualScore": {
          "type": "boolean",
          "x-go-name": "ManualScore"
        },
        "manualSetTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ManualSetTime"
        },
        "manuallyEditedFields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ManuallyEditedFields"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "modifiedTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ModifiedTime"
        },
        "moduleToFeedMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FeedIndicator"
          },
          "x-go-name": "ModuleToFeedMap"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "relatedIncCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RelatedIncCount"
        },
        "score": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Score"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "setBy": {
          "type": "string",
          "x-go-name": "SetBy"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "sourceBrands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SourceBrands"
        },
        "sourceInstances": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SourceInstances"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "TimeStamp"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "IocObjects": {
      "type": "array",
      "title": "IocObjects ...",
      "items": {
        "$ref": "#/definitions/IocObject"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Label": {
      "type": "object",
      "title": "Label ...",
      "properties": {
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Layout": {
      "type": "object",
      "title": "Layout ...",
      "properties": {
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "prevKind": {
          "type": "string",
          "x-go-name": "PrevKind"
        },
        "prevTypeId": {
          "type": "string",
          "x-go-name": "PrevTypeID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayoutSection"
          },
          "x-go-name": "Sections"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "typeId": {
          "type": "string",
          "x-go-name": "TypeID"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/olddomain"
    },
    "LayoutAPI": {
      "description": "LayoutAPI - request sent from the client contains some or all\nof the fields.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "layout": {
          "$ref": "#/definitions/Layout"
        },
        "typeId": {
          "type": "string",
          "x-go-name": "TypeID"
        }
      },
      "x-go-package": "github.com/demisto/server/olddomain"
    },
    "LayoutCommon": {
      "type": "object",
      "title": "LayoutCommon ...",
      "properties": {
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "prevKind": {
          "type": "string",
          "x-go-name": "PrevKind"
        },
        "prevTypeId": {
          "type": "string",
          "x-go-name": "PrevTypeID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "typeId": {
          "type": "string",
          "x-go-name": "TypeID"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/olddomain"
    },
    "LayoutField": {
      "type": "object",
      "title": "LayoutField ...",
      "properties": {
        "fieldId": {
          "type": "string",
          "x-go-name": "FieldID"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isVisible": {
          "type": "boolean",
          "x-go-name": "IsVisible"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/olddomain"
    },
    "LayoutSection": {
      "type": "object",
      "title": "LayoutSection ...",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayoutField"
          },
          "x-go-name": "Fields"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isVisible": {
          "type": "boolean",
          "x-go-name": "IsVisible"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "query": {
          "type": "object",
          "x-go-name": "Query"
        },
        "queryType": {
          "type": "string",
          "x-go-name": "QueryType"
        },
        "readOnly": {
          "type": "boolean",
          "x-go-name": "IsReadOnly"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/olddomain"
    },
    "Location": {
      "type": "object",
      "properties": {
        "array_positions": {
          "$ref": "#/definitions/ArrayPositions"
        },
        "end": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "End"
        },
        "pos": {
          "description": "Pos is the position of the term within the field, starting at 1",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Pos"
        },
        "start": {
          "description": "Start and End are the byte offsets of the term in the field",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Start"
        }
      },
      "x-go-package": "github.com/blevesearch/bleve/v2/search"
    },
    "Locations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Location"
      },
      "x-go-package": "github.com/blevesearch/bleve/v2/search"
    },
    "Mapper": {
      "description": "Mapper - mapper for new incidents",
      "type": "object",
      "properties": {
        "dontMapEventToLabels": {
          "description": "DontMapEventToLabels by default we will map all the fields of the event to incident labels",
          "type": "boolean",
          "x-go-name": "DontMapEventToLabels"
        },
        "internalMapping": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "InternalMapping"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "MapperType": {
      "description": "MapperType for instance classifier",
      "type": "string",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ModuleArgs": {
      "description": "ModuleArgs represents module args",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ModuleConfiguration": {
      "description": "ModuleConfiguration is the configuration parameters for a module",
      "type": "object",
      "properties": {
        "beta": {
          "type": "boolean",
          "x-go-name": "Beta"
        },
        "brand": {
          "type": "string",
          "x-go-name": "Brand"
        },
        "canGetSamples": {
          "type": "boolean",
          "x-go-name": "CanGetSamples"
        },
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "cmdline": {
          "type": "string",
          "x-go-name": "Cmdline"
        },
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "configuration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigField"
          },
          "x-go-name": "Configuration"
        },
        "defaultClassifier": {
          "type": "string",
          "x-go-name": "DefaultClassifier"
        },
        "defaultMapperIn": {
          "type": "string",
          "x-go-name": "DefaultMapperIn"
        },
        "defaultMapperOut": {
          "type": "string",
          "x-go-name": "DefaultMapperOut"
        },
        "deprecated": {
          "type": "boolean",
          "x-go-name": "Deprecated"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "detailedDescription": {
          "type": "string",
          "x-go-name": "DetailedDescription"
        },
        "display": {
          "type": "string",
          "x-go-name": "Display"
        },
        "executable": {
          "type": "string",
          "x-go-name": "Executable"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "hidden": {
          "type": "boolean",
          "x-go-name": "Hidden"
        },
        "hideEngines": {
          "type": "boolean",
          "x-go-name": "HideEngines"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "integrationScript": {
          "$ref": "#/definitions/IntegrationScript"
        },
        "isPasswordProtected": {
          "type": "boolean",
          "x-go-name": "IsPasswordProtected"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "prevName": {
          "type": "string",
          "x-go-name": "PrevName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "private": {
          "type": "boolean",
          "x-go-name": "Private"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "readonly": {
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "scriptNotVisible": {
          "type": "boolean",
          "x-go-name": "ScriptNotVisible"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "sourceModuleID": {
          "type": "string",
          "x-go-name": "SourceModuleID"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "NewDockerImage": {
      "description": "NewDockerImage creation request",
      "type": "object",
      "properties": {
        "base": {
          "type": "string",
          "x-go-name": "BaseImage"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Dependencies"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "packages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Packages"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "NewDockerImageResult": {
      "description": "NewDockerImageResult of the command",
      "type": "object",
      "properties": {
        "createdName": {
          "type": "string",
          "x-go-name": "CreatedName"
        },
        "output": {
          "type": "string",
          "x-go-name": "Output"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "NotifiableItem": {
      "type": "object",
      "title": "NotifiableItem ...",
      "properties": {
        "bcc": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "body": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "cc": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "defaultOption": {
          "type": "string",
          "x-go-name": "DefaultOption"
        },
        "format": {
          "type": "string",
          "x-go-name": "Format"
        },
        "methods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Methods"
        },
        "replyOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReplyOptions"
        },
        "subject": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "timings": {
          "$ref": "#/definitions/NotifyTimings"
        },
        "to": {
          "$ref": "#/definitions/AdvanceArg"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "NotifyTimings": {
      "type": "object",
      "title": "NotifyTimings - time control on notify items - retries max count and intervals.",
      "properties": {
        "completeAfterReplies": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CompleteAfterReplies"
        },
        "retriesCount": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "RetriesCount"
        },
        "retriesInterval": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "RetriesInterval"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "OperatorArgument": {
      "type": "object",
      "title": "OperatorArgument ...",
      "properties": {
        "isContext": {
          "type": "boolean",
          "x-go-name": "IsContext"
        },
        "value": {
          "$ref": "#/definitions/AdvanceArg"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "OperatorType": {
      "type": "string",
      "title": "OperatorType ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Order": {
      "description": "Order struct holds a sort field and the direction of sorting",
      "type": "object",
      "properties": {
        "asc": {
          "type": "boolean",
          "x-go-name": "Asc"
        },
        "field": {
          "type": "string",
          "x-go-name": "Field"
        },
        "fieldType": {
          "type": "string",
          "x-go-name": "FieldType"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Output": {
      "description": "Output of a module command",
      "type": "object",
      "properties": {
        "contentPath": {
          "type": "string",
          "x-go-name": "ContentPath"
        },
        "contextPath": {
          "type": "string",
          "x-go-name": "ContextPath"
        },
        "description": {
          "description": "Description is either a string or a map from string to interface",
          "type": "object",
          "x-go-name": "Description"
        },
        "type": {
          "$ref": "#/definitions/OutputType"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "OutputType": {
      "type": "string",
      "title": "OutputType ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Period": {
      "type": "object",
      "title": "Period holds the 'Period' query, such as last 3 days, last 6 hours, between 6 days from now until 3 days from now.",
      "properties": {
        "by": {
          "description": "By is used for legacty, and if exists it will override ByTo and ByFrom",
          "type": "string",
          "x-go-name": "By"
        },
        "byFrom": {
          "type": "string",
          "x-go-name": "ByFrom"
        },
        "byTo": {
          "type": "string",
          "x-go-name": "ByTo"
        },
        "field": {
          "type": "string",
          "x-go-name": "Field"
        },
        "fromValue": {
          "type": "string",
          "format": "duration",
          "x-go-name": "FromValue"
        },
        "toValue": {
          "type": "string",
          "format": "duration",
          "x-go-name": "ToValue"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Playbook": {
      "description": "Playbook is a collection of tasks",
      "type": "object",
      "properties": {
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "brands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Brands"
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Commands"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Description"
        },
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "deprecated": {
          "type": "boolean",
          "x-go-name": "Deprecated"
        },
        "detached": {
          "type": "boolean",
          "x-go-name": "Detached"
        },
        "encTasks": {
          "type": "string",
          "x-go-name": "EncTasks"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "hidden": {
          "type": "boolean",
          "x-go-name": "Hidden"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "inputs": {
          "$ref": "#/definitions/PlaybookInputs"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "missingScriptsIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "MissingScriptsIDs"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nameRaw": {
          "type": "string",
          "x-go-name": "NameRaw"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "outputs": {
          "$ref": "#/definitions/PlaybookOutputs"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "prevName": {
          "type": "string",
          "x-go-name": "PrevName"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "private": {
          "type": "boolean",
          "x-go-name": "Private"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "quiet": {
          "type": "boolean",
          "x-go-name": "Quiet"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "scriptIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ScriptIDs"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "sourcePlaybookID": {
          "type": "string",
          "x-go-name": "SourcePlaybookID"
        },
        "startTaskId": {
          "type": "string",
          "x-go-name": "StartTaskID"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "taskIds": {
          "description": "auto generated field that will contain all task ids in this playbook\nNeeded for searching with bleve",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "TaskIDs"
        },
        "tasks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PlaybookTask"
          },
          "x-go-name": "Tasks"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "view": {
          "$ref": "#/definitions/PlaybookView"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "PlaybookInput": {
      "description": "PlaybookInput represents the playbook input",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "playbookInputQuery": {
          "$ref": "#/definitions/PlaybookInputQuery"
        },
        "required": {
          "type": "boolean",
          "x-go-name": "Required"
        },
        "value": {
          "$ref": "#/definitions/AdvanceArg"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "PlaybookInputQuery": {
      "description": "PlaybookInputQuery represents the playbook query input",
      "type": "object",
      "properties": {
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "fromDateLicense": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDateLicenseVal"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "queryEntity": {
          "type": "string",
          "x-go-name": "QueryEntity"
        },
        "queryState": {
          "$ref": "#/definitions/QueryState"
        },
        "results": {
          "type": "object",
          "x-go-name": "Results"
        },
        "runFromLastJobTime": {
          "type": "boolean",
          "x-go-name": "RunFromLastJobTime"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "PlaybookInputs": {
      "description": "PlaybookInputs - array of PlaybookInput",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PlaybookInput"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "PlaybookOutput": {
      "description": "PlaybookOutput represents the playbook output",
      "type": "object",
      "properties": {
        "contextPath": {
          "type": "string",
          "x-go-name": "ContextPath"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "type": {
          "$ref": "#/definitions/OutputType"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "PlaybookOutputs": {
      "description": "PlaybookOutputs - array of PlaybookOutput",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PlaybookOutput"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "PlaybookTask": {
      "type": "object",
      "title": "PlaybookTask ...",
      "properties": {
        "conditions": {
          "description": "Conditions - optional list of conditions to run when task is conditional. we check conditions by their order (e.i. - considering the first one that satisfied)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskCondition"
          },
          "x-go-name": "Conditions"
        },
        "continueOnError": {
          "type": "boolean",
          "x-go-name": "ContinueOnError"
        },
        "defaultAssignee": {
          "type": "string",
          "x-go-name": "DefaultAssignee"
        },
        "defaultAssigneeComplex": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "defaultReminder": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DefaultReminder"
        },
        "evidenceData": {
          "$ref": "#/definitions/EvidenceData"
        },
        "fieldMapping": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldMapping"
          },
          "x-go-name": "FieldMappingArray"
        },
        "form": {
          "$ref": "#/definitions/DataCollectionForm"
        },
        "formDisplay": {
          "$ref": "#/definitions/FormDisplay"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "ignoreWorker": {
          "description": "Do not run this task in a worker",
          "type": "boolean",
          "x-go-name": "IgnoreWorker"
        },
        "isAutoSwitchedToQuietMode": {
          "type": "boolean",
          "x-go-name": "IsAutoSwitchedToQuietMode"
        },
        "isOverSize": {
          "type": "boolean",
          "x-go-name": "IsOverSize"
        },
        "loop": {
          "$ref": "#/definitions/TaskLoop"
        },
        "message": {
          "$ref": "#/definitions/NotifiableItem"
        },
        "nextTasks": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "NextTasks"
        },
        "note": {
          "type": "boolean",
          "x-go-name": "Note"
        },
        "quietMode": {
          "$ref": "#/definitions/QuietMode"
        },
        "reputationCalc": {
          "$ref": "#/definitions/ReputationCalcAlg"
        },
        "restrictedCompletion": {
          "type": "boolean",
          "x-go-name": "RestrictedCompletion"
        },
        "scriptArguments": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "ScriptArguments"
        },
        "separateContext": {
          "type": "boolean",
          "x-go-name": "SeparateContext"
        },
        "skipUnavailable": {
          "description": "SkipUnavailable if true then will check if automation exists, integration of that command is installed and\nactive or sub playbook exists in Demisto",
          "type": "boolean",
          "x-go-name": "SkipUnavailable"
        },
        "sla": {
          "$ref": "#/definitions/SLA"
        },
        "slaReminder": {
          "$ref": "#/definitions/SLA"
        },
        "task": {
          "$ref": "#/definitions/Task"
        },
        "taskId": {
          "type": "string",
          "x-go-name": "TaskID"
        },
        "timerTriggers": {
          "description": "SLA fields",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimerTrigger"
          },
          "x-go-name": "TimerTriggers"
        },
        "type": {
          "$ref": "#/definitions/TaskType"
        },
        "view": {
          "$ref": "#/definitions/TaskView"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "PlaybookView": {
      "description": "PlaybookView represents the view in client of playbook graph",
      "type": "object",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Plugin": {
      "description": "Plugin A plugin for the Engine API",
      "type": "object",
      "required": [
        "Config",
        "Enabled",
        "Name",
        "Settings"
      ],
      "properties": {
        "Config": {
          "$ref": "#/definitions/PluginConfig"
        },
        "Enabled": {
          "description": "True if the plugin is running. False if the plugin is not running, only installed.",
          "type": "boolean"
        },
        "Id": {
          "description": "Id",
          "type": "string",
          "x-go-name": "ID"
        },
        "Name": {
          "description": "name",
          "type": "string"
        },
        "PluginReference": {
          "description": "plugin remote reference used to push/pull the plugin",
          "type": "string"
        },
        "Settings": {
          "$ref": "#/definitions/PluginSettings"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginConfig": {
      "type": "object",
      "title": "PluginConfig The config of a plugin.",
      "required": [
        "Args",
        "Description",
        "Documentation",
        "Entrypoint",
        "Env",
        "Interface",
        "IpcHost",
        "Linux",
        "Mounts",
        "Network",
        "PidHost",
        "PropagatedMount",
        "WorkDir"
      ],
      "properties": {
        "Args": {
          "$ref": "#/definitions/PluginConfigArgs"
        },
        "Description": {
          "description": "description",
          "type": "string"
        },
        "DockerVersion": {
          "description": "Docker Version used to create the plugin",
          "type": "string"
        },
        "Documentation": {
          "description": "documentation",
          "type": "string"
        },
        "Entrypoint": {
          "description": "entrypoint",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Env": {
          "description": "env",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginEnv"
          }
        },
        "Interface": {
          "$ref": "#/definitions/PluginConfigInterface"
        },
        "IpcHost": {
          "description": "ipc host",
          "type": "boolean"
        },
        "Linux": {
          "$ref": "#/definitions/PluginConfigLinux"
        },
        "Mounts": {
          "description": "mounts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginMount"
          }
        },
        "Network": {
          "$ref": "#/definitions/PluginConfigNetwork"
        },
        "PidHost": {
          "description": "pid host",
          "type": "boolean"
        },
        "PropagatedMount": {
          "description": "propagated mount",
          "type": "string"
        },
        "User": {
          "$ref": "#/definitions/PluginConfigUser"
        },
        "WorkDir": {
          "description": "work dir",
          "type": "string"
        },
        "rootfs": {
          "$ref": "#/definitions/PluginConfigRootfs"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginConfigArgs": {
      "description": "PluginConfigArgs plugin config args",
      "type": "object",
      "required": [
        "Description",
        "Name",
        "Settable",
        "Value"
      ],
      "properties": {
        "Description": {
          "description": "description",
          "type": "string"
        },
        "Name": {
          "description": "name",
          "type": "string"
        },
        "Settable": {
          "description": "settable",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Value": {
          "description": "value",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginConfigInterface": {
      "description": "PluginConfigInterface The interface between Docker and the plugin",
      "type": "object",
      "required": [
        "Socket",
        "Types"
      ],
      "properties": {
        "ProtocolScheme": {
          "description": "Protocol to use for clients connecting to the plugin.",
          "type": "string"
        },
        "Socket": {
          "description": "socket",
          "type": "string"
        },
        "Types": {
          "description": "types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginInterfaceType"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginConfigLinux": {
      "description": "PluginConfigLinux plugin config linux",
      "type": "object",
      "required": [
        "AllowAllDevices",
        "Capabilities",
        "Devices"
      ],
      "properties": {
        "AllowAllDevices": {
          "description": "allow all devices",
          "type": "boolean"
        },
        "Capabilities": {
          "description": "capabilities",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Devices": {
          "description": "devices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginDevice"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginConfigNetwork": {
      "description": "PluginConfigNetwork plugin config network",
      "type": "object",
      "required": [
        "Type"
      ],
      "properties": {
        "Type": {
          "description": "type",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginConfigRootfs": {
      "description": "PluginConfigRootfs plugin config rootfs",
      "type": "object",
      "properties": {
        "diff_ids": {
          "description": "diff ids",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DiffIds"
        },
        "type": {
          "description": "type",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginConfigUser": {
      "description": "PluginConfigUser plugin config user",
      "type": "object",
      "properties": {
        "GID": {
          "description": "g ID",
          "type": "integer",
          "format": "uint32"
        },
        "UID": {
          "description": "UID",
          "type": "integer",
          "format": "uint32"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginDevice": {
      "description": "PluginDevice plugin device",
      "type": "object",
      "required": [
        "Description",
        "Name",
        "Path",
        "Settable"
      ],
      "properties": {
        "Description": {
          "description": "description",
          "type": "string"
        },
        "Name": {
          "description": "name",
          "type": "string"
        },
        "Path": {
          "description": "path",
          "type": "string"
        },
        "Settable": {
          "description": "settable",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginEnv": {
      "description": "PluginEnv plugin env",
      "type": "object",
      "required": [
        "Description",
        "Name",
        "Settable",
        "Value"
      ],
      "properties": {
        "Description": {
          "description": "description",
          "type": "string"
        },
        "Name": {
          "description": "name",
          "type": "string"
        },
        "Settable": {
          "description": "settable",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Value": {
          "description": "value",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginInterfaceType": {
      "description": "PluginInterfaceType plugin interface type",
      "type": "object",
      "required": [
        "Capability",
        "Prefix",
        "Version"
      ],
      "properties": {
        "Capability": {
          "description": "capability",
          "type": "string"
        },
        "Prefix": {
          "description": "prefix",
          "type": "string"
        },
        "Version": {
          "description": "version",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginMount": {
      "description": "PluginMount plugin mount",
      "type": "object",
      "required": [
        "Description",
        "Destination",
        "Name",
        "Options",
        "Settable",
        "Source",
        "Type"
      ],
      "properties": {
        "Description": {
          "description": "description",
          "type": "string"
        },
        "Destination": {
          "description": "destination",
          "type": "string"
        },
        "Name": {
          "description": "name",
          "type": "string"
        },
        "Options": {
          "description": "options",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Settable": {
          "description": "settable",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Source": {
          "description": "source",
          "type": "string"
        },
        "Type": {
          "description": "type",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "PluginSettings": {
      "type": "object",
      "title": "PluginSettings Settings that can be modified by users.",
      "required": [
        "Args",
        "Devices",
        "Env",
        "Mounts"
      ],
      "properties": {
        "Args": {
          "description": "args",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Devices": {
          "description": "devices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginDevice"
          }
        },
        "Env": {
          "description": "env",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Mounts": {
          "description": "mounts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginMount"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "Port": {
      "description": "Port An open port on a container",
      "type": "object",
      "required": [
        "PrivatePort",
        "Type"
      ],
      "properties": {
        "IP": {
          "description": "Host IP address that the container's port is mapped to",
          "type": "string"
        },
        "PrivatePort": {
          "description": "Port on the container",
          "type": "integer",
          "format": "uint16"
        },
        "PublicPort": {
          "description": "Port exposed on the host",
          "type": "integer",
          "format": "uint16"
        },
        "Type": {
          "description": "type",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "ProcessInfo": {
      "description": "ProcessInfo - holds info per worker",
      "type": "object",
      "properties": {
        "Details": {
          "type": "string"
        },
        "Duration": {
          "$ref": "#/definitions/Duration"
        },
        "HighPriority": {
          "type": "boolean"
        },
        "StartedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "x-go-package": "github.com/demisto/server/util/workers/workersInfo"
    },
    "QueryState": {
      "description": "QueryState represents the playbook query state",
      "type": "object",
      "properties": {
        "batchSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BatchSize"
        },
        "currentPage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CurrentPage"
        },
        "searchAfter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfter"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalResults"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Question": {
      "type": "object",
      "title": "Question - question for a form with a given type.",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GridColumn"
          },
          "x-go-name": "GridColumns"
        },
        "defaultRows": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "x-go-name": "DefaultRows"
        },
        "fieldAssociated": {
          "type": "string",
          "x-go-name": "FieldAssociated"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "labelArg": {
          "$ref": "#/definitions/AdvanceArg"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Options"
        },
        "optionsArg": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "OptionsArg"
        },
        "placeholder": {
          "type": "string",
          "x-go-name": "Placeholder"
        },
        "readOnly": {
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "required": {
          "type": "boolean",
          "x-go-name": "Required"
        },
        "tooltip": {
          "type": "string",
          "x-go-name": "Tooltip"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "QuietMode": {
      "description": "QuietMode quiet mode for playbook task",
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "RBAC": {
      "description": "RBAC holds roles data for domain entities",
      "type": "object",
      "properties": {
        "allRead": {
          "type": "boolean",
          "x-go-name": "IsAllRead"
        },
        "allReadWrite": {
          "type": "boolean",
          "x-go-name": "IsAllReadWrite"
        },
        "dbotCreatedBy": {
          "description": "Who has created this event - relevant only for manual incidents",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "hasRole": {
          "description": "Internal field to make queries on role faster",
          "type": "boolean",
          "x-go-name": "HasRole"
        },
        "previousAllRead": {
          "type": "boolean",
          "x-go-name": "PreviousAllRead"
        },
        "previousAllReadWrite": {
          "type": "boolean",
          "x-go-name": "PreviousAllReadWrite"
        },
        "previousRoles": {
          "description": "Do not change this field manually",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousRoleName"
        },
        "roles": {
          "description": "The role assigned to this investigation",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleName"
        },
        "xsoarHasReadOnlyRole": {
          "type": "boolean",
          "x-go-name": "HasReadOnlyRole"
        },
        "xsoarPreviousReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PreviousReadOnlyRoleName"
        },
        "xsoarReadOnlyRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ReadOnlyRoleName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "RawFeedIndicator": {
      "description": "RawFeedIndicator is an unparsed feed indicator from JSON ingestion",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "RelationshipAPI": {
      "type": "object",
      "title": "RelationshipAPI ...",
      "properties": {
        "brand": {
          "type": "string",
          "x-go-name": "Brand"
        },
        "entityA": {
          "type": "string",
          "x-go-name": "EntityA"
        },
        "entityAFamily": {
          "type": "string",
          "x-go-name": "EntityAFamily"
        },
        "entityB": {
          "type": "string",
          "x-go-name": "EntityB"
        },
        "entityBFamily": {
          "type": "string",
          "x-go-name": "EntityBFamily"
        },
        "fields": {
          "$ref": "#/definitions/CustomFields"
        },
        "instance": {
          "type": "string",
          "x-go-name": "Instance"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "objectTypeA": {
          "type": "string",
          "x-go-name": "ObjectTypeA"
        },
        "objectTypeB": {
          "type": "string",
          "x-go-name": "ObjectTypeB"
        },
        "reliability": {
          "$ref": "#/definitions/Reliability"
        },
        "reverseName": {
          "type": "string",
          "x-go-name": "ReverseName"
        },
        "type": {
          "type": "string",
          "x-go-name": "TypeID"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "RelationshipCommonFields": {
      "type": "object",
      "title": "RelationshipCommonFields ...",
      "properties": {
        "entityA": {
          "type": "string",
          "x-go-name": "EntityA"
        },
        "entityAFamily": {
          "type": "string",
          "x-go-name": "EntityAFamily"
        },
        "entityB": {
          "type": "string",
          "x-go-name": "EntityB"
        },
        "entityBFamily": {
          "type": "string",
          "x-go-name": "EntityBFamily"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "objectTypeA": {
          "type": "string",
          "x-go-name": "ObjectTypeA"
        },
        "objectTypeB": {
          "type": "string",
          "x-go-name": "ObjectTypeB"
        },
        "reverseName": {
          "type": "string",
          "x-go-name": "ReverseName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "RelationshipFilter": {
      "description": "and within each parameter only one or more may match.",
      "type": "object",
      "title": "RelationshipFilter allows filtering on relationship objects. All given parameters must match to return a result,",
      "properties": {
        "Cache": {
          "description": "Cache of join functions",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "entities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Entities"
        },
        "entityTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EntityTypes"
        },
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "fromDateLicense": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDateLicenseVal"
        },
        "ignoreWorkers": {
          "description": "Do not use workers mechanism while searching bleve",
          "type": "boolean",
          "x-go-name": "IgnoreWorkers"
        },
        "objectTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ObjectTypes"
        },
        "page": {
          "description": "0-based page",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "period": {
          "$ref": "#/definitions/Period"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "relationshipNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RelationshipNames"
        },
        "searchAfter": {
          "description": "Efficient next page, pass max sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfter"
        },
        "searchAfterElastic": {
          "description": "Efficient next page, pass max ES sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfterElastic"
        },
        "searchBefore": {
          "description": "Efficient prev page, pass min sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBefore"
        },
        "searchBeforeElastic": {
          "description": "Efficient prev page, pass min ES sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBeforeElastic"
        },
        "size": {
          "description": "Size is limited to 1000, if not passed it defaults to 0, and no results will return",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sort": {
          "description": "The sort order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "x-go-name": "Sort"
        },
        "timeFrame": {
          "$ref": "#/definitions/Duration"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "RelationshipsAPI": {
      "type": "array",
      "title": "RelationshipsAPI ...",
      "items": {
        "$ref": "#/definitions/RelationshipAPI"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Reliability": {
      "type": "string",
      "title": "Reliability ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Report": {
      "description": "Report - represents report",
      "type": "object",
      "properties": {
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "createdBy": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "cron": {
          "type": "string",
          "x-go-name": "Cron"
        },
        "cronView": {
          "type": "boolean",
          "x-go-name": "CronView"
        },
        "dashboard": {
          "$ref": "#/definitions/Dashboard"
        },
        "decoder": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ReportFieldsDecoder"
          },
          "x-go-name": "Decoder"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "disableHeader": {
          "type": "boolean",
          "x-go-name": "DisableHeader"
        },
        "endingDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndingDate"
        },
        "endingType": {
          "$ref": "#/definitions/EndingType"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "humanCron": {
          "$ref": "#/definitions/HumanCron"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "latestReportName": {
          "type": "string",
          "x-go-name": "LatestReportName"
        },
        "latestReportTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LatestReportTime"
        },
        "latestReportUsername": {
          "type": "string",
          "x-go-name": "LatestReportUsername"
        },
        "latestScheduledReportTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LatestScheduledReportTime"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nextScheduledTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "NextScheduledTime"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "orientation": {
          "type": "string",
          "x-go-name": "Orientation"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "paperSize": {
          "type": "string",
          "x-go-name": "PaperSize"
        },
        "prevName": {
          "type": "string",
          "x-go-name": "PrevName"
        },
        "prevType": {
          "type": "string",
          "x-go-name": "PrevType"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Recipients"
        },
        "recurrent": {
          "type": "boolean",
          "x-go-name": "Recurrent"
        },
        "reportType": {
          "type": "string",
          "x-go-name": "ReportType"
        },
        "runOnce": {
          "type": "boolean",
          "x-go-name": "RunOnce"
        },
        "runningUser": {
          "type": "string",
          "x-go-name": "RunningUser"
        },
        "scheduled": {
          "description": "is it scheduled",
          "type": "boolean",
          "x-go-name": "Scheduled"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Section"
          },
          "x-go-name": "Sections"
        },
        "sensitive": {
          "type": "boolean",
          "x-go-name": "Sensitive"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "times": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Times"
        },
        "timezone": {
          "type": "string",
          "x-go-name": "Timezone"
        },
        "timezoneOffset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimezoneOffset"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "userAPIKey": {
          "type": "string",
          "x-go-name": "UserAPIKey"
        },
        "userAPIKeyID": {
          "type": "string",
          "x-go-name": "UserAPIKeyID"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ReportAutomation": {
      "type": "object",
      "title": "ReportAutomation ...",
      "properties": {
        "args": {
          "$ref": "#/definitions/ModuleArgs"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "noEvent": {
          "type": "boolean",
          "x-go-name": "NoEvent"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ReportFieldsDecoder": {
      "type": "object",
      "title": "ReportFieldsDecoder ...",
      "properties": {
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ReportQuery": {
      "type": "object",
      "title": "ReportQuery ...",
      "properties": {
        "customGroupBy": {
          "$ref": "#/definitions/CustomGroups"
        },
        "filter": {
          "type": "object",
          "x-go-name": "Filter"
        },
        "groupBy": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "GroupBy"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Keys"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ReputationCalcAlg": {
      "type": "number",
      "format": "double",
      "title": "ReputationCalcAlg ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ReputationData": {
      "description": "ReputationData holds the reputation data (reputation, regex, highlights result)",
      "type": "object",
      "properties": {
        "rawTerm": {
          "type": "string",
          "x-go-name": "RawTerm"
        },
        "reputation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Reputation"
        },
        "reputationId": {
          "type": "string",
          "x-go-name": "ReputationID"
        },
        "term": {
          "type": "string",
          "x-go-name": "Term"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "RunStatus": {
      "description": "RunStatus of a job",
      "type": "string",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "SLA": {
      "type": "object",
      "title": "SLA ...",
      "properties": {
        "days": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Days"
        },
        "hours": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hours"
        },
        "weeks": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Weeks"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "SLAState": {
      "description": "SLAState is the incident sla at closure time",
      "type": "number",
      "format": "double",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Schedule": {
      "type": "object",
      "title": "Schedule ...",
      "properties": {
        "cron": {
          "type": "string",
          "x-go-name": "Cron"
        },
        "cronView": {
          "type": "boolean",
          "x-go-name": "CronView"
        },
        "endingDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndingDate"
        },
        "endingType": {
          "$ref": "#/definitions/EndingType"
        },
        "humanCron": {
          "$ref": "#/definitions/HumanCron"
        },
        "recurrent": {
          "type": "boolean",
          "x-go-name": "Recurrent"
        },
        "scheduled": {
          "description": "is it scheduled",
          "type": "boolean",
          "x-go-name": "Scheduled"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        },
        "times": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Times"
        },
        "timezone": {
          "type": "string",
          "x-go-name": "Timezone"
        },
        "timezoneOffset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimezoneOffset"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Scheduler": {
      "type": "object",
      "title": "Scheduler ...",
      "properties": {
        "cron": {
          "type": "string",
          "x-go-name": "Cron"
        },
        "cronView": {
          "type": "boolean",
          "x-go-name": "CronView"
        },
        "endingDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndingDate"
        },
        "endingType": {
          "$ref": "#/definitions/EndingType"
        },
        "humanCron": {
          "$ref": "#/definitions/HumanCron"
        },
        "recurrent": {
          "type": "boolean",
          "x-go-name": "Recurrent"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartDate"
        },
        "times": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Times"
        },
        "timezone": {
          "type": "string",
          "x-go-name": "Timezone"
        },
        "timezoneOffset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimezoneOffset"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ScriptAPI": {
      "type": "object",
      "title": "ScriptAPI ...",
      "properties": {
        "arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Argument"
          },
          "x-go-name": "Args"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Comment"
        },
        "contextKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ContextKeys"
        },
        "dependsOn": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "DependsOn"
        },
        "deprecated": {
          "type": "boolean",
          "x-go-name": "Deprecated"
        },
        "detached": {
          "type": "boolean",
          "x-go-name": "Detached"
        },
        "dockerImage": {
          "type": "string",
          "x-go-name": "DockerImage"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "hidden": {
          "type": "boolean",
          "x-go-name": "Hidden"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Output"
          },
          "x-go-name": "Outputs"
        },
        "permitted": {
          "type": "boolean",
          "x-go-name": "Permitted"
        },
        "polling": {
          "type": "boolean",
          "x-go-name": "Polling"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        },
        "runAs": {
          "type": "string",
          "x-go-name": "RunAs"
        },
        "scriptTarget": {
          "$ref": "#/definitions/ScriptTarget"
        },
        "system": {
          "type": "boolean",
          "x-go-name": "System"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "type": {
          "$ref": "#/definitions/ScriptType"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/demisto/server/services/automation"
    },
    "ScriptSubType": {
      "description": "ScriptSubType holds the script type version",
      "type": "string",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ScriptTarget": {
      "description": "ScriptTarget represents the module where this script should run",
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ScriptType": {
      "description": "ScriptType holds the type of a script",
      "type": "string",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "SearchIncidentsData": {
      "type": "object",
      "title": "SearchIncidentsData ...",
      "properties": {
        "filter": {
          "$ref": "#/definitions/IncidentFilter"
        },
        "userFilter": {
          "type": "boolean",
          "x-go-name": "FilterByUser"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "SearchInvestigationsData": {
      "type": "object",
      "title": "SearchInvestigationsData ...",
      "properties": {
        "filter": {
          "$ref": "#/definitions/InvestigationFilter"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "SearchStats": {
      "type": "object",
      "title": "SearchStats ...",
      "properties": {
        "committed": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Committed"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DurationInMilliseconds"
        },
        "fromDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FromDate"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "searchSource": {
          "type": "string",
          "x-go-name": "SearchSource"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "toDate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ToDate"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "SearchStatsDeletionResponse": {
      "description": "SearchStatsDeletionResponse returns the response from deleting old slow searches",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "SearchStatsResponse": {
      "description": "SearchStatsResponse returns the response from getting slow searches",
      "type": "object",
      "properties": {
        "evidences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchStats"
          },
          "x-go-name": "Data"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "Section": {
      "type": "object",
      "title": "Section ...",
      "properties": {
        "autoPageBreak": {
          "type": "boolean",
          "x-go-name": "AutoPageBreak"
        },
        "automation": {
          "$ref": "#/definitions/ReportAutomation"
        },
        "data": {
          "type": "object",
          "x-go-name": "Data"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "displayType": {
          "type": "string",
          "x-go-name": "DisplayType"
        },
        "emptyNotification": {
          "type": "string",
          "x-go-name": "EmptyNotification"
        },
        "fromDate": {
          "type": "string",
          "x-go-name": "FromDate"
        },
        "layout": {
          "type": "object",
          "x-go-name": "Layout"
        },
        "query": {
          "$ref": "#/definitions/ReportQuery"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "titleStyle": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "TitleStyle"
        },
        "toDate": {
          "type": "string",
          "x-go-name": "ToDate"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ServiceUpdateResponse": {
      "description": "ServiceUpdateResponse service update response",
      "type": "object",
      "properties": {
        "Warnings": {
          "description": "Optional warning messages",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "Severity": {
      "description": "Severity is the incident severity",
      "type": "number",
      "format": "double",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "ShardedFields": {
      "type": "object",
      "title": "ShardedFields ...",
      "properties": {
        "ShardID": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "StatsQueryError": {
      "title": "StatsQueryError - Describe the error returned related to a specific widget cell in a dashboard."
    },
    "StatsQueryResponse": {
      "type": "object",
      "title": "StatsQueryResponse - Describe the data returned related to a specific widget cell in a dashboard.",
      "properties": {
        "data": {
          "description": "data array or object describing the statistics data based on type.",
          "type": "object",
          "x-go-name": "Data"
        },
        "widgetCellId": {
          "type": "string",
          "x-go-name": "WidgetCellID"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "StatsQueryResponseWithError": {
      "type": "object",
      "title": "StatsQueryResponseWithError - Describe the data returned related to a specific widget cell in a dashboard including errors.",
      "properties": {
        "StatsQueryError": {
          "$ref": "#/definitions/StatsQueryError"
        },
        "statsQueryResponse": {
          "$ref": "#/definitions/StatsQueryResponse"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "StatsResponseWithReferenceLine": {
      "type": "object",
      "title": "StatsResponseWithReferenceLine - Describe the data returned related to a specific Line/Column chart widget cell in a dashboard.",
      "properties": {
        "groups": {
          "$ref": "#/definitions/Groups"
        },
        "referenceLineY": {
          "type": "number",
          "format": "double",
          "x-go-name": "ReferenceLineY"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "StatsScatterResponse": {
      "type": "object",
      "title": "StatsScatterResponse - Represent a scatter response from statistics.",
      "properties": {
        "data": {
          "$ref": "#/definitions/Groups"
        },
        "rage": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Range"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "StatsTextResponse": {
      "type": "object",
      "title": "StatsTextResponse - Describe the data returned related to a specific text widget cell in a dashboard.",
      "properties": {
        "groups": {
          "$ref": "#/definitions/Groups"
        },
        "text": {
          "description": "Describe the complete text for the text widget, after placeholders injection.",
          "type": "string",
          "x-go-name": "Text"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "StatsTrendsResponse": {
      "description": "StatsTrendsResponse - Represent a trend response from statistics. Provides information about\nthe current value and the previous value based on the period.",
      "type": "object",
      "properties": {
        "currSum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CurrSum"
        },
        "prevSum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrevSum"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "System": {
      "description": "System - URL stands for ip or hostname",
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/SystemAgent"
        },
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "ciphers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Ciphers"
        },
        "credentials": {
          "type": "string",
          "x-go-name": "CredentialsName"
        },
        "engineId": {
          "type": "string",
          "x-go-name": "EngineID"
        },
        "host": {
          "type": "string",
          "x-go-name": "Host"
        },
        "integrationinstanceid": {
          "type": "string",
          "x-go-name": "IntegrationInstanceID"
        },
        "issharedagent": {
          "type": "boolean",
          "x-go-name": "IsSharedAgent"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "os": {
          "type": "string",
          "x-go-name": "OS"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "servicesID": {
          "type": "string",
          "x-go-name": "ServicesID"
        },
        "smb": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SMBv"
        },
        "smbport": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "SMBPort"
        },
        "sshkey": {
          "type": "string",
          "x-go-name": "SSHKey"
        },
        "sshport": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "SSHPort"
        },
        "terminalOptions": {
          "$ref": "#/definitions/TerminalOptions"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        },
        "workgroup": {
          "type": "string",
          "x-go-name": "Workgroup"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "SystemAgent": {
      "description": "SystemAgent - represents agent status and holds server context",
      "type": "object",
      "properties": {
        "servercontext": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ServerContext"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Task": {
      "description": "Task is the basic task in the task repository that can be associated to an incident via playbook",
      "type": "object",
      "properties": {
        "brand": {
          "type": "string",
          "x-go-name": "Brand"
        },
        "clonedFrom": {
          "type": "string",
          "x-go-name": "ClonedFrom"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Comment"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ConditionnKeys"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isCommand": {
          "type": "boolean",
          "x-go-name": "IsCommand"
        },
        "isLocked": {
          "type": "boolean",
          "x-go-name": "IsLocked"
        },
        "isTitleTask": {
          "type": "boolean",
          "x-go-name": "IsTitleTask"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "playbookId": {
          "type": "string",
          "x-go-name": "PlaybookID"
        },
        "playbookName": {
          "type": "string",
          "x-go-name": "PlaybookName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "scriptId": {
          "type": "string",
          "x-go-name": "AutomationScriptID"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "type": {
          "$ref": "#/definitions/TaskType"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TaskCondition": {
      "description": "TaskCondition - contains a condition and a corresponding label\nif the condition satisfied - its label is taken as the next task(s) input (e.i. the label on the edge)",
      "type": "object",
      "properties": {
        "condition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgFilter"
          },
          "x-go-name": "Condition"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TaskLoop": {
      "description": "TaskLoop contains loop details",
      "type": "object",
      "properties": {
        "brand": {
          "type": "string",
          "x-go-name": "Brand"
        },
        "builtinCondition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgFilter"
          },
          "x-go-name": "BuiltInCondition"
        },
        "exitCondition": {
          "type": "string",
          "x-go-name": "ExitCondition"
        },
        "forEach": {
          "type": "boolean",
          "x-go-name": "ForEach"
        },
        "isCommand": {
          "type": "boolean",
          "x-go-name": "IsCommand"
        },
        "max": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxIterations"
        },
        "scriptArguments": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "ScriptArguments"
        },
        "scriptId": {
          "type": "string",
          "x-go-name": "AutomationScriptID"
        },
        "scriptName": {
          "type": "string",
          "x-go-name": "AutomationScriptName"
        },
        "wait": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "WaitBetweenIterations"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TaskState": {
      "description": "TaskState indicates the state of the task during the incident/investigation execution",
      "type": "string",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TaskType": {
      "description": "TaskType is the Task in the playbook context as a node",
      "type": "string",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TaskView": {
      "description": "TaskView represents the view in client of the tasks graph",
      "type": "object",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TermLocationMap": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Locations"
      },
      "x-go-package": "github.com/blevesearch/bleve/v2/search"
    },
    "TerminalOptions": {
      "description": "TerminalOptions - terminal options to use in case of using pty",
      "type": "object",
      "properties": {
        "Echo": {
          "type": "integer",
          "format": "uint32"
        },
        "Terminal": {
          "type": "boolean"
        },
        "TerminalHeight": {
          "type": "integer",
          "format": "int64"
        },
        "TerminalType": {
          "type": "string"
        },
        "TerminalWidth": {
          "type": "integer",
          "format": "int64"
        },
        "TyISpeed": {
          "type": "integer",
          "format": "uint32"
        },
        "TyOSpeed": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TimerAction": {
      "type": "string",
      "title": "TimerAction ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TimerTrigger": {
      "type": "object",
      "title": "TimerTrigger ...",
      "properties": {
        "action": {
          "$ref": "#/definitions/TimerAction"
        },
        "fieldName": {
          "type": "string",
          "x-go-name": "FieldName"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TransformerOperatorID": {
      "type": "string",
      "title": "TransformerOperatorID ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "TypeAndKind": {
      "description": "TypeAndKind - corresponding incident type \u0026 layout kind (details, edit, close, mobile...)",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "typeId": {
          "type": "string",
          "x-go-name": "TypeID"
        }
      },
      "x-go-package": "github.com/demisto/server/olddomain"
    },
    "UnclassifiedCases": {
      "type": "object",
      "title": "UnclassifiedCases ...",
      "additionalProperties": {
        "type": "integer",
        "format": "int64"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "UpdateDataBatch": {
      "type": "object",
      "title": "UpdateDataBatch ...",
      "properties": {
        "CustomFields": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "all": {
          "type": "boolean",
          "x-go-name": "All"
        },
        "closeNotes": {
          "type": "string",
          "x-go-name": "CloseNotes"
        },
        "closeReason": {
          "type": "string",
          "x-go-name": "CloseReason"
        },
        "columns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Columns"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Data"
        },
        "filter": {
          "$ref": "#/definitions/IncidentFilter"
        },
        "force": {
          "type": "boolean",
          "x-go-name": "Force"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IDs"
        },
        "line": {
          "type": "string",
          "x-go-name": "Line"
        },
        "originalIncidentId": {
          "type": "string",
          "x-go-name": "OriginalIncidentID"
        },
        "overrideInvestigation": {
          "type": "boolean",
          "x-go-name": "OverrideInvestigation"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "UpdateIndicatorBatch": {
      "description": "UpdateIndicatorBatch - edit bulk indicators",
      "type": "object",
      "properties": {
        "all": {
          "type": "boolean",
          "x-go-name": "All"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Data"
        },
        "filter": {
          "$ref": "#/definitions/IndicatorFilter"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IDs"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "UpdateResponse": {
      "type": "object",
      "title": "UpdateResponse ...",
      "properties": {
        "notUpdated": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotUpdated"
        },
        "updatedIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "UpdatedIds"
        }
      },
      "x-go-package": "github.com/demisto/server/repo/entities"
    },
    "Version": {
      "type": "object",
      "title": "Version represents a version.",
      "properties": {
        "Digits": {
          "description": "WARNING: when adding new attributes or changing the names\nof the existing ones, remember to add support in UnmarshalJSON\nfor items that were exported by msgpack.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "Label": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "VersionedCommit": {
      "type": "object",
      "title": "VersionedCommit holds the commit info.",
      "properties": {
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Volume": {
      "description": "Volume volume",
      "type": "object",
      "required": [
        "Driver",
        "Labels",
        "Mountpoint",
        "Name",
        "Options",
        "Scope"
      ],
      "properties": {
        "CreatedAt": {
          "description": "Date/Time the volume was created.",
          "type": "string"
        },
        "Driver": {
          "description": "Name of the volume driver used by the volume.",
          "type": "string"
        },
        "Labels": {
          "description": "User-defined key/value metadata.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Mountpoint": {
          "description": "Mount path of the volume on the host.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the volume.",
          "type": "string"
        },
        "Options": {
          "description": "The driver specific options used when creating the volume.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Scope": {
          "description": "The level at which the volume exists. Either `global` for cluster-wide,\nor `local` for machine level.",
          "type": "string"
        },
        "Status": {
          "description": "Low-level details about the volume, provided by the volume driver.\nDetails are returned as a map with key/value pairs:\n`{\"key\":\"value\",\"key2\":\"value2\"}`.\n\nThe `Status` field is optional, and is omitted if the volume driver\ndoes not support this feature.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "UsageData": {
          "$ref": "#/definitions/VolumeUsageData"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "VolumeUsageData": {
      "description": "VolumeUsageData Usage details about the volume. This information is used by the\n`GET /system/df` endpoint, and omitted in other endpoints.",
      "type": "object",
      "required": [
        "RefCount",
        "Size"
      ],
      "properties": {
        "RefCount": {
          "description": "The number of containers referencing this volume. This field\nis set to `-1` if the reference-count is not available.",
          "type": "integer",
          "format": "int64"
        },
        "Size": {
          "description": "Amount of disk space used by the volume (in bytes). This information\nis only available for volumes created with the `\"local\"` volume\ndriver. For volumes created with other volume drivers, this field\nis set to `-1` (\"not available\")",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types"
    },
    "WhitelistedIndicator": {
      "description": "WhitelistedIndicator Excluded indicator",
      "type": "object",
      "properties": {
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "locked": {
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "reason": {
          "type": "string",
          "x-go-name": "Reason"
        },
        "reputations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Reputations"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "whitelistTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "WhitelistTime"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "Widget": {
      "description": "Widget describe a widget component used to get statistics requests, based on parameters such as\ndataType and widgetType. A widget can be a part of widgets collection inside a dashboard.",
      "type": "object",
      "required": [
        "name",
        "widgetType"
      ],
      "properties": {
        "category": {
          "description": "Category the widget is related to. Used to display in widget library under category or dataType if empty.",
          "type": "string",
          "x-go-name": "Category"
        },
        "commitMessage": {
          "type": "string",
          "x-go-name": "CommitMessage"
        },
        "dataType": {
          "description": "Data type of the widget. Describes what data does the widget query. supporting data types \"incidents\",\"messages\",\"system\",\"entries\",\"tasks\", \"audit\".",
          "type": "string",
          "x-go-name": "DataType"
        },
        "dateRange": {
          "$ref": "#/definitions/DateRange"
        },
        "description": {
          "description": "The description of the widget's usage and data representation.",
          "type": "string",
          "x-go-name": "Description"
        },
        "fromServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "highlight": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-go-name": "Highlight"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isPredefined": {
          "description": "Is the widget a system widget.",
          "type": "boolean",
          "x-go-name": "IsPredefined"
        },
        "itemVersion": {
          "$ref": "#/definitions/Version"
        },
        "locked": {
          "description": "Is the widget locked for editing.",
          "type": "boolean",
          "x-go-name": "Locked"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "name": {
          "description": "Default name of the widget.",
          "type": "string",
          "x-go-name": "Name"
        },
        "numericId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumericID"
        },
        "packID": {
          "type": "string",
          "x-go-name": "PackID"
        },
        "packPropagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PackPropagationLabels"
        },
        "params": {
          "description": "Additional parameters for this widget, depends on widget type and data.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "AdditionalParams"
        },
        "prevName": {
          "description": "The previous name of the widget.",
          "type": "string",
          "x-go-name": "PrevName"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "propagationLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PropagationLabels"
        },
        "query": {
          "description": "Query to search on the dataType.",
          "type": "string",
          "x-go-name": "Query"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "shouldCommit": {
          "type": "boolean",
          "x-go-name": "ShouldCommit"
        },
        "size": {
          "description": "Maximum size for this widget data returned.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sort": {
          "description": "Sorting array to sort the data received by the given Order parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "x-go-name": "Sort"
        },
        "sortValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SortValues"
        },
        "toServerVersion": {
          "$ref": "#/definitions/Version"
        },
        "vcShouldIgnore": {
          "type": "boolean",
          "x-go-name": "VCShouldIgnore"
        },
        "vcShouldKeepItemLegacyProdMachine": {
          "type": "boolean",
          "x-go-name": "VCShouldKeepItemLegacyProdMachine"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        },
        "widgetType": {
          "description": "Widget type describes how does the widget should recieve the data, and display it. Supporting types: \"bar\", \"column\", \"pie\", \"list\", \"number\", \"trend\", \"text\", \"duration\", \"image\", \"line\", and \"table\".",
          "type": "string",
          "x-go-name": "WidgetType"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "WidgetCell": {
      "type": "object",
      "title": "WidgetCell ...",
      "properties": {
        "forceRange": {
          "type": "boolean",
          "x-go-name": "ForceRange"
        },
        "h": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Height"
        },
        "i": {
          "type": "string",
          "x-go-name": "Key"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "w": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Width"
        },
        "widget": {
          "$ref": "#/definitions/Widget"
        },
        "x": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Xs"
        },
        "y": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ys"
        }
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "WidgetCells": {
      "type": "array",
      "title": "WidgetCells ...",
      "items": {
        "$ref": "#/definitions/WidgetCell"
      },
      "x-go-package": "github.com/demisto/server/domain"
    },
    "WithCustomFields": {
      "type": "object",
      "title": "WithCustomFields ...",
      "x-go-package": "github.com/demisto/server/domain"
    },
    "auditResult": {
      "type": "object",
      "properties": {
        "audits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Audit"
          },
          "x-go-name": "Audits"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "automationScriptFilter": {
      "description": "automationScriptFilter is a general filter that fetches entities using a query string query using the Query value",
      "type": "object",
      "properties": {
        "Cache": {
          "description": "Cache of join functions",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "ignoreWorkers": {
          "description": "Do not use workers mechanism while searching bleve",
          "type": "boolean",
          "x-go-name": "IgnoreWorkers"
        },
        "page": {
          "description": "0-based page",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "searchAfter": {
          "description": "Efficient next page, pass max sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfter"
        },
        "searchAfterElastic": {
          "description": "Efficient next page, pass max ES sort value from previous page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchAfterElastic"
        },
        "searchBefore": {
          "description": "Efficient prev page, pass min sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBefore"
        },
        "searchBeforeElastic": {
          "description": "Efficient prev page, pass min ES sort value from next page",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SearchBeforeElastic"
        },
        "size": {
          "description": "Size is limited to 1000, if not passed it defaults to 0, and no results will return",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "sort": {
          "description": "The sort order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "x-go-name": "Sort"
        },
        "stripContext": {
          "type": "boolean",
          "x-go-name": "StripContext"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "automationScriptFilterWrapper": {
      "type": "object",
      "title": "automationScriptFilterWrapper ...",
      "properties": {
        "filter": {
          "$ref": "#/definitions/GenericStringFilter"
        },
        "savePassword": {
          "type": "boolean",
          "x-go-name": "StorePassword"
        },
        "script": {
          "$ref": "#/definitions/AutomationScript"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "automationScriptResult": {
      "type": "object",
      "title": "automationScriptResult ...",
      "properties": {
        "pythonEnabled": {
          "type": "boolean",
          "x-go-name": "PythonEnabled"
        },
        "scripts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptAPI"
          },
          "x-go-name": "Scripts"
        },
        "selectedScript": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "SelectedScript"
        },
        "suggestions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "containersInfo": {
      "description": "Info - holds all containers info",
      "type": "object",
      "properties": {
        "all": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "All"
        },
        "inactive": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Inactive"
        },
        "running": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Running"
        }
      },
      "x-go-name": "Info",
      "x-go-package": "github.com/demisto/server/services/containers/containersInfo"
    },
    "deleteEvidence": {
      "type": "object",
      "properties": {
        "evidenceID": {
          "type": "string",
          "x-go-name": "EvidenceID"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "evidencesFilterWrapper": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/GenericStringDateFilter"
        },
        "incidentID": {
          "type": "string",
          "x-go-name": "IncidentID"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "genericIndicatorUpdateBatch": {
      "type": "object",
      "properties": {
        "all": {
          "type": "boolean",
          "x-go-name": "All"
        },
        "columns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Columns"
        },
        "doNotWhitelist": {
          "type": "boolean",
          "x-go-name": "DoNotWhitelist"
        },
        "filter": {
          "$ref": "#/definitions/IndicatorFilter"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IDs"
        },
        "reason": {
          "type": "string",
          "x-go-name": "Reason"
        },
        "reputations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Reputations"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "idVersion": {},
    "incidentFieldsWithErrors": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "incidentFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncidentField"
          },
          "x-go-name": "IncidentFields"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "incidentTypesWithErrors": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "incidentTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncidentType"
          },
          "x-go-name": "IncidentTypes"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "indicatorContext": {
      "type": "object",
      "properties": {
        "entryId": {
          "type": "string",
          "x-go-name": "EntryID"
        },
        "indicator": {
          "$ref": "#/definitions/IocObject"
        },
        "investigationId": {
          "type": "string",
          "x-go-name": "InvestigationID"
        },
        "manually": {
          "type": "boolean",
          "x-go-name": "Manually"
        },
        "seenNow": {
          "type": "boolean",
          "x-go-name": "SeenNow"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "invPlaybookAssignee": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "x-go-name": "Assignee"
        },
        "inTaskID": {
          "type": "string",
          "x-go-name": "TaskID"
        },
        "invId": {
          "type": "string",
          "x-go-name": "ID"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "invPlaybookDue": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "inTaskID": {
          "type": "string",
          "x-go-name": "TaskID"
        },
        "invId": {
          "type": "string",
          "x-go-name": "ID"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "invTaskInfo": {
      "type": "object",
      "properties": {
        "args": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "Args"
        },
        "comment": {
          "type": "string",
          "x-go-name": "Comment"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskCondition"
          },
          "x-go-name": "Conditions"
        },
        "inTaskID": {
          "type": "string",
          "x-go-name": "TaskID"
        },
        "input": {
          "type": "string",
          "x-go-name": "Input"
        },
        "invId": {
          "type": "string",
          "x-go-name": "ID"
        },
        "loopArgs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "LoopArgs"
        },
        "loopCondition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgFilter"
          },
          "x-go-name": "LoopCondition"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "playbookWithWarnings": {
      "type": "object",
      "properties": {
        "playbook": {
          "$ref": "#/definitions/Playbook"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Warnings"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "tagsFieldValues": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "updateEntry": {
      "type": "object",
      "properties": {
        "args": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AdvanceArg"
          },
          "x-go-name": "Args"
        },
        "data": {
          "type": "string",
          "x-go-name": "Data"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "investigationId": {
          "type": "string",
          "x-go-name": "InvestigationID"
        },
        "markdown": {
          "type": "boolean",
          "x-go-name": "Markdown"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "updateEntryTags": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "investigationId": {
          "type": "string",
          "x-go-name": "InvestigationID"
        },
        "primaryTerm": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrimaryTerm"
        },
        "sequenceNumber": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SeqNum"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Versn"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "updateIndicatorReputationData": {
      "type": "object",
      "properties": {
        "InvestigationId": {
          "type": "string",
          "x-go-name": "InvID"
        },
        "doNotWhitelist": {
          "type": "boolean",
          "x-go-name": "DoNotWhitelist"
        },
        "entryId": {
          "type": "string",
          "x-go-name": "EntryID"
        },
        "manualScore": {
          "type": "boolean",
          "x-go-name": "ManualScore"
        },
        "reason": {
          "type": "string",
          "x-go-name": "Reason"
        },
        "reputation": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Reputation"
        },
        "reputations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Reputations"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    },
    "uploadedEntry": {
      "type": "object",
      "properties": {
        "contents": {
          "type": "string",
          "x-go-name": "Contents"
        },
        "format": {
          "type": "string",
          "x-go-name": "ContentsFormat"
        },
        "investigationId": {
          "type": "string",
          "x-go-name": "InvestigationID"
        }
      },
      "x-go-package": "github.com/demisto/server/web"
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ]
}