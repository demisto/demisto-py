# coding: utf-8

"""
    Demisto API

    This is the public REST API to integrate with the demisto server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Demisto web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Demisto REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Demisto server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Demisto has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Demisto will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import demisto
from demisto.api.demisto_api import DemistoApi  # noqa: E501
from demisto.rest import ApiException


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        self.api = demisto.api.demisto_api.DemistoApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_ad_hoc_task(self):
        """Test case for add_ad_hoc_task

        Add ad-hoc task  # noqa: E501
        """
        pass

    def test_close_incidents_batch(self):
        """Test case for close_incidents_batch

        Batch close incidents  # noqa: E501
        """
        pass

    def test_complete_task(self):
        """Test case for complete_task

        [Deprecated] Complete a task  # noqa: E501
        """
        pass

    def test_complete_task_v2(self):
        """Test case for complete_task_v2

        Complete a task  # noqa: E501
        """
        pass

    def test_copy_script(self):
        """Test case for copy_script

        Copy automation  # noqa: E501
        """
        pass

    def test_create_docker_image(self):
        """Test case for create_docker_image

        Create Image  # noqa: E501
        """
        pass

    def test_create_incident(self):
        """Test case for create_incident

        Create single incident  # noqa: E501
        """
        pass

    def test_create_incident_json(self):
        """Test case for create_incident_json

        Create incident from JSON  # noqa: E501
        """
        pass

    def test_create_incidents_batch(self):
        """Test case for create_incidents_batch

        Batch create incidents  # noqa: E501
        """
        pass

    def test_create_or_update_incident_type(self):
        """Test case for create_or_update_incident_type

        Create new Incident Type  # noqa: E501
        """
        pass

    def test_delete_ad_hoc_task(self):
        """Test case for delete_ad_hoc_task

        Delete ad-hoc task  # noqa: E501
        """
        pass

    def test_delete_automation_script(self):
        """Test case for delete_automation_script

        Delete existing automation  # noqa: E501
        """
        pass

    def test_delete_evidence_op(self):
        """Test case for delete_evidence_op

        delete evidence  # noqa: E501
        """
        pass

    def test_delete_incidents_batch(self):
        """Test case for delete_incidents_batch

        Batch delete incidents  # noqa: E501
        """
        pass

    def test_delete_indicators_batch(self):
        """Test case for delete_indicators_batch

        Batch whitelist or delete indicators  # noqa: E501
        """
        pass

    def test_delete_widget(self):
        """Test case for delete_widget

        Remove existing widget  # noqa: E501
        """
        pass

    def test_download_latest_report(self):
        """Test case for download_latest_report

        Get latest report by ID  # noqa: E501
        """
        pass

    def test_edit_ad_hoc_task(self):
        """Test case for edit_ad_hoc_task

        Edit ad-hoc task  # noqa: E501
        """
        pass

    def test_entry_export_artifact(self):
        """Test case for entry_export_artifact

        Export Artifact  # noqa: E501
        """
        pass

    def test_execute_report(self):
        """Test case for execute_report

        Execute report  # noqa: E501
        """
        pass

    def test_export_incidents_to_csv_batch(self):
        """Test case for export_incidents_to_csv_batch

        Batch export incidents to csv  # noqa: E501
        """
        pass

    def test_export_indicators_to_csv_batch(self):
        """Test case for export_indicators_to_csv_batch

        Batch export indicators to csv  # noqa: E501
        """
        pass

    def test_export_indicators_to_stix_batch(self):
        """Test case for export_indicators_to_stix_batch

        Batch export indicators to STIX  # noqa: E501
        """
        pass

    def test_get_all_reports(self):
        """Test case for get_all_reports

        Get all reports  # noqa: E501
        """
        pass

    def test_get_all_widgets(self):
        """Test case for get_all_widgets

        """
        pass

    def test_get_audits(self):
        """Test case for get_audits

        Get Audits  # noqa: E501
        """
        pass

    def test_get_automation_script(self):
        """Test case for get_automation_script

        Load Automation  # noqa: E501
        """
        pass

    def test_get_automation_scripts(self):
        """Test case for get_automation_scripts

        Search Automation (aka scripts)  # noqa: E501
        """
        pass

    def test_get_docker_images(self):
        """Test case for get_docker_images

        Get Docker Images  # noqa: E501
        """
        pass

    def test_get_entry_artifact(self):
        """Test case for get_entry_artifact

        Get entry artifact  # noqa: E501
        """
        pass

    def test_get_incident_as_csv(self):
        """Test case for get_incident_as_csv

        Get incident as CSV  # noqa: E501
        """
        pass

    def test_get_incidents_fields_by_incident_type(self):
        """Test case for get_incidents_fields_by_incident_type

        Get all incident fields associated with incident type  # noqa: E501
        """
        pass

    def test_get_indicators_as_csv(self):
        """Test case for get_indicators_as_csv

        Get indicators as CSV  # noqa: E501
        """
        pass

    def test_get_indicators_as_stix(self):
        """Test case for get_indicators_as_stix

        Get indicators as STIX V2  # noqa: E501
        """
        pass

    def test_get_report_by_id(self):
        """Test case for get_report_by_id

        Get report by ID  # noqa: E501
        """
        pass

    def test_get_stats_for_dashboard(self):
        """Test case for get_stats_for_dashboard

        Get Dashboard Statistics  # noqa: E501
        """
        pass

    def test_get_stats_for_widget(self):
        """Test case for get_stats_for_widget

        Get Widget Statistics  # noqa: E501
        """
        pass

    def test_get_widget(self):
        """Test case for get_widget

        Get widget by ID  # noqa: E501
        """
        pass

    def test_import_widget(self):
        """Test case for import_widget

        Import a widget  # noqa: E501
        """
        pass

    def test_indicator_whitelist(self):
        """Test case for indicator_whitelist

        Whitelists or deletes Indicator  # noqa: E501
        """
        pass

    def test_indicators_create(self):
        """Test case for indicators_create

        Create Indicator  # noqa: E501
        """
        pass

    def test_indicators_create_batch(self):
        """Test case for indicators_create_batch

        Create indicators  # noqa: E501
        """
        pass

    def test_indicators_edit(self):
        """Test case for indicators_edit

        Edit Indicator  # noqa: E501
        """
        pass

    def test_indicators_search(self):
        """Test case for indicators_search

        Search indicators  # noqa: E501
        """
        pass

    def test_investigation_add_entry_handler(self):
        """Test case for investigation_add_entry_handler

        Create new entry in existing investigation  # noqa: E501
        """
        pass

    def test_investigation_add_formatted_entry_handler(self):
        """Test case for investigation_add_formatted_entry_handler

        Create new formatted entry in existing investigation  # noqa: E501
        """
        pass

    def test_revoke_user_api_key(self):
        """Test case for revoke_user_api_key

        """
        pass

    def test_save_evidence(self):
        """Test case for save_evidence

        Save evidence  # noqa: E501
        """
        pass

    def test_save_or_update_script(self):
        """Test case for save_or_update_script

        Create or update automation  # noqa: E501
        """
        pass

    def test_save_widget(self):
        """Test case for save_widget

        Add or update a widget  # noqa: E501
        """
        pass

    def test_search_evidence(self):
        """Test case for search_evidence

        Search evidence  # noqa: E501
        """
        pass

    def test_search_incidents(self):
        """Test case for search_incidents

        Search incidents by filter  # noqa: E501
        """
        pass

    def test_search_investigations(self):
        """Test case for search_investigations

        Search investigations by filter  # noqa: E501
        """
        pass

    def test_simple_complete_task(self):
        """Test case for simple_complete_task

        Complete task simple (no file)  # noqa: E501
        """
        pass

    def test_submit_task_form(self):
        """Test case for submit_task_form

        Complete a task  # noqa: E501
        """
        pass

    def test_task_add_comment(self):
        """Test case for task_add_comment

        Task add comment  # noqa: E501
        """
        pass

    def test_task_assign(self):
        """Test case for task_assign

        Assign task  # noqa: E501
        """
        pass

    def test_task_set_due(self):
        """Test case for task_set_due

        Set task due date  # noqa: E501
        """
        pass

    def test_task_un_complete(self):
        """Test case for task_un_complete

        Un complete a task  # noqa: E501
        """
        pass

    def test_update_entry_note(self):
        """Test case for update_entry_note

        Mark entry as note  # noqa: E501
        """
        pass

    def test_update_entry_tags_op(self):
        """Test case for update_entry_tags_op

        Set entry tags  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
