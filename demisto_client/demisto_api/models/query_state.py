# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QueryState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_size': 'int',
        'current_page': 'int',
        'search_after': 'list[str]',
        'total_results': 'int'
    }

    attribute_map = {
        'batch_size': 'batchSize',
        'current_page': 'currentPage',
        'search_after': 'searchAfter',
        'total_results': 'totalResults'
    }

    def __init__(self, batch_size=None, current_page=None, search_after=None, total_results=None):  # noqa: E501
        """QueryState - a model defined in Swagger"""  # noqa: E501

        self._batch_size = None
        self._current_page = None
        self._search_after = None
        self._total_results = None
        self.discriminator = None

        if batch_size is not None:
            self.batch_size = batch_size
        if current_page is not None:
            self.current_page = current_page
        if search_after is not None:
            self.search_after = search_after
        if total_results is not None:
            self.total_results = total_results

    @property
    def batch_size(self):
        """Gets the batch_size of this QueryState.  # noqa: E501


        :return: The batch_size of this QueryState.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this QueryState.


        :param batch_size: The batch_size of this QueryState.  # noqa: E501
        :type: int
        """

        self._batch_size = batch_size

    @property
    def current_page(self):
        """Gets the current_page of this QueryState.  # noqa: E501


        :return: The current_page of this QueryState.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this QueryState.


        :param current_page: The current_page of this QueryState.  # noqa: E501
        :type: int
        """

        self._current_page = current_page

    @property
    def search_after(self):
        """Gets the search_after of this QueryState.  # noqa: E501


        :return: The search_after of this QueryState.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_after

    @search_after.setter
    def search_after(self, search_after):
        """Sets the search_after of this QueryState.


        :param search_after: The search_after of this QueryState.  # noqa: E501
        :type: list[str]
        """

        self._search_after = search_after

    @property
    def total_results(self):
        """Gets the total_results of this QueryState.  # noqa: E501


        :return: The total_results of this QueryState.  # noqa: E501
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this QueryState.


        :param total_results: The total_results of this QueryState.  # noqa: E501
        :type: int
        """

        self._total_results = total_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
