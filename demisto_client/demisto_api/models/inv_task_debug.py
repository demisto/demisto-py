# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.arg_filter import ArgFilter  # noqa: F401,E501


class InvTaskDebug(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'breakpoint_condition': 'ArgFilter',
        'is_marked_with_breakpoint': 'bool',
        'is_marked_with_skip': 'bool',
        'should_override_debug_info': 'bool',
        'skip_condition_override_to': 'str',
        'task_original_id': 'str'
    }

    attribute_map = {
        'breakpoint_condition': 'breakpointCondition',
        'is_marked_with_breakpoint': 'isMarkedWithBreakpoint',
        'is_marked_with_skip': 'isMarkedWithSkip',
        'should_override_debug_info': 'shouldOverrideDebugInfo',
        'skip_condition_override_to': 'skipConditionOverrideTo',
        'task_original_id': 'taskOriginalId'
    }

    def __init__(self, breakpoint_condition=None, is_marked_with_breakpoint=None, is_marked_with_skip=None, should_override_debug_info=None, skip_condition_override_to=None, task_original_id=None):  # noqa: E501
        """InvTaskDebug - a model defined in Swagger"""  # noqa: E501

        self._breakpoint_condition = None
        self._is_marked_with_breakpoint = None
        self._is_marked_with_skip = None
        self._should_override_debug_info = None
        self._skip_condition_override_to = None
        self._task_original_id = None
        self.discriminator = None

        if breakpoint_condition is not None:
            self.breakpoint_condition = breakpoint_condition
        if is_marked_with_breakpoint is not None:
            self.is_marked_with_breakpoint = is_marked_with_breakpoint
        if is_marked_with_skip is not None:
            self.is_marked_with_skip = is_marked_with_skip
        if should_override_debug_info is not None:
            self.should_override_debug_info = should_override_debug_info
        if skip_condition_override_to is not None:
            self.skip_condition_override_to = skip_condition_override_to
        if task_original_id is not None:
            self.task_original_id = task_original_id

    @property
    def breakpoint_condition(self):
        """Gets the breakpoint_condition of this InvTaskDebug.  # noqa: E501


        :return: The breakpoint_condition of this InvTaskDebug.  # noqa: E501
        :rtype: ArgFilter
        """
        return self._breakpoint_condition

    @breakpoint_condition.setter
    def breakpoint_condition(self, breakpoint_condition):
        """Sets the breakpoint_condition of this InvTaskDebug.


        :param breakpoint_condition: The breakpoint_condition of this InvTaskDebug.  # noqa: E501
        :type: ArgFilter
        """

        self._breakpoint_condition = breakpoint_condition

    @property
    def is_marked_with_breakpoint(self):
        """Gets the is_marked_with_breakpoint of this InvTaskDebug.  # noqa: E501


        :return: The is_marked_with_breakpoint of this InvTaskDebug.  # noqa: E501
        :rtype: bool
        """
        return self._is_marked_with_breakpoint

    @is_marked_with_breakpoint.setter
    def is_marked_with_breakpoint(self, is_marked_with_breakpoint):
        """Sets the is_marked_with_breakpoint of this InvTaskDebug.


        :param is_marked_with_breakpoint: The is_marked_with_breakpoint of this InvTaskDebug.  # noqa: E501
        :type: bool
        """

        self._is_marked_with_breakpoint = is_marked_with_breakpoint

    @property
    def is_marked_with_skip(self):
        """Gets the is_marked_with_skip of this InvTaskDebug.  # noqa: E501


        :return: The is_marked_with_skip of this InvTaskDebug.  # noqa: E501
        :rtype: bool
        """
        return self._is_marked_with_skip

    @is_marked_with_skip.setter
    def is_marked_with_skip(self, is_marked_with_skip):
        """Sets the is_marked_with_skip of this InvTaskDebug.


        :param is_marked_with_skip: The is_marked_with_skip of this InvTaskDebug.  # noqa: E501
        :type: bool
        """

        self._is_marked_with_skip = is_marked_with_skip

    @property
    def should_override_debug_info(self):
        """Gets the should_override_debug_info of this InvTaskDebug.  # noqa: E501


        :return: The should_override_debug_info of this InvTaskDebug.  # noqa: E501
        :rtype: bool
        """
        return self._should_override_debug_info

    @should_override_debug_info.setter
    def should_override_debug_info(self, should_override_debug_info):
        """Sets the should_override_debug_info of this InvTaskDebug.


        :param should_override_debug_info: The should_override_debug_info of this InvTaskDebug.  # noqa: E501
        :type: bool
        """

        self._should_override_debug_info = should_override_debug_info

    @property
    def skip_condition_override_to(self):
        """Gets the skip_condition_override_to of this InvTaskDebug.  # noqa: E501


        :return: The skip_condition_override_to of this InvTaskDebug.  # noqa: E501
        :rtype: str
        """
        return self._skip_condition_override_to

    @skip_condition_override_to.setter
    def skip_condition_override_to(self, skip_condition_override_to):
        """Sets the skip_condition_override_to of this InvTaskDebug.


        :param skip_condition_override_to: The skip_condition_override_to of this InvTaskDebug.  # noqa: E501
        :type: str
        """

        self._skip_condition_override_to = skip_condition_override_to

    @property
    def task_original_id(self):
        """Gets the task_original_id of this InvTaskDebug.  # noqa: E501


        :return: The task_original_id of this InvTaskDebug.  # noqa: E501
        :rtype: str
        """
        return self._task_original_id

    @task_original_id.setter
    def task_original_id(self, task_original_id):
        """Sets the task_original_id of this InvTaskDebug.


        :param task_original_id: The task_original_id of this InvTaskDebug.  # noqa: E501
        :type: str
        """

        self._task_original_id = task_original_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvTaskDebug, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvTaskDebug):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
