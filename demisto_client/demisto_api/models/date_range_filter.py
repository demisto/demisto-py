# coding: utf-8

"""
    Demisto API

    This is the public REST API to integrate with the demisto server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Demisto web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Demisto REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Demisto server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Demisto has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Demisto will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.duration import Duration  # noqa: F401,E501
from demisto_client.demisto_api.models.period import Period  # noqa: F401,E501


class DateRangeFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_date': 'datetime',
        'from_date_license': 'datetime',
        'period': 'Period',
        'time_frame': 'Duration',
        'to_date': 'datetime'
    }

    attribute_map = {
        'from_date': 'fromDate',
        'from_date_license': 'fromDateLicense',
        'period': 'period',
        'time_frame': 'timeFrame',
        'to_date': 'toDate'
    }

    def __init__(self, from_date=None, from_date_license=None, period=None, time_frame=None, to_date=None):  # noqa: E501
        """DateRangeFilter - a model defined in Swagger"""  # noqa: E501

        self._from_date = None
        self._from_date_license = None
        self._period = None
        self._time_frame = None
        self._to_date = None
        self.discriminator = None

        if from_date is not None:
            self.from_date = from_date
        if from_date_license is not None:
            self.from_date_license = from_date_license
        if period is not None:
            self.period = period
        if time_frame is not None:
            self.time_frame = time_frame
        if to_date is not None:
            self.to_date = to_date

    @property
    def from_date(self):
        """Gets the from_date of this DateRangeFilter.  # noqa: E501


        :return: The from_date of this DateRangeFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this DateRangeFilter.


        :param from_date: The from_date of this DateRangeFilter.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def from_date_license(self):
        """Gets the from_date_license of this DateRangeFilter.  # noqa: E501


        :return: The from_date_license of this DateRangeFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date_license

    @from_date_license.setter
    def from_date_license(self, from_date_license):
        """Sets the from_date_license of this DateRangeFilter.


        :param from_date_license: The from_date_license of this DateRangeFilter.  # noqa: E501
        :type: datetime
        """

        self._from_date_license = from_date_license

    @property
    def period(self):
        """Gets the period of this DateRangeFilter.  # noqa: E501


        :return: The period of this DateRangeFilter.  # noqa: E501
        :rtype: Period
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this DateRangeFilter.


        :param period: The period of this DateRangeFilter.  # noqa: E501
        :type: Period
        """

        self._period = period

    @property
    def time_frame(self):
        """Gets the time_frame of this DateRangeFilter.  # noqa: E501


        :return: The time_frame of this DateRangeFilter.  # noqa: E501
        :rtype: Duration
        """
        return self._time_frame

    @time_frame.setter
    def time_frame(self, time_frame):
        """Sets the time_frame of this DateRangeFilter.


        :param time_frame: The time_frame of this DateRangeFilter.  # noqa: E501
        :type: Duration
        """

        self._time_frame = time_frame

    @property
    def to_date(self):
        """Gets the to_date of this DateRangeFilter.  # noqa: E501


        :return: The to_date of this DateRangeFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this DateRangeFilter.


        :param to_date: The to_date of this DateRangeFilter.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DateRangeFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateRangeFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
