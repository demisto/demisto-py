# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RBAC(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_read': 'bool',
        'all_read_write': 'bool',
        'dbot_created_by': 'str',
        'has_role': 'bool',
        'previous_all_read': 'bool',
        'previous_all_read_write': 'bool',
        'previous_roles': 'list[str]',
        'roles': 'list[str]',
        'xsoar_has_read_only_role': 'bool',
        'xsoar_previous_read_only_roles': 'list[str]',
        'xsoar_read_only_roles': 'list[str]'
    }

    attribute_map = {
        'all_read': 'allRead',
        'all_read_write': 'allReadWrite',
        'dbot_created_by': 'dbotCreatedBy',
        'has_role': 'hasRole',
        'previous_all_read': 'previousAllRead',
        'previous_all_read_write': 'previousAllReadWrite',
        'previous_roles': 'previousRoles',
        'roles': 'roles',
        'xsoar_has_read_only_role': 'xsoarHasReadOnlyRole',
        'xsoar_previous_read_only_roles': 'xsoarPreviousReadOnlyRoles',
        'xsoar_read_only_roles': 'xsoarReadOnlyRoles'
    }

    def __init__(self, all_read=None, all_read_write=None, dbot_created_by=None, has_role=None, previous_all_read=None, previous_all_read_write=None, previous_roles=None, roles=None, xsoar_has_read_only_role=None, xsoar_previous_read_only_roles=None, xsoar_read_only_roles=None):  # noqa: E501
        """RBAC - a model defined in Swagger"""  # noqa: E501

        self._all_read = None
        self._all_read_write = None
        self._dbot_created_by = None
        self._has_role = None
        self._previous_all_read = None
        self._previous_all_read_write = None
        self._previous_roles = None
        self._roles = None
        self._xsoar_has_read_only_role = None
        self._xsoar_previous_read_only_roles = None
        self._xsoar_read_only_roles = None
        self.discriminator = None

        if all_read is not None:
            self.all_read = all_read
        if all_read_write is not None:
            self.all_read_write = all_read_write
        if dbot_created_by is not None:
            self.dbot_created_by = dbot_created_by
        if has_role is not None:
            self.has_role = has_role
        if previous_all_read is not None:
            self.previous_all_read = previous_all_read
        if previous_all_read_write is not None:
            self.previous_all_read_write = previous_all_read_write
        if previous_roles is not None:
            self.previous_roles = previous_roles
        if roles is not None:
            self.roles = roles
        if xsoar_has_read_only_role is not None:
            self.xsoar_has_read_only_role = xsoar_has_read_only_role
        if xsoar_previous_read_only_roles is not None:
            self.xsoar_previous_read_only_roles = xsoar_previous_read_only_roles
        if xsoar_read_only_roles is not None:
            self.xsoar_read_only_roles = xsoar_read_only_roles

    @property
    def all_read(self):
        """Gets the all_read of this RBAC.  # noqa: E501


        :return: The all_read of this RBAC.  # noqa: E501
        :rtype: bool
        """
        return self._all_read

    @all_read.setter
    def all_read(self, all_read):
        """Sets the all_read of this RBAC.


        :param all_read: The all_read of this RBAC.  # noqa: E501
        :type: bool
        """

        self._all_read = all_read

    @property
    def all_read_write(self):
        """Gets the all_read_write of this RBAC.  # noqa: E501


        :return: The all_read_write of this RBAC.  # noqa: E501
        :rtype: bool
        """
        return self._all_read_write

    @all_read_write.setter
    def all_read_write(self, all_read_write):
        """Sets the all_read_write of this RBAC.


        :param all_read_write: The all_read_write of this RBAC.  # noqa: E501
        :type: bool
        """

        self._all_read_write = all_read_write

    @property
    def dbot_created_by(self):
        """Gets the dbot_created_by of this RBAC.  # noqa: E501

        Who has created this event - relevant only for manual incidents  # noqa: E501

        :return: The dbot_created_by of this RBAC.  # noqa: E501
        :rtype: str
        """
        return self._dbot_created_by

    @dbot_created_by.setter
    def dbot_created_by(self, dbot_created_by):
        """Sets the dbot_created_by of this RBAC.

        Who has created this event - relevant only for manual incidents  # noqa: E501

        :param dbot_created_by: The dbot_created_by of this RBAC.  # noqa: E501
        :type: str
        """

        self._dbot_created_by = dbot_created_by

    @property
    def has_role(self):
        """Gets the has_role of this RBAC.  # noqa: E501

        Internal field to make queries on role faster  # noqa: E501

        :return: The has_role of this RBAC.  # noqa: E501
        :rtype: bool
        """
        return self._has_role

    @has_role.setter
    def has_role(self, has_role):
        """Sets the has_role of this RBAC.

        Internal field to make queries on role faster  # noqa: E501

        :param has_role: The has_role of this RBAC.  # noqa: E501
        :type: bool
        """

        self._has_role = has_role

    @property
    def previous_all_read(self):
        """Gets the previous_all_read of this RBAC.  # noqa: E501


        :return: The previous_all_read of this RBAC.  # noqa: E501
        :rtype: bool
        """
        return self._previous_all_read

    @previous_all_read.setter
    def previous_all_read(self, previous_all_read):
        """Sets the previous_all_read of this RBAC.


        :param previous_all_read: The previous_all_read of this RBAC.  # noqa: E501
        :type: bool
        """

        self._previous_all_read = previous_all_read

    @property
    def previous_all_read_write(self):
        """Gets the previous_all_read_write of this RBAC.  # noqa: E501


        :return: The previous_all_read_write of this RBAC.  # noqa: E501
        :rtype: bool
        """
        return self._previous_all_read_write

    @previous_all_read_write.setter
    def previous_all_read_write(self, previous_all_read_write):
        """Sets the previous_all_read_write of this RBAC.


        :param previous_all_read_write: The previous_all_read_write of this RBAC.  # noqa: E501
        :type: bool
        """

        self._previous_all_read_write = previous_all_read_write

    @property
    def previous_roles(self):
        """Gets the previous_roles of this RBAC.  # noqa: E501

        Do not change this field manually  # noqa: E501

        :return: The previous_roles of this RBAC.  # noqa: E501
        :rtype: list[str]
        """
        return self._previous_roles

    @previous_roles.setter
    def previous_roles(self, previous_roles):
        """Sets the previous_roles of this RBAC.

        Do not change this field manually  # noqa: E501

        :param previous_roles: The previous_roles of this RBAC.  # noqa: E501
        :type: list[str]
        """

        self._previous_roles = previous_roles

    @property
    def roles(self):
        """Gets the roles of this RBAC.  # noqa: E501

        The role assigned to this investigation  # noqa: E501

        :return: The roles of this RBAC.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this RBAC.

        The role assigned to this investigation  # noqa: E501

        :param roles: The roles of this RBAC.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def xsoar_has_read_only_role(self):
        """Gets the xsoar_has_read_only_role of this RBAC.  # noqa: E501


        :return: The xsoar_has_read_only_role of this RBAC.  # noqa: E501
        :rtype: bool
        """
        return self._xsoar_has_read_only_role

    @xsoar_has_read_only_role.setter
    def xsoar_has_read_only_role(self, xsoar_has_read_only_role):
        """Sets the xsoar_has_read_only_role of this RBAC.


        :param xsoar_has_read_only_role: The xsoar_has_read_only_role of this RBAC.  # noqa: E501
        :type: bool
        """

        self._xsoar_has_read_only_role = xsoar_has_read_only_role

    @property
    def xsoar_previous_read_only_roles(self):
        """Gets the xsoar_previous_read_only_roles of this RBAC.  # noqa: E501


        :return: The xsoar_previous_read_only_roles of this RBAC.  # noqa: E501
        :rtype: list[str]
        """
        return self._xsoar_previous_read_only_roles

    @xsoar_previous_read_only_roles.setter
    def xsoar_previous_read_only_roles(self, xsoar_previous_read_only_roles):
        """Sets the xsoar_previous_read_only_roles of this RBAC.


        :param xsoar_previous_read_only_roles: The xsoar_previous_read_only_roles of this RBAC.  # noqa: E501
        :type: list[str]
        """

        self._xsoar_previous_read_only_roles = xsoar_previous_read_only_roles

    @property
    def xsoar_read_only_roles(self):
        """Gets the xsoar_read_only_roles of this RBAC.  # noqa: E501


        :return: The xsoar_read_only_roles of this RBAC.  # noqa: E501
        :rtype: list[str]
        """
        return self._xsoar_read_only_roles

    @xsoar_read_only_roles.setter
    def xsoar_read_only_roles(self, xsoar_read_only_roles):
        """Sets the xsoar_read_only_roles of this RBAC.


        :param xsoar_read_only_roles: The xsoar_read_only_roles of this RBAC.  # noqa: E501
        :type: list[str]
        """

        self._xsoar_read_only_roles = xsoar_read_only_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RBAC, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RBAC):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
