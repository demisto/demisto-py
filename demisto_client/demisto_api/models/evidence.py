# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Evidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shard_id': 'int',
        'all_read': 'bool',
        'all_read_write': 'bool',
        'dbot_created_by': 'str',
        'description': 'str',
        'entry_id': 'str',
        'fetched': 'datetime',
        'has_role': 'bool',
        'highlight': 'dict(str, list[str])',
        'id': 'str',
        'incident_id': 'str',
        'marked_by': 'str',
        'marked_date': 'datetime',
        'modified': 'datetime',
        'numeric_id': 'int',
        'occurred': 'datetime',
        'previous_all_read': 'bool',
        'previous_all_read_write': 'bool',
        'previous_roles': 'list[str]',
        'primary_term': 'int',
        'roles': 'list[str]',
        'sequence_number': 'int',
        'sort_values': 'list[str]',
        'tags': 'list[str]',
        'tags_raw': 'list[str]',
        'task_id': 'str',
        'version': 'int',
        'xsoar_has_read_only_role': 'bool',
        'xsoar_previous_read_only_roles': 'list[str]',
        'xsoar_read_only_roles': 'list[str]'
    }

    attribute_map = {
        'shard_id': 'ShardID',
        'all_read': 'allRead',
        'all_read_write': 'allReadWrite',
        'dbot_created_by': 'dbotCreatedBy',
        'description': 'description',
        'entry_id': 'entryId',
        'fetched': 'fetched',
        'has_role': 'hasRole',
        'highlight': 'highlight',
        'id': 'id',
        'incident_id': 'incidentId',
        'marked_by': 'markedBy',
        'marked_date': 'markedDate',
        'modified': 'modified',
        'numeric_id': 'numericId',
        'occurred': 'occurred',
        'previous_all_read': 'previousAllRead',
        'previous_all_read_write': 'previousAllReadWrite',
        'previous_roles': 'previousRoles',
        'primary_term': 'primaryTerm',
        'roles': 'roles',
        'sequence_number': 'sequenceNumber',
        'sort_values': 'sortValues',
        'tags': 'tags',
        'tags_raw': 'tagsRaw',
        'task_id': 'taskId',
        'version': 'version',
        'xsoar_has_read_only_role': 'xsoarHasReadOnlyRole',
        'xsoar_previous_read_only_roles': 'xsoarPreviousReadOnlyRoles',
        'xsoar_read_only_roles': 'xsoarReadOnlyRoles'
    }

    def __init__(self, shard_id=None, all_read=None, all_read_write=None, dbot_created_by=None, description=None, entry_id=None, fetched=None, has_role=None, highlight=None, id=None, incident_id=None, marked_by=None, marked_date=None, modified=None, numeric_id=None, occurred=None, previous_all_read=None, previous_all_read_write=None, previous_roles=None, primary_term=None, roles=None, sequence_number=None, sort_values=None, tags=None, tags_raw=None, task_id=None, version=None, xsoar_has_read_only_role=None, xsoar_previous_read_only_roles=None, xsoar_read_only_roles=None):  # noqa: E501
        """Evidence - a model defined in Swagger"""  # noqa: E501

        self._shard_id = None
        self._all_read = None
        self._all_read_write = None
        self._dbot_created_by = None
        self._description = None
        self._entry_id = None
        self._fetched = None
        self._has_role = None
        self._highlight = None
        self._id = None
        self._incident_id = None
        self._marked_by = None
        self._marked_date = None
        self._modified = None
        self._numeric_id = None
        self._occurred = None
        self._previous_all_read = None
        self._previous_all_read_write = None
        self._previous_roles = None
        self._primary_term = None
        self._roles = None
        self._sequence_number = None
        self._sort_values = None
        self._tags = None
        self._tags_raw = None
        self._task_id = None
        self._version = None
        self._xsoar_has_read_only_role = None
        self._xsoar_previous_read_only_roles = None
        self._xsoar_read_only_roles = None
        self.discriminator = None

        if shard_id is not None:
            self.shard_id = shard_id
        if all_read is not None:
            self.all_read = all_read
        if all_read_write is not None:
            self.all_read_write = all_read_write
        if dbot_created_by is not None:
            self.dbot_created_by = dbot_created_by
        if description is not None:
            self.description = description
        if entry_id is not None:
            self.entry_id = entry_id
        if fetched is not None:
            self.fetched = fetched
        if has_role is not None:
            self.has_role = has_role
        if highlight is not None:
            self.highlight = highlight
        if id is not None:
            self.id = id
        if incident_id is not None:
            self.incident_id = incident_id
        if marked_by is not None:
            self.marked_by = marked_by
        if marked_date is not None:
            self.marked_date = marked_date
        if modified is not None:
            self.modified = modified
        if numeric_id is not None:
            self.numeric_id = numeric_id
        if occurred is not None:
            self.occurred = occurred
        if previous_all_read is not None:
            self.previous_all_read = previous_all_read
        if previous_all_read_write is not None:
            self.previous_all_read_write = previous_all_read_write
        if previous_roles is not None:
            self.previous_roles = previous_roles
        if primary_term is not None:
            self.primary_term = primary_term
        if roles is not None:
            self.roles = roles
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if sort_values is not None:
            self.sort_values = sort_values
        if tags is not None:
            self.tags = tags
        if tags_raw is not None:
            self.tags_raw = tags_raw
        if task_id is not None:
            self.task_id = task_id
        if version is not None:
            self.version = version
        if xsoar_has_read_only_role is not None:
            self.xsoar_has_read_only_role = xsoar_has_read_only_role
        if xsoar_previous_read_only_roles is not None:
            self.xsoar_previous_read_only_roles = xsoar_previous_read_only_roles
        if xsoar_read_only_roles is not None:
            self.xsoar_read_only_roles = xsoar_read_only_roles

    @property
    def shard_id(self):
        """Gets the shard_id of this Evidence.  # noqa: E501


        :return: The shard_id of this Evidence.  # noqa: E501
        :rtype: int
        """
        return self._shard_id

    @shard_id.setter
    def shard_id(self, shard_id):
        """Sets the shard_id of this Evidence.


        :param shard_id: The shard_id of this Evidence.  # noqa: E501
        :type: int
        """

        self._shard_id = shard_id

    @property
    def all_read(self):
        """Gets the all_read of this Evidence.  # noqa: E501


        :return: The all_read of this Evidence.  # noqa: E501
        :rtype: bool
        """
        return self._all_read

    @all_read.setter
    def all_read(self, all_read):
        """Sets the all_read of this Evidence.


        :param all_read: The all_read of this Evidence.  # noqa: E501
        :type: bool
        """

        self._all_read = all_read

    @property
    def all_read_write(self):
        """Gets the all_read_write of this Evidence.  # noqa: E501


        :return: The all_read_write of this Evidence.  # noqa: E501
        :rtype: bool
        """
        return self._all_read_write

    @all_read_write.setter
    def all_read_write(self, all_read_write):
        """Sets the all_read_write of this Evidence.


        :param all_read_write: The all_read_write of this Evidence.  # noqa: E501
        :type: bool
        """

        self._all_read_write = all_read_write

    @property
    def dbot_created_by(self):
        """Gets the dbot_created_by of this Evidence.  # noqa: E501

        Who has created this event - relevant only for manual incidents  # noqa: E501

        :return: The dbot_created_by of this Evidence.  # noqa: E501
        :rtype: str
        """
        return self._dbot_created_by

    @dbot_created_by.setter
    def dbot_created_by(self, dbot_created_by):
        """Sets the dbot_created_by of this Evidence.

        Who has created this event - relevant only for manual incidents  # noqa: E501

        :param dbot_created_by: The dbot_created_by of this Evidence.  # noqa: E501
        :type: str
        """

        self._dbot_created_by = dbot_created_by

    @property
    def description(self):
        """Gets the description of this Evidence.  # noqa: E501

        The description for the resolve  # noqa: E501

        :return: The description of this Evidence.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Evidence.

        The description for the resolve  # noqa: E501

        :param description: The description of this Evidence.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entry_id(self):
        """Gets the entry_id of this Evidence.  # noqa: E501

        The entry ID  # noqa: E501

        :return: The entry_id of this Evidence.  # noqa: E501
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this Evidence.

        The entry ID  # noqa: E501

        :param entry_id: The entry_id of this Evidence.  # noqa: E501
        :type: str
        """

        self._entry_id = entry_id

    @property
    def fetched(self):
        """Gets the fetched of this Evidence.  # noqa: E501

        when the evidence entry was fetched  # noqa: E501

        :return: The fetched of this Evidence.  # noqa: E501
        :rtype: datetime
        """
        return self._fetched

    @fetched.setter
    def fetched(self, fetched):
        """Sets the fetched of this Evidence.

        when the evidence entry was fetched  # noqa: E501

        :param fetched: The fetched of this Evidence.  # noqa: E501
        :type: datetime
        """

        self._fetched = fetched

    @property
    def has_role(self):
        """Gets the has_role of this Evidence.  # noqa: E501

        Internal field to make queries on role faster  # noqa: E501

        :return: The has_role of this Evidence.  # noqa: E501
        :rtype: bool
        """
        return self._has_role

    @has_role.setter
    def has_role(self, has_role):
        """Sets the has_role of this Evidence.

        Internal field to make queries on role faster  # noqa: E501

        :param has_role: The has_role of this Evidence.  # noqa: E501
        :type: bool
        """

        self._has_role = has_role

    @property
    def highlight(self):
        """Gets the highlight of this Evidence.  # noqa: E501


        :return: The highlight of this Evidence.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this Evidence.


        :param highlight: The highlight of this Evidence.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._highlight = highlight

    @property
    def id(self):
        """Gets the id of this Evidence.  # noqa: E501


        :return: The id of this Evidence.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Evidence.


        :param id: The id of this Evidence.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def incident_id(self):
        """Gets the incident_id of this Evidence.  # noqa: E501

        The incident ID  # noqa: E501

        :return: The incident_id of this Evidence.  # noqa: E501
        :rtype: str
        """
        return self._incident_id

    @incident_id.setter
    def incident_id(self, incident_id):
        """Sets the incident_id of this Evidence.

        The incident ID  # noqa: E501

        :param incident_id: The incident_id of this Evidence.  # noqa: E501
        :type: str
        """

        self._incident_id = incident_id

    @property
    def marked_by(self):
        """Gets the marked_by of this Evidence.  # noqa: E501

        the user that marked this evidence  # noqa: E501

        :return: The marked_by of this Evidence.  # noqa: E501
        :rtype: str
        """
        return self._marked_by

    @marked_by.setter
    def marked_by(self, marked_by):
        """Sets the marked_by of this Evidence.

        the user that marked this evidence  # noqa: E501

        :param marked_by: The marked_by of this Evidence.  # noqa: E501
        :type: str
        """

        self._marked_by = marked_by

    @property
    def marked_date(self):
        """Gets the marked_date of this Evidence.  # noqa: E501

        when this evidence was marked  # noqa: E501

        :return: The marked_date of this Evidence.  # noqa: E501
        :rtype: datetime
        """
        return self._marked_date

    @marked_date.setter
    def marked_date(self, marked_date):
        """Sets the marked_date of this Evidence.

        when this evidence was marked  # noqa: E501

        :param marked_date: The marked_date of this Evidence.  # noqa: E501
        :type: datetime
        """

        self._marked_date = marked_date

    @property
    def modified(self):
        """Gets the modified of this Evidence.  # noqa: E501


        :return: The modified of this Evidence.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Evidence.


        :param modified: The modified of this Evidence.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def numeric_id(self):
        """Gets the numeric_id of this Evidence.  # noqa: E501


        :return: The numeric_id of this Evidence.  # noqa: E501
        :rtype: int
        """
        return self._numeric_id

    @numeric_id.setter
    def numeric_id(self, numeric_id):
        """Sets the numeric_id of this Evidence.


        :param numeric_id: The numeric_id of this Evidence.  # noqa: E501
        :type: int
        """

        self._numeric_id = numeric_id

    @property
    def occurred(self):
        """Gets the occurred of this Evidence.  # noqa: E501

        When this evidence has occurred  # noqa: E501

        :return: The occurred of this Evidence.  # noqa: E501
        :rtype: datetime
        """
        return self._occurred

    @occurred.setter
    def occurred(self, occurred):
        """Sets the occurred of this Evidence.

        When this evidence has occurred  # noqa: E501

        :param occurred: The occurred of this Evidence.  # noqa: E501
        :type: datetime
        """

        self._occurred = occurred

    @property
    def previous_all_read(self):
        """Gets the previous_all_read of this Evidence.  # noqa: E501


        :return: The previous_all_read of this Evidence.  # noqa: E501
        :rtype: bool
        """
        return self._previous_all_read

    @previous_all_read.setter
    def previous_all_read(self, previous_all_read):
        """Sets the previous_all_read of this Evidence.


        :param previous_all_read: The previous_all_read of this Evidence.  # noqa: E501
        :type: bool
        """

        self._previous_all_read = previous_all_read

    @property
    def previous_all_read_write(self):
        """Gets the previous_all_read_write of this Evidence.  # noqa: E501


        :return: The previous_all_read_write of this Evidence.  # noqa: E501
        :rtype: bool
        """
        return self._previous_all_read_write

    @previous_all_read_write.setter
    def previous_all_read_write(self, previous_all_read_write):
        """Sets the previous_all_read_write of this Evidence.


        :param previous_all_read_write: The previous_all_read_write of this Evidence.  # noqa: E501
        :type: bool
        """

        self._previous_all_read_write = previous_all_read_write

    @property
    def previous_roles(self):
        """Gets the previous_roles of this Evidence.  # noqa: E501

        Do not change this field manually  # noqa: E501

        :return: The previous_roles of this Evidence.  # noqa: E501
        :rtype: list[str]
        """
        return self._previous_roles

    @previous_roles.setter
    def previous_roles(self, previous_roles):
        """Sets the previous_roles of this Evidence.

        Do not change this field manually  # noqa: E501

        :param previous_roles: The previous_roles of this Evidence.  # noqa: E501
        :type: list[str]
        """

        self._previous_roles = previous_roles

    @property
    def primary_term(self):
        """Gets the primary_term of this Evidence.  # noqa: E501


        :return: The primary_term of this Evidence.  # noqa: E501
        :rtype: int
        """
        return self._primary_term

    @primary_term.setter
    def primary_term(self, primary_term):
        """Sets the primary_term of this Evidence.


        :param primary_term: The primary_term of this Evidence.  # noqa: E501
        :type: int
        """

        self._primary_term = primary_term

    @property
    def roles(self):
        """Gets the roles of this Evidence.  # noqa: E501

        The role assigned to this investigation  # noqa: E501

        :return: The roles of this Evidence.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Evidence.

        The role assigned to this investigation  # noqa: E501

        :param roles: The roles of this Evidence.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Evidence.  # noqa: E501


        :return: The sequence_number of this Evidence.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Evidence.


        :param sequence_number: The sequence_number of this Evidence.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def sort_values(self):
        """Gets the sort_values of this Evidence.  # noqa: E501


        :return: The sort_values of this Evidence.  # noqa: E501
        :rtype: list[str]
        """
        return self._sort_values

    @sort_values.setter
    def sort_values(self, sort_values):
        """Sets the sort_values of this Evidence.


        :param sort_values: The sort_values of this Evidence.  # noqa: E501
        :type: list[str]
        """

        self._sort_values = sort_values

    @property
    def tags(self):
        """Gets the tags of this Evidence.  # noqa: E501

        Tags  # noqa: E501

        :return: The tags of this Evidence.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Evidence.

        Tags  # noqa: E501

        :param tags: The tags of this Evidence.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def tags_raw(self):
        """Gets the tags_raw of this Evidence.  # noqa: E501

        TagsRaw  # noqa: E501

        :return: The tags_raw of this Evidence.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags_raw

    @tags_raw.setter
    def tags_raw(self, tags_raw):
        """Sets the tags_raw of this Evidence.

        TagsRaw  # noqa: E501

        :param tags_raw: The tags_raw of this Evidence.  # noqa: E501
        :type: list[str]
        """

        self._tags_raw = tags_raw

    @property
    def task_id(self):
        """Gets the task_id of this Evidence.  # noqa: E501

        when the evidence entry was fetched  # noqa: E501

        :return: The task_id of this Evidence.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Evidence.

        when the evidence entry was fetched  # noqa: E501

        :param task_id: The task_id of this Evidence.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def version(self):
        """Gets the version of this Evidence.  # noqa: E501


        :return: The version of this Evidence.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Evidence.


        :param version: The version of this Evidence.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def xsoar_has_read_only_role(self):
        """Gets the xsoar_has_read_only_role of this Evidence.  # noqa: E501


        :return: The xsoar_has_read_only_role of this Evidence.  # noqa: E501
        :rtype: bool
        """
        return self._xsoar_has_read_only_role

    @xsoar_has_read_only_role.setter
    def xsoar_has_read_only_role(self, xsoar_has_read_only_role):
        """Sets the xsoar_has_read_only_role of this Evidence.


        :param xsoar_has_read_only_role: The xsoar_has_read_only_role of this Evidence.  # noqa: E501
        :type: bool
        """

        self._xsoar_has_read_only_role = xsoar_has_read_only_role

    @property
    def xsoar_previous_read_only_roles(self):
        """Gets the xsoar_previous_read_only_roles of this Evidence.  # noqa: E501


        :return: The xsoar_previous_read_only_roles of this Evidence.  # noqa: E501
        :rtype: list[str]
        """
        return self._xsoar_previous_read_only_roles

    @xsoar_previous_read_only_roles.setter
    def xsoar_previous_read_only_roles(self, xsoar_previous_read_only_roles):
        """Sets the xsoar_previous_read_only_roles of this Evidence.


        :param xsoar_previous_read_only_roles: The xsoar_previous_read_only_roles of this Evidence.  # noqa: E501
        :type: list[str]
        """

        self._xsoar_previous_read_only_roles = xsoar_previous_read_only_roles

    @property
    def xsoar_read_only_roles(self):
        """Gets the xsoar_read_only_roles of this Evidence.  # noqa: E501


        :return: The xsoar_read_only_roles of this Evidence.  # noqa: E501
        :rtype: list[str]
        """
        return self._xsoar_read_only_roles

    @xsoar_read_only_roles.setter
    def xsoar_read_only_roles(self, xsoar_read_only_roles):
        """Sets the xsoar_read_only_roles of this Evidence.


        :param xsoar_read_only_roles: The xsoar_read_only_roles of this Evidence.  # noqa: E501
        :type: list[str]
        """

        self._xsoar_read_only_roles = xsoar_read_only_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Evidence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Evidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
