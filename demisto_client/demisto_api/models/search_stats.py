# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SearchStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'committed': 'datetime',
        'duration': 'int',
        'from_date': 'datetime',
        'highlight': 'dict(str, list[str])',
        'id': 'str',
        'modified': 'datetime',
        'numeric_id': 'int',
        'primary_term': 'int',
        'query': 'str',
        'search_source': 'str',
        'sequence_number': 'int',
        'sort_values': 'list[str]',
        'to_date': 'datetime',
        'username': 'str',
        'version': 'int'
    }

    attribute_map = {
        'committed': 'committed',
        'duration': 'duration',
        'from_date': 'fromDate',
        'highlight': 'highlight',
        'id': 'id',
        'modified': 'modified',
        'numeric_id': 'numericId',
        'primary_term': 'primaryTerm',
        'query': 'query',
        'search_source': 'searchSource',
        'sequence_number': 'sequenceNumber',
        'sort_values': 'sortValues',
        'to_date': 'toDate',
        'username': 'username',
        'version': 'version'
    }

    def __init__(self, committed=None, duration=None, from_date=None, highlight=None, id=None, modified=None, numeric_id=None, primary_term=None, query=None, search_source=None, sequence_number=None, sort_values=None, to_date=None, username=None, version=None):  # noqa: E501
        """SearchStats - a model defined in Swagger"""  # noqa: E501

        self._committed = None
        self._duration = None
        self._from_date = None
        self._highlight = None
        self._id = None
        self._modified = None
        self._numeric_id = None
        self._primary_term = None
        self._query = None
        self._search_source = None
        self._sequence_number = None
        self._sort_values = None
        self._to_date = None
        self._username = None
        self._version = None
        self.discriminator = None

        if committed is not None:
            self.committed = committed
        if duration is not None:
            self.duration = duration
        if from_date is not None:
            self.from_date = from_date
        if highlight is not None:
            self.highlight = highlight
        if id is not None:
            self.id = id
        if modified is not None:
            self.modified = modified
        if numeric_id is not None:
            self.numeric_id = numeric_id
        if primary_term is not None:
            self.primary_term = primary_term
        if query is not None:
            self.query = query
        if search_source is not None:
            self.search_source = search_source
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if sort_values is not None:
            self.sort_values = sort_values
        if to_date is not None:
            self.to_date = to_date
        if username is not None:
            self.username = username
        if version is not None:
            self.version = version

    @property
    def committed(self):
        """Gets the committed of this SearchStats.  # noqa: E501


        :return: The committed of this SearchStats.  # noqa: E501
        :rtype: datetime
        """
        return self._committed

    @committed.setter
    def committed(self, committed):
        """Sets the committed of this SearchStats.


        :param committed: The committed of this SearchStats.  # noqa: E501
        :type: datetime
        """

        self._committed = committed

    @property
    def duration(self):
        """Gets the duration of this SearchStats.  # noqa: E501


        :return: The duration of this SearchStats.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SearchStats.


        :param duration: The duration of this SearchStats.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def from_date(self):
        """Gets the from_date of this SearchStats.  # noqa: E501


        :return: The from_date of this SearchStats.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this SearchStats.


        :param from_date: The from_date of this SearchStats.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def highlight(self):
        """Gets the highlight of this SearchStats.  # noqa: E501


        :return: The highlight of this SearchStats.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this SearchStats.


        :param highlight: The highlight of this SearchStats.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._highlight = highlight

    @property
    def id(self):
        """Gets the id of this SearchStats.  # noqa: E501


        :return: The id of this SearchStats.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchStats.


        :param id: The id of this SearchStats.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this SearchStats.  # noqa: E501


        :return: The modified of this SearchStats.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this SearchStats.


        :param modified: The modified of this SearchStats.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def numeric_id(self):
        """Gets the numeric_id of this SearchStats.  # noqa: E501


        :return: The numeric_id of this SearchStats.  # noqa: E501
        :rtype: int
        """
        return self._numeric_id

    @numeric_id.setter
    def numeric_id(self, numeric_id):
        """Sets the numeric_id of this SearchStats.


        :param numeric_id: The numeric_id of this SearchStats.  # noqa: E501
        :type: int
        """

        self._numeric_id = numeric_id

    @property
    def primary_term(self):
        """Gets the primary_term of this SearchStats.  # noqa: E501


        :return: The primary_term of this SearchStats.  # noqa: E501
        :rtype: int
        """
        return self._primary_term

    @primary_term.setter
    def primary_term(self, primary_term):
        """Sets the primary_term of this SearchStats.


        :param primary_term: The primary_term of this SearchStats.  # noqa: E501
        :type: int
        """

        self._primary_term = primary_term

    @property
    def query(self):
        """Gets the query of this SearchStats.  # noqa: E501


        :return: The query of this SearchStats.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchStats.


        :param query: The query of this SearchStats.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def search_source(self):
        """Gets the search_source of this SearchStats.  # noqa: E501


        :return: The search_source of this SearchStats.  # noqa: E501
        :rtype: str
        """
        return self._search_source

    @search_source.setter
    def search_source(self, search_source):
        """Sets the search_source of this SearchStats.


        :param search_source: The search_source of this SearchStats.  # noqa: E501
        :type: str
        """

        self._search_source = search_source

    @property
    def sequence_number(self):
        """Gets the sequence_number of this SearchStats.  # noqa: E501


        :return: The sequence_number of this SearchStats.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this SearchStats.


        :param sequence_number: The sequence_number of this SearchStats.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def sort_values(self):
        """Gets the sort_values of this SearchStats.  # noqa: E501


        :return: The sort_values of this SearchStats.  # noqa: E501
        :rtype: list[str]
        """
        return self._sort_values

    @sort_values.setter
    def sort_values(self, sort_values):
        """Sets the sort_values of this SearchStats.


        :param sort_values: The sort_values of this SearchStats.  # noqa: E501
        :type: list[str]
        """

        self._sort_values = sort_values

    @property
    def to_date(self):
        """Gets the to_date of this SearchStats.  # noqa: E501


        :return: The to_date of this SearchStats.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this SearchStats.


        :param to_date: The to_date of this SearchStats.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    @property
    def username(self):
        """Gets the username of this SearchStats.  # noqa: E501


        :return: The username of this SearchStats.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SearchStats.


        :param username: The username of this SearchStats.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def version(self):
        """Gets the version of this SearchStats.  # noqa: E501


        :return: The version of this SearchStats.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SearchStats.


        :param version: The version of this SearchStats.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
