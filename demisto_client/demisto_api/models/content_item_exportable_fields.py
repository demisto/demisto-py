# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.version import Version  # noqa: F401,E501


class ContentItemExportableFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_server_version': 'Version',
        'item_version': 'Version',
        'pack_id': 'str',
        'pack_propagation_labels': 'list[str]',
        'propagation_labels': 'list[str]',
        'to_server_version': 'Version'
    }

    attribute_map = {
        'from_server_version': 'fromServerVersion',
        'item_version': 'itemVersion',
        'pack_id': 'packID',
        'pack_propagation_labels': 'packPropagationLabels',
        'propagation_labels': 'propagationLabels',
        'to_server_version': 'toServerVersion'
    }

    def __init__(self, from_server_version=None, item_version=None, pack_id=None, pack_propagation_labels=None, propagation_labels=None, to_server_version=None):  # noqa: E501
        """ContentItemExportableFields - a model defined in Swagger"""  # noqa: E501

        self._from_server_version = None
        self._item_version = None
        self._pack_id = None
        self._pack_propagation_labels = None
        self._propagation_labels = None
        self._to_server_version = None
        self.discriminator = None

        if from_server_version is not None:
            self.from_server_version = from_server_version
        if item_version is not None:
            self.item_version = item_version
        if pack_id is not None:
            self.pack_id = pack_id
        if pack_propagation_labels is not None:
            self.pack_propagation_labels = pack_propagation_labels
        if propagation_labels is not None:
            self.propagation_labels = propagation_labels
        if to_server_version is not None:
            self.to_server_version = to_server_version

    @property
    def from_server_version(self):
        """Gets the from_server_version of this ContentItemExportableFields.  # noqa: E501


        :return: The from_server_version of this ContentItemExportableFields.  # noqa: E501
        :rtype: Version
        """
        return self._from_server_version

    @from_server_version.setter
    def from_server_version(self, from_server_version):
        """Sets the from_server_version of this ContentItemExportableFields.


        :param from_server_version: The from_server_version of this ContentItemExportableFields.  # noqa: E501
        :type: Version
        """

        self._from_server_version = from_server_version

    @property
    def item_version(self):
        """Gets the item_version of this ContentItemExportableFields.  # noqa: E501


        :return: The item_version of this ContentItemExportableFields.  # noqa: E501
        :rtype: Version
        """
        return self._item_version

    @item_version.setter
    def item_version(self, item_version):
        """Sets the item_version of this ContentItemExportableFields.


        :param item_version: The item_version of this ContentItemExportableFields.  # noqa: E501
        :type: Version
        """

        self._item_version = item_version

    @property
    def pack_id(self):
        """Gets the pack_id of this ContentItemExportableFields.  # noqa: E501


        :return: The pack_id of this ContentItemExportableFields.  # noqa: E501
        :rtype: str
        """
        return self._pack_id

    @pack_id.setter
    def pack_id(self, pack_id):
        """Sets the pack_id of this ContentItemExportableFields.


        :param pack_id: The pack_id of this ContentItemExportableFields.  # noqa: E501
        :type: str
        """

        self._pack_id = pack_id

    @property
    def pack_propagation_labels(self):
        """Gets the pack_propagation_labels of this ContentItemExportableFields.  # noqa: E501


        :return: The pack_propagation_labels of this ContentItemExportableFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._pack_propagation_labels

    @pack_propagation_labels.setter
    def pack_propagation_labels(self, pack_propagation_labels):
        """Sets the pack_propagation_labels of this ContentItemExportableFields.


        :param pack_propagation_labels: The pack_propagation_labels of this ContentItemExportableFields.  # noqa: E501
        :type: list[str]
        """

        self._pack_propagation_labels = pack_propagation_labels

    @property
    def propagation_labels(self):
        """Gets the propagation_labels of this ContentItemExportableFields.  # noqa: E501


        :return: The propagation_labels of this ContentItemExportableFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._propagation_labels

    @propagation_labels.setter
    def propagation_labels(self, propagation_labels):
        """Sets the propagation_labels of this ContentItemExportableFields.


        :param propagation_labels: The propagation_labels of this ContentItemExportableFields.  # noqa: E501
        :type: list[str]
        """

        self._propagation_labels = propagation_labels

    @property
    def to_server_version(self):
        """Gets the to_server_version of this ContentItemExportableFields.  # noqa: E501


        :return: The to_server_version of this ContentItemExportableFields.  # noqa: E501
        :rtype: Version
        """
        return self._to_server_version

    @to_server_version.setter
    def to_server_version(self, to_server_version):
        """Sets the to_server_version of this ContentItemExportableFields.


        :param to_server_version: The to_server_version of this ContentItemExportableFields.  # noqa: E501
        :type: Version
        """

        self._to_server_version = to_server_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentItemExportableFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentItemExportableFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
