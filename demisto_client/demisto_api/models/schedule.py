# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.ending_type import EndingType  # noqa: F401,E501
from demisto_client.demisto_api.models.human_cron import HumanCron  # noqa: F401,E501


class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cron': 'str',
        'cron_view': 'bool',
        'ending_date': 'datetime',
        'ending_type': 'EndingType',
        'human_cron': 'HumanCron',
        'recurrent': 'bool',
        'scheduled': 'bool',
        'start_date': 'datetime',
        'times': 'int',
        'timezone': 'str',
        'timezone_offset': 'int'
    }

    attribute_map = {
        'cron': 'cron',
        'cron_view': 'cronView',
        'ending_date': 'endingDate',
        'ending_type': 'endingType',
        'human_cron': 'humanCron',
        'recurrent': 'recurrent',
        'scheduled': 'scheduled',
        'start_date': 'startDate',
        'times': 'times',
        'timezone': 'timezone',
        'timezone_offset': 'timezoneOffset'
    }

    def __init__(self, cron=None, cron_view=None, ending_date=None, ending_type=None, human_cron=None, recurrent=None, scheduled=None, start_date=None, times=None, timezone=None, timezone_offset=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501

        self._cron = None
        self._cron_view = None
        self._ending_date = None
        self._ending_type = None
        self._human_cron = None
        self._recurrent = None
        self._scheduled = None
        self._start_date = None
        self._times = None
        self._timezone = None
        self._timezone_offset = None
        self.discriminator = None

        if cron is not None:
            self.cron = cron
        if cron_view is not None:
            self.cron_view = cron_view
        if ending_date is not None:
            self.ending_date = ending_date
        if ending_type is not None:
            self.ending_type = ending_type
        if human_cron is not None:
            self.human_cron = human_cron
        if recurrent is not None:
            self.recurrent = recurrent
        if scheduled is not None:
            self.scheduled = scheduled
        if start_date is not None:
            self.start_date = start_date
        if times is not None:
            self.times = times
        if timezone is not None:
            self.timezone = timezone
        if timezone_offset is not None:
            self.timezone_offset = timezone_offset

    @property
    def cron(self):
        """Gets the cron of this Schedule.  # noqa: E501


        :return: The cron of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this Schedule.


        :param cron: The cron of this Schedule.  # noqa: E501
        :type: str
        """

        self._cron = cron

    @property
    def cron_view(self):
        """Gets the cron_view of this Schedule.  # noqa: E501


        :return: The cron_view of this Schedule.  # noqa: E501
        :rtype: bool
        """
        return self._cron_view

    @cron_view.setter
    def cron_view(self, cron_view):
        """Sets the cron_view of this Schedule.


        :param cron_view: The cron_view of this Schedule.  # noqa: E501
        :type: bool
        """

        self._cron_view = cron_view

    @property
    def ending_date(self):
        """Gets the ending_date of this Schedule.  # noqa: E501


        :return: The ending_date of this Schedule.  # noqa: E501
        :rtype: datetime
        """
        return self._ending_date

    @ending_date.setter
    def ending_date(self, ending_date):
        """Sets the ending_date of this Schedule.


        :param ending_date: The ending_date of this Schedule.  # noqa: E501
        :type: datetime
        """

        self._ending_date = ending_date

    @property
    def ending_type(self):
        """Gets the ending_type of this Schedule.  # noqa: E501


        :return: The ending_type of this Schedule.  # noqa: E501
        :rtype: EndingType
        """
        return self._ending_type

    @ending_type.setter
    def ending_type(self, ending_type):
        """Sets the ending_type of this Schedule.


        :param ending_type: The ending_type of this Schedule.  # noqa: E501
        :type: EndingType
        """

        self._ending_type = ending_type

    @property
    def human_cron(self):
        """Gets the human_cron of this Schedule.  # noqa: E501


        :return: The human_cron of this Schedule.  # noqa: E501
        :rtype: HumanCron
        """
        return self._human_cron

    @human_cron.setter
    def human_cron(self, human_cron):
        """Sets the human_cron of this Schedule.


        :param human_cron: The human_cron of this Schedule.  # noqa: E501
        :type: HumanCron
        """

        self._human_cron = human_cron

    @property
    def recurrent(self):
        """Gets the recurrent of this Schedule.  # noqa: E501


        :return: The recurrent of this Schedule.  # noqa: E501
        :rtype: bool
        """
        return self._recurrent

    @recurrent.setter
    def recurrent(self, recurrent):
        """Sets the recurrent of this Schedule.


        :param recurrent: The recurrent of this Schedule.  # noqa: E501
        :type: bool
        """

        self._recurrent = recurrent

    @property
    def scheduled(self):
        """Gets the scheduled of this Schedule.  # noqa: E501

        is it scheduled  # noqa: E501

        :return: The scheduled of this Schedule.  # noqa: E501
        :rtype: bool
        """
        return self._scheduled

    @scheduled.setter
    def scheduled(self, scheduled):
        """Sets the scheduled of this Schedule.

        is it scheduled  # noqa: E501

        :param scheduled: The scheduled of this Schedule.  # noqa: E501
        :type: bool
        """

        self._scheduled = scheduled

    @property
    def start_date(self):
        """Gets the start_date of this Schedule.  # noqa: E501


        :return: The start_date of this Schedule.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Schedule.


        :param start_date: The start_date of this Schedule.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def times(self):
        """Gets the times of this Schedule.  # noqa: E501


        :return: The times of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this Schedule.


        :param times: The times of this Schedule.  # noqa: E501
        :type: int
        """

        self._times = times

    @property
    def timezone(self):
        """Gets the timezone of this Schedule.  # noqa: E501


        :return: The timezone of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Schedule.


        :param timezone: The timezone of this Schedule.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def timezone_offset(self):
        """Gets the timezone_offset of this Schedule.  # noqa: E501


        :return: The timezone_offset of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._timezone_offset

    @timezone_offset.setter
    def timezone_offset(self, timezone_offset):
        """Sets the timezone_offset of this Schedule.


        :param timezone_offset: The timezone_offset of this Schedule.  # noqa: E501
        :type: int
        """

        self._timezone_offset = timezone_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
