# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.expiration_source import ExpirationSource  # noqa: F401,E501
from demisto_client.demisto_api.models.expiration_status import ExpirationStatus  # noqa: F401,E501


class ExpirationIndicator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deleted_feed_fetch_time': 'datetime',
        'expiration': 'datetime',
        'expiration_source': 'ExpirationSource',
        'expiration_status': 'ExpirationStatus',
        'manual_expiration_time': 'datetime'
    }

    attribute_map = {
        'deleted_feed_fetch_time': 'deletedFeedFetchTime',
        'expiration': 'expiration',
        'expiration_source': 'expirationSource',
        'expiration_status': 'expirationStatus',
        'manual_expiration_time': 'manualExpirationTime'
    }

    def __init__(self, deleted_feed_fetch_time=None, expiration=None, expiration_source=None, expiration_status=None, manual_expiration_time=None):  # noqa: E501
        """ExpirationIndicator - a model defined in Swagger"""  # noqa: E501

        self._deleted_feed_fetch_time = None
        self._expiration = None
        self._expiration_source = None
        self._expiration_status = None
        self._manual_expiration_time = None
        self.discriminator = None

        if deleted_feed_fetch_time is not None:
            self.deleted_feed_fetch_time = deleted_feed_fetch_time
        if expiration is not None:
            self.expiration = expiration
        if expiration_source is not None:
            self.expiration_source = expiration_source
        if expiration_status is not None:
            self.expiration_status = expiration_status
        if manual_expiration_time is not None:
            self.manual_expiration_time = manual_expiration_time

    @property
    def deleted_feed_fetch_time(self):
        """Gets the deleted_feed_fetch_time of this ExpirationIndicator.  # noqa: E501


        :return: The deleted_feed_fetch_time of this ExpirationIndicator.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_feed_fetch_time

    @deleted_feed_fetch_time.setter
    def deleted_feed_fetch_time(self, deleted_feed_fetch_time):
        """Sets the deleted_feed_fetch_time of this ExpirationIndicator.


        :param deleted_feed_fetch_time: The deleted_feed_fetch_time of this ExpirationIndicator.  # noqa: E501
        :type: datetime
        """

        self._deleted_feed_fetch_time = deleted_feed_fetch_time

    @property
    def expiration(self):
        """Gets the expiration of this ExpirationIndicator.  # noqa: E501


        :return: The expiration of this ExpirationIndicator.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ExpirationIndicator.


        :param expiration: The expiration of this ExpirationIndicator.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def expiration_source(self):
        """Gets the expiration_source of this ExpirationIndicator.  # noqa: E501


        :return: The expiration_source of this ExpirationIndicator.  # noqa: E501
        :rtype: ExpirationSource
        """
        return self._expiration_source

    @expiration_source.setter
    def expiration_source(self, expiration_source):
        """Sets the expiration_source of this ExpirationIndicator.


        :param expiration_source: The expiration_source of this ExpirationIndicator.  # noqa: E501
        :type: ExpirationSource
        """

        self._expiration_source = expiration_source

    @property
    def expiration_status(self):
        """Gets the expiration_status of this ExpirationIndicator.  # noqa: E501


        :return: The expiration_status of this ExpirationIndicator.  # noqa: E501
        :rtype: ExpirationStatus
        """
        return self._expiration_status

    @expiration_status.setter
    def expiration_status(self, expiration_status):
        """Sets the expiration_status of this ExpirationIndicator.


        :param expiration_status: The expiration_status of this ExpirationIndicator.  # noqa: E501
        :type: ExpirationStatus
        """

        self._expiration_status = expiration_status

    @property
    def manual_expiration_time(self):
        """Gets the manual_expiration_time of this ExpirationIndicator.  # noqa: E501


        :return: The manual_expiration_time of this ExpirationIndicator.  # noqa: E501
        :rtype: datetime
        """
        return self._manual_expiration_time

    @manual_expiration_time.setter
    def manual_expiration_time(self, manual_expiration_time):
        """Sets the manual_expiration_time of this ExpirationIndicator.


        :param manual_expiration_time: The manual_expiration_time of this ExpirationIndicator.  # noqa: E501
        :type: datetime
        """

        self._manual_expiration_time = manual_expiration_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpirationIndicator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpirationIndicator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
